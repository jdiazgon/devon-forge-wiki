:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Creating New OASP4J Application

In this chapter we are going to show how to create a new _Oasp4j_ application from scratch. The app that we are going to create is _Jump the Queue_, a simple app to avoid the queue in an event by registering a visitor and obtaining an _access code_. You can read all the details of the app in the <<Design Philosophy : Jump the Queue,Jump the Queue Design>> page.

=== Getting Devonfw distribution

The recommended way to start developing _Oasp4j_ applications is to get the latest _Devonfw_ distribution to have a _ready-to-start_ development environment.

You can download _Devonfw_ distributions from https://coconet.capgemini.com/sf/frs/do/listReleases/projects.apps2_devon/frs.devon_distribution[TeamForge].

Once the download is done extract the _zip_ file and you will get the distribution's content as shown below:

image::images/devonfw-dist-structure/devonfw-dist-structure-02.png[width="450", link="images/devonfw-dist-structure/devonfw-dist-structure-02.png"]

=== Initialize the distribution

Before creating our first project you must initialize the distribution. To do so execute the scripts
----
create-or-update-workspace.bat
----

and then

----
update-all-workspaces.bat
----

Now you should see the _conf_ directory and the Eclipse launchers.

[NOTE]
====
Learn more about _Devonfw_ initialization https://github.com/devonfw/devon/wiki/getting-started-download-and-install#prepare-the-workspace[here]
====

=== Create the Server Project

First, in the _workspaces_ directory of the distribution create a new folder _jumpthequeue_ and go into it

----
workspaces>mkdir jumpthequeue
workspaces> cd jumpthequeue
----

We are going to generate the new _Oasp4j_ project using _Devcon_. To launch the tool run the 'console.bat' script, in the new opened command line window execute the command

----
devcon -g
----

You should see the _Devcon_'s GUI. Select `oasp4j` and `create`

image::images/oasp4j/3.BuildYourOwn/newapp1.png[width="450", link="images/oasp4j/3.BuildYourOwn/newapp1.png"]

Then we only need to define our server app _path_ (for the location of the app select our just created _jumpthequeue_ directory), _name_, _groupid_, _package_, _version_ and _dbtype_. Finally click on _Start_ button.

image::images/oasp4j/3.BuildYourOwn/devcon_dbtype.png[width="450", link="images/oasp4j/3.BuildYourOwn/devcon_dbtype.png"]

Once you see the `BUILD SUCCESS` info message your new app is ready.

[NOTE]
====
You can also create new projects:

- manually from command line https://github.com/devonfw/devon/wiki/getting-started-creating-new-devonfw-application#using-command-line[see how]

- from Eclipse https://github.com/devonfw/devon/wiki/getting-started-creating-new-devonfw-application#from-eclipse[see how]

====

=== Import and Run the Application

As last step we can import the project we just created into the Eclipse IDE provided with _Devonfw_ distribution. Although our new _Oasp4j_ based app is still empty we are going to show how to run it with _Spring Boot_ simply to check that everything is ok.

We could use the _eclipse-main.bat_ or the _eclipse-examples.bat_ launchers (that you should see on your distribution's root directory) but we are going to create a new _Eclipse_ launcher related to our new project.

To do it launch again the script

----
update-all-workspaces.bat
----

After the process is done you should see a new _eclipse-jumpthequeue.bat_ launcher. Execute it and a new _Eclipse_ instance should be opened.

Now import our new project with `File > Import`.

Select _Maven/Existing Maven Projects_ 

image::images/oasp4j/3.BuildYourOwn/newapp3.png[, link="images/oasp4j/3.BuildYourOwn/newapp3.png"]

Browse for the _jumpthequeue_ project

image::images/oasp4j/3.BuildYourOwn/newapp4.png[, link="images/oasp4j/3.BuildYourOwn/newapp4.png"]

Click `Finish` and wait while the dependencies of the project are resolved to complete the import process.

Now let's change the _server context path_ of our application. Open `/jumpthequeue-core/src/main/resources/config/application.properties` and set the `server.context-path` property to _/jumpthequeue_

----
server.context-path=/jumpthequeue
----

[NOTE]
====
You can also change the port where the application will be available with the property `server.port`
====

Finally, using _Spring Boot_ features (that provides us with an embedded Tomcat), we can run the app in an easy way. Look for the `SpringBootApp.java` class and click right button and select `Run As > Java Application`.

image::images/oasp4j/3.BuildYourOwn/run.png[, link="images/oasp4j/3.BuildYourOwn/run.png"]

If everything is ok you will see a messages in the _Console_ window like

----
INFO [main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8081 (http)
INFO [main] com.cap.jumpthequeue.SpringBootApp       : Started SpringBootApp in 16.978 seconds (JVM running for 17.895)
----

The app will be available at 'http://localhost:8081/jumpthequeue'

image::images/oasp4j/3.BuildYourOwn/login.png[, link="images/oasp4j/3.BuildYourOwn/login.png"]

[NOTE]
====
You are redirected to the login screen because, by default, the new _Oasp4j_ applications provide a basic security set up.
====

=== What is generated?

Creating _Oasp4j_ based apps, we get the following main features _out-of-the-box_:

* _Maven_ project with _core_ project and _server_ project:

** _core_ project for the app implementation

** _server_ project ready to package the app for the deployment

image::images/oasp4j/3.BuildYourOwn/emptyapp_project.png[ width="250", link="images/oasp4j/3.BuildYourOwn/emptyapp_project.png"]


* Data base ready environment with an _h2_ instance
* Spring profiles ready for different data bases

image::images/oasp4j/3.BuildYourOwn/emptyapp_dbprofile.png[ width="650", link="images/oasp4j/3.BuildYourOwn/emptyapp_dbprofile.png"]


* Data model schema
* Mock data schema
* Data base version control with Flyway

image::images/oasp4j/3.BuildYourOwn/emptyapp_dbmodel.png[ width="650", link="images/oasp4j/3.BuildYourOwn/emptyapp_dbmodel.png"]


* Bean mapper ready

image::images/oasp4j/3.BuildYourOwn/emptyapp_beanmapper.png[ width="650", link="images/oasp4j/3.BuildYourOwn/emptyapp_beanmapper.png"]


* Cxf services pre-configuration

image::images/oasp4j/3.BuildYourOwn/emptyapp_cxfconfig.png[ width="650", link="images/oasp4j/3.BuildYourOwn/emptyapp_cxfconfig.png"]


* Basic security enabled (based on _Spring Security_)

image::images/oasp4j/3.BuildYourOwn/emptyapp_security.png[ width="650", link="images/oasp4j/3.BuildYourOwn/emptyapp_security.png"]


* Unit test support and model

image::images/oasp4j/3.BuildYourOwn/emptyapp_test.png[ width="650", link="images/oasp4j/3.BuildYourOwn/emptyapp_test.png"]
