:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== The Winauth-AD module

This Devonfw module allows the applications to authenticate the users against an Active Directory.

=== Authentication with Active Directory

Active Directory (AD) is a directory service that Microsoft developed for Windows domain networks. It is included in the most Windows Server operating systems as a set of processes and services. Initially, Active Directory was only in charge of centralized domain management. Starting with Windows Server 2008, however, Active Directory became an umbrella title for a broad range of directory-based identity-related services.

For more information, visit https://en.wikipedia.org/wiki/Active_Directory[wikipedia].

==== Include Winauth-ad in a Devon project

Winauth-ad module provides a simple authentication for your Devon applications. To implement authentication in your Devon project, follow the next steps:

===== Step 1: Add the starter

Include the starter in pom.xml. Verify that the _version_ matches the last available version of the module.

[source,xml]
----
<dependency>
      <groupId>com.devonfw.starter</groupId>
      <artifactId>devonfw-winauth-ad-starter</artifactId>
      <version>${devonfw.version}</version>
</dependency>
----


===== Step 2: Security configuration 

Create a variable of the class _AuthenticationManagerAD_ in `general/service/impl/config/BaseWebSecurityConfig.java`

[source,java]
----
@Inject
private AuthenticationManagerAD authenticationManagerAD;
----

[NOTE]
====
For previous versions of the _oasp4j_ based apps, you may find `BaseWebSecurityConfig` in a different location: `general/configuration/BaseWebSecurityConfig.java` 
====

Remember to add the package of the module to the `@ComponentScan` annotation in the Spring Boot main class.

[source,java]
----
@ComponentScan(basePackages = { "com.devonfw.module.winauthad" , "my.other.components.package" })
----

===== Step 3: Define the provider

Also, in the `BaseWebSecurityConfig.java` class, add the LDAP provider to the AuthenticationManagerBuilder in the `configureGlobal(AuthenticationManagerBuilder auth)` method 

[source,java]
----
auth.authenticationProvider(this.authenticationManagerAD.LdapAuthenticationProvider());
----

[NOTE]
====
For previous version of _oasp4j_ apps, you won't find 'configureGlobal' method. Therefore, you should add it in the `init()` method instead (in such cases, you should find an AuthenticationManagerBuilder available in the class). 

[source,java]
----
@PostConstruct
public void init() throws Exception {
this.authenticationManagerBuilder
    .authenticationProvider(this.authenticationManagerAD.LdapAuthenticationProvider());
}
----
====


===== Step 4: Implement the UserDetailsContextMapper

Implement the class UserDetailsContextMapper to build the UserDetails with the data of the user. 

[source,java]
----
import com.devonfw.module.winauthad.common.api.AuthenticationSource;
import com.devonfw.module.winauthad.common.api.UserData;
import com.devonfw.module.winauthad.common.impl.security.GroupMapperAD;
import com.devonfw.module.winauthad.common.impl.security.PrincipalProfileImpl;

@Named
@Component
public class UserDetailsContextMapperImpl implements UserDetailsContextMapper {

  private static final Logger LOG = LoggerFactory.getLogger(UserDetailsContextMapperImpl.class);

  @Inject
  private AuthenticationSource authenticationSource;

  @Inject
  private GroupMapperAD groupMapperAD;

  @Inject
  private AccessControlProvider accessControlProvider;

  /**
   * @return authenticationSource
   */
  public AuthenticationSource getAuthenticationSource() {

    return this.authenticationSource;
  }

  /**
   * @param authenticationSource new value of authenticationSource.
   */
  public void setAuthenticationSource(AuthenticationSource authenticationSource) {

    this.authenticationSource = authenticationSource;
  }

  /**
   * @param accessControlProvider new value of accessControlProvider.
   */
  public void setAccessControlProvider(AccessControlProvider accessControlProvider) {

    this.accessControlProvider = accessControlProvider;
  }

  /**
   * @return groupMapperAD
   */
  public GroupMapperAD getGroupMapperAD() {

    return this.groupMapperAD;
  }

  /**
   * @param groupMapperAD new value of groupMapperAD.
   */
  public void setGroupMapperAD(GroupMapperAD groupMapperAD) {

    this.groupMapperAD = groupMapperAD;
  }

  @Override
  public UserDetails mapUserFromContext(DirContextOperations ctx, String username,
      Collection<? extends GrantedAuthority> authorities) {

    UserData user = new UserData(username, "", authorities);

    try {
      Attributes attributes = this.authenticationSource.searchUserByUsername(username);

      String cn = attributes.get("cn").toString().substring(4);// Username
      String givenname = attributes.get("givenname").toString().substring(11); // FirstName
      String sn = attributes.get("sn").toString().substring(4);// LastName
      String memberOf = attributes.get("memberof").toString().substring(10); // Groups

      PrincipalProfileImpl userProfile = new PrincipalProfileImpl();
      userProfile.setName(cn);
      userProfile.setFirstName(givenname);
      userProfile.setLastName(sn);
      userProfile.setId(cn);
      ArrayList<String> groups = this.groupMapperAD.groupsMapping(memberOf);

      userProfile.setGroups(groups);

      // determine granted authorities for spring-security...
      Set<GrantedAuthority> authoritiesAD = new HashSet<>();
      Collection<String> accessControlIds = groups;
      Set<AccessControl> accessControlSet = new HashSet<>();
      for (String id : accessControlIds) {
        boolean success = this.accessControlProvider.collectAccessControls(id, accessControlSet);
        if (!success) {
          LOG.warn("Undefined access control {}.", id);
          // authorities.add(new SimpleGrantedAuthority(id));
        }
      }
      for (AccessControl accessControl : accessControlSet) {
        authoritiesAD.add(new AccessControlGrantedAuthority(accessControl));
      }

      user = new UserData(username, "", authoritiesAD);
      user.setUserProfile(userProfile);
    } catch (Exception e) {
      e.printStackTrace();
      UsernameNotFoundException exception = new UsernameNotFoundException("Authentication failed.", e);
      LOG.warn("Failed com.devonfw.module.winauthad.common.impl.security get user {} in Active Directory."
          + username + exception);
      throw exception;
    }
    return user;
  }

  @Override
  public void mapUserToContext(UserDetails user, DirContextAdapter ctx) {

  }
}
----

[NOTE]
====
Therefore, the above code builds the user with the Active Directive information. And the map of the groups in the configuration.

You can build any User you want. For e.g. you could use a query to Active Directory (like the example) or a query to your own User database.  
====

===== Step 5: Configure the LDAP-AD connection

Now, you need to configure the LDAP parameters in _application.properties_. By default, the _winauth-ad_ module works with a LDAP Authentication and a query to AD to have the authorization, so you need to define all these properties. If you are using a customized _UserDetails_ without AD query, you don't need to define the AD properties. The same happens, if you don't use the _Role Mapping_ class.

[source,xml]
----
#Server configuration 
#LDAP
devon.winauth.ldap.url=ldap://mydomain.com/
devon.winauth.ldap.encrypt=true
devon.winauth.ldap.keyPass=keyPass
devon.winauth.ldap.password=ENC(...)
devon.winauth.ldap.userDn=cn=user,DC=mydomain,DC=com
devon.winauth.ldap.patterns=ou=Users
devon.winauth.ldap.userSearchFilter=(sAMAccountName={0})
devon.winauth.ldap.userSearchBase=

#AD
devon.winauth.ad.url=ldap://mydomain.com/OU=Users,DC=MYDOMAIN,DC=COM
devon.winauth.ad.domain=mydomain.com
devon.winauth.ad.username=user
devon.winauth.ad.encrypt=true
devon.winauth.ad.keyPass=keyPass
devon.winauth.ad.password=ENC(...)
devon.winauth.ad.userSearchFilter=(uid={0})
devon.winauth.ad.userSearchBase=
devon.winauth.ad.searchBy=sAMAccountName
devon.winauth.ad.rolePrefix=^(.*)CN=([^,]*),.*,DC=MYDOMAIN,DC=COM$

#Roles mapping
devon.winauth.groups.Chief=S-ESPLAN
devon.winauth.groups.Waiter=S-ECOMU7
devon.winauth.groups.Cook=dlescapgemini.grado-a
devon.winauth.groups.TESTGROUP=testGroup
----

Now you can run your application and show the login form with the Active Directory authentication.

[NOTE]
====
As you can see the property password is encrypt. You can find more information about it https://github.com/devonfw/devon/wiki/encrypting-properties[here]. Also you can put the password without encrypt by default.
==== 

==== Using the UserDetailsContextMapper with AD

As mentioned above, you can implement your own _UserDetailsContextMapper_ or use the _UserDetailsContextMapper_ given in this tutorial. If you use the last one, you need to keep in mind the next points.

===== Roler and Groups mapper

_Winauth-ad_ includes a group mapper that gives a simple tool to map the groups of the Active Directory with a roles/groups of your application. To use it, you need to configure the mapping as shown below:

[source,xml]
----
#Roles mapping
devon.winauth.groups.SESPLAN=S-ESPLAN
devon.winauth.groups.ECOMU7=S-ECOMU7
devon.winauth.groups.GradoA=dlescapgemini.grado-a
devon.winauth.groups.TESTGROUP=testGroup
----

Now, if you ask the server for the current user of the application, you will see the user data with his groups. 

===== Service CurrentUser

If you use the basic _UserDetailsContextMapper_ that winauth-ad implements, you need to modify the service _currentuser_ in the class `general/service/impl/rest/SecurityRestServiceImpl.java`. 

[source,java]
----
  @Produces(MediaType.APPLICATION_JSON)
  @GET
  @Path("/currentuser/")
  @PermitAll
  public UserDetailsClientToAD getCurrentUser(@Context HttpServletRequest request) {

    if (request.getRemoteUser() == null) {
      throw new NoActiveUserException();
    }
    return UserData.get().toClientTo();
  }
----

[NOTE]
====
You need to _import_ the classes `UserData` and `UserDetailsClientToAD` of the _winauth-ad_ module.
====