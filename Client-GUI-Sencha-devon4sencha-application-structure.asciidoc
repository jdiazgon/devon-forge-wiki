:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Project Layout

The layout of folder/files recommended to work with a Sencha project in a MVVM fashion is as follows:

image::images/client-gui-sencha/sctructure.PNG[,align="center",width="250",App Structure, link="images/client-gui-sencha/sctructure.PNG"]

This structure is understood by Sencha Cmd in order to provide facilities to work with the code.  As you can observe there is no html as it will be generated by Cmd when building the application.

* **Folder controller**: This folder contains the main controllers of the application.
* **Folder model**: This folder contains the models of the application.
* **Folder view**: This folder contains the views, viewControllers, viewModels of the application.
* **File Application.js**: The main application class based on Devon.App(Ext.app.Application) class.
* **File app.json**: Sencha Cmd configuration file.
* **File Config.js**: Config javascript configuration properties. It contains all configuration properties needed by the application like internationalization, REST URL endpoints, etc. This file must be loaded before the rest of the application (app.json takes care of this).   For example:

image::images/client-gui-sencha/ConfigFile.PNG[,align="center",width="250",Config.js, link="images/client-gui-sencha/ConfigFile.PNG"]

* **Folder packages**: In this folder resides the devon4sencha package that meets the application requirements.  In \packages\local\devon-extjs you can find what Devon4Sencha builds on top of Sencha libraries.

=== Main Template

Devon4Sencha provides the basis for creating SPA (Single Page Applications) both for desktop and mobile clients. 

For each device there is an appropriate layout that is more suitable for big or small screens. Devon proposes a template for starting an application that can be customized or completely replaced if needed.

For desktop, the main layout of the application is as follows:

image::images/client-gui-sencha/maintemplate-image1.png[Template,width="450", link="images/client-gui-sencha/maintemplate-image1.png"]

Here we find:

* Header: for displaying the logo, application name, user related info, etc...
* Menu: main navigation controls for the application, with sub-menus
* Side panel: area dedicated to secondary functionality of the application
* Content: main area where the "pages" of the application are loaded

This pattern allows for very productive applications because the content area makes use of a `Tab` component that can display multiple instances of different entities at once, so the user can rapidly cycle between them, or load several in parallel.

Sencha layout system works in a similar way to traditional Java "swing" applications composing visual controls (called components) into containers that can be arranged into other containers.

The main view for the application is called *viewport* and Devon provides one by default `**Devon.view.main.Viewport**`

Inside this *viewport* all the areas of the template are included if defined by the application based on the *alias* of the containers. This alias allows to reference the component within other components or containers. The *alias* used on the viewport are:

* main-viewport
* main-header
* main-menu
* main-slidepanel
* main-content

If the application doesn't declare a container with such an *alias* then it won't be shown on the application.

If more customization is needed then it is better to not start with `Devon.view.main.Viewport` and create your own viewport object.

Another concern for the *viewport* is to contain references to *global* data that can be addressed by visual components of the application, such as information about the logged user. This is achieved by storing this data into the *ViewModel* of the *viewport*. As the *ViewModel* is inherited by contained components, storing information at the root of the view hierarchy makes this available everywhere.

This can be useful for example for <<Security,controlling visibility of controls based on user roles>>

==== Displaying pages

The main template for Devon applications is based on a tabbed layout. This is very convenient and makes for very productive applications since several entities can be opened at the same time and the user can switch easily between them.

Displaying pages on this template is only a matter to add children panels to this `tabbar` which can be addressed by its alias `main-content` or by using the Devon method `Devon.App.openInContentPanel` (see jsdoc for more information on the usage of this method)

===== Closing pages with forms without losing input data

Devon framework offers the `Devon.plugin.PreventDataLoss` plugin valid only for `Ext.form.Panel` objects. This plugin alerts the user about losing data when the form has been edited on screen and hasn't been saved, before closing a page or window.
This plugin can be used as shown below:

[source,javascript]
----
Ext.define('Sample.some.View', {
  extends : 'Ext.form.Panel',

  closable:true,
  bind:{
    values:'{myValues}'
  },
  plugins:['preventdataloss'],
  items : [{
    xtype:'textfield',
    reference:'id',
    name:'id',
    bind:{value:'{myValues.id}'}
  }]
});
----

Note that the form, or a panel or tab that contains the form, must be *closable*.

In a form panel, a record or an object with data can be used to bind to the view properties `record` or `values` (as shown in the sample).

By specifying the property `mainPanel` (String: panel xtype), the plugin will search for a parent component with that `xtype`, and alerts the user before closing the referenced panel although it doesn't need to be closable.

[source,javascript]
----
Ext.define("Sample.view.table.TableCrud", {
  extend: "Ext.panel.Panel",
  xtype:'tablecrud',

  items:[{
    xtype:'form',
    bind:{
      values:'{table}'
    },
    plugins:[{
      ptype:'preventdataloss',
      mainPanel:'tablecrud'         // <-- component to watch for modifications
    }],
    items:[]
  }]
});
----    