:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Ext.window.Window

Windows are a Panel subclass designed to float above all other components in an application. Windows are a great way to present a popup-style context view to the end user. Used judiciously, windows can be a great way to present a lot of information without intruding on the other views occupying the screen real estate.

By default, windows will be rendered to the document body (document.body), though they may also be rendered to an HTML element using the renderTo config option. You can also add windows as child components of a container. Windows added as a child item will not participate in the component's layout, but will be hidden when the parent container is hidden and destroyed when the parent container is destroyed. The window will also have access to the parent container's view model data and view controller logic.

Note: For more information on view controller event handling and data binding via the view model see the view controller and view model guides.

=== Basic Window

Windows, like other floating components, are initially rendered as hidden and must be shown programmatically using the show method.

[source,java]
----
var win = Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    buttons: [{
        text: 'Login'
    }]
});

win.show(); // once created, call show to display the window
----

When showing a window you can have it appear as though it's emerging from an existin component or DOM element. Simply configure the window with animateTarget and set the element or component you want the window to pop up from.

[source,java]
----
var btn = Ext.create({
    xtype: 'button',
    renderTo: Ext.getBody(),
    text: 'Show User Login',
    handler: function () {
        win.show();
    }
});
var win = Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    closeAction: 'hide',    // hides instead of destroys the window when closed
    animateTarget: btn,
    buttons: [{
        text: 'Login'
    }]
}); 
----

If you want to show a window as soon as it's created you can use the autoShow config option.

[source,java]
----
Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    autoShow: true, // shows the window as soon as its created
    buttons: [{
        text: 'Login'
    }]
}); 
----

Often times when you show a window you'll want to restrict the user from interacting with the components residing beneath the window. This is easily done with the modal config option. Setting modal: true creates a semi-transparent overlay between the window and the application components below. The modal overlay intercepts all user interactions and redirects the user back to the context window.

[source,java]
----
var btn = Ext.create({
    xtype: 'button',
    renderTo: Ext.getBody(),
    text: 'Inaccessible button'
});
var win = Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    closable: false,
    autoShow: true,
    modal: true,    // prevents users from interacting with components below
    buttons: [{
        text: 'Login'
    }]
}); 
----

The window will be centered within its parent container / element when shown. You can set the initial x / y position using the x and y config options. The x and y offsets are relative to the owning container / element versus the browser viewport.

[source,java]
----
// to demonstrate the ability to position the window relative to its
// owning container we'll create a container with two child containers
// the second of which will host our window
Ext.create({
    xtype: 'container',
    plugins: 'viewport',
    layout: {
        type: 'hbox',
        align: 'stretch'
    },
    items: [{
        xtype: 'container',
        flex: 1
    }, {
        xtype: 'container',
        flex: 1,
        items: [{
            xtype: 'window',
            title: 'User Login',
            height: 200,
            width: 200,
            x: 20,  // offset the window 20px from the parent's left edge
            y: 20,  // and 20px from the parent's top edge
            autoShow: true,
            buttons: [{
                text: 'Login'
            }]
        }]
    }]
}); 
----
Windows come with a convenient config for focusing a component once the window is shown. This comes in particularly handy when the window contains form elements. A common use case will be to focus the first input field when the window is shown.

[source,java]
----
Ext.create({
    xtype: 'window',
    title: 'User Login',
    width: 240,
    autoShow: true,
    bodyPadding: 20,
    defaultFocus: 'textfield',  // focuses on the first child textfield
    defaultType: 'textfield',
    defaults: {
        anchor: '100%'
    },
    layout: 'anchor',
    items: [{
        emptyText: 'login'
    }, {
        emptyText: 'password'
    }],
    buttons: [{
        text: 'Login'
    }]
}); 
----

Windows are draggable by default by clicking and dragging the window header. The window itself is not dragged, but rather a proxy representation of itself that indicates where the window will be dropped once the drag operation is complete. The window will drag outside of the owning container / element unless constrained. You have a couple of options available for preventing the window from being dragged outside its owning container. First, you can configure the window with constrain: true to prevent the window header or body from dragging outside the owner element's boundaries.

Note: You can prevent the window from being draggable by setting the draggable config option to false.

[source,java]
----
Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    autoShow: true,
    constrain: true,    // dragging is constrained within the owning container
    buttons: [{
        text: 'Login'
    }]
}); 
----

Alternatively, you can specify that only the window's header is to be constrained. By using constrainHeader: true the window's header cannot be dragged outside of the owning container.

[source,java]
----
Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    autoShow: true,
    // the window header cannot be dragged beyond the owning container
    constrainHeader: true,
    buttons: [{
        text: 'Login'
    }]
}); 
----

Using the liveDrag config you can drag the window component itself rather than a proxy of the window.

[source,java]
----
Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    autoShow: true,
    liveDrag: true,
    buttons: [{
        text: 'Login'
    }]
}); 
----

Windows are resizable by default allowing you to resize the window by dragging a corner or any side in order to change the dimensions of the window. You can prohibit resizing by setting resizable: false. Or, if the use case dictates, you can pass a config object for the underlying resizer class to further qualify the resizing options. Of if all you want to stipulate is the handles users have available for resizing you can set the resizeHandles config option with the positions you'd like the resize handles to appear.

[source,java]
---- 
Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    autoShow: true,
    resizeHandles: 'nw ne sw se',   // allows resizing of the corners only
    buttons: [{
        text: 'Login'
    }]
}); 
----

Floating components have a shadow under them to visually emphasize the fact that these components sit above other components in the application. The shadow will appear on the sides and bottom of the window by default. Or, you can specify the shadow config as "sides" in order to show the shadow on all 4 sides or as "drop" to direct the shadow to appear on the bottom-right. The shadowOffset config determines the "height" of the window by setting how far the shadow is from the window element. If a shadow is not the right visual choice for your application you can set shadow: false to prevent the shadow altogether.

[source,java]
----
Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    autoShow: true,
    shadow: false,  // no shadow is shown for this floating component
    buttons: [{
        text: 'Login'
    }]
}); 
----

Windows are designed as closable by default. This means that in the window's header there will be a close icon that when clicked will either destroy or hide the window. By default, the window will be destroyed when closed. If your use case for the window requires it to be hidden rather than destroyed you can configure closeAction: â€˜hide'.
By hiding the window you can just show it again later without having to re-create it.

Once a window is shown and focused it may also be closed by pressing the "escape" key.
To prevent the escape key from closing the window you can configure the onEsc option with an alternate function or "Ext.emptyFn" to prevent any action from taking place when the escape key is pressed. To prevent a window from being closed by the user at all you can configure it with closable: false.

Note: With the closable config option set to false the user will not see the close icon in the window header and pressing the escape key will have no effect. The window is, however, still closable programmatically using window's close method.

[source,java]
----
Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    autoShow: true,
    // closeAction: 'hide', // hides instead of destroys the window when closed
    closable: false,       // no close icon is created for this window
    buttons: [{
        text: 'Login'
    }]
}); 
----
The window API makes it easy to maximize, restore, and minimize a window panel simiar to the application windows you may be used to on a desktop machine. The maximize config option displays a maximize button in the panel header that when clicked will cause the window to take up the space of the container / element it's rendered within. Once maximized, the maximize button changes to a restore button that when clicked will restore the window back to the size and position it was prior to being maximized.

Note: The window may also be configured as maximized: true to start the window out as maximized when created.

[source,java]
----
Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    autoShow: true,
    // displays the maximizable tool in the header
    // once maximized the restore tool will swap in with the maximizable tool
    maximizable: true,
    buttons: [{
        text: 'Login'
    }]
}); 
----

The minimizable config option displays the minimize icon in the header, but itself does not add additional functionality. For the minimize tool to do something when clicked you'll need to add your own logic to the minimize method. In the following example we have a button that when clicked shows the maximizable and minimizable window. Clicking the minimize tool will hide the window.

[source,java]
----
var btn = Ext.create({
    xtype: 'button',
    renderTo: Ext.getBody(),
    text: 'Show User Login',
    handler: function() {
        win.show();
    }
});
var win = Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    closable: false,
    animateTarget: btn,
    maximizable: true,  // displays the maximize and restore tools in the header
    minimizable: true,  // displays the minimize tool in the header
    // performs custom logic when the minimize tool is clicked
    minimize: function () {
        this.hide();
    },
    buttons: [{
        text: 'Login'
    }]
}); 
----

Floating components like window may be re-positioned and re-sized by the user, but they may also be positioned and sized programmatically. You can position a window using the setPosition method.

[source,java]
----
var win = Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    autoShow: true,
    buttons: [{
        text: 'Re-position',
        handler: function () {
            // the third param animates the window into the new coordinates
            win.setPosition(0, 0, {
                duration: 250
            });
        }
    }]
}); 
----

Resizing a window may be accomplished using the setWidth, setHeight, or setSize methods.

[source,java]
----
var win = Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    autoShow: true,
    buttons: [{
        text: 'Re-size',
        handler: function () {
            // resizes the window to 2x it's original size
            win.setSize(400, 400);
        }
    }]
}); 
----

Using the animate method you can get fancy and animate the window into a new position at a new size.

[source,java]
----
var win = Ext.create({
    xtype: 'window',
    title: 'User Login',
    height: 200,
    width: 200,
    autoShow: true,
    buttons: [{
        text: 'Double the window\'s size',
        handler: function () {
            // animate the window to be 2x it's original size
            // and keep it centered at the same time
            win.animate({
                to: {
                    left: win.getX() - (win.getWidth() / 2),
                    top: win.getY() - (win.getHeight() / 2),
                    width: win.getWidth() * 2,
                    height: win.getHeight() * 2
                }
            });
        }
    }]
}); 
----

=== Conclusion

Windows are a handy way to present your end user with additional information without needing to wrestle with the real estate used by the rest of the application. Since windows are a container you can give them any layout fitting your use case. That combined with their floating nature and the ability to maximize and minize makes windows an extremely versatile component in the Ext JS framework. For light informational popups and confirmation windows check out the Ext.window.MessageBox class.