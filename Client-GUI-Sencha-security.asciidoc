:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Security

Security is an important topic on web applications. JavaScript driven applications must be aware of some patterns to guarantee that information is not compromised.

Following the advice of the https://www.owasp.org/index.php/Main_Page[OWASP] project, Devon applications take care of:

* http://en.wikipedia.org/wiki/Cross-site_request_forgery[CSRF] protection
* Always return JSON with an Object on the outside

The CSRF protection is achieved by introducing a custom header with a value obtained from the server for each request. The token is automatically obtained by `Devon.Security.getCSRF` method on the login process and assigned to each request afther that.

The second protection is achieved by using the conventions of the communication protocol between client and server that specifies that every response is an object and effective results are inside a property of this object named `results`.

=== Login process

By default `Devon.App` drives the login process in a configurable way. The steps are:

* Verify existing session by calling `checkExistingSession` on a class with alias `app-security`
* If a session exists: instance a view with an alias of `main-viewport`
* If there is no session: instance a view with an alias of `main-login`

By providing a custom class or views with these aliases the application can introduce it's own custom logic or view and take advantage of this login process mechanism.


==== Check existing session

The default implementation for checking the session is provided by `Devon.Security.checkExistingSession` method which makes an ajax request to the *currentuser* REST endpoint on the server.

If the result is successful, the response provides the information for logged user, which is stored on client for later use.

After that, `Devon.App` instantiates the view aliased as `main-viewport` with the current user as data for its viewModel.

==== Login window

When there is no existing session in place, the view aliased as `main-login` is instantiated and shown. The default implementation is provided by `Devon.view.login` classes and tries to check user/password with the login endpoint on server.

Upon successful authentication request, the login view must fire an event called `eventLoginSuccessful` that will be trapped by the creator of the view (the `Devon.App` class) to destroy current login form and call the same logic as if an existing session was in place (that is, to instantiate the `main-viewport`)


=== User security info

In the object `Devon.Security.currentUser` we can find information of the current user like firstname, lastname,... and roles. The *roles* object has a value of *true* or *false* for each rol name loaded from the server, this way it can be used on several parts of the framework on an easy way as we will see.

[source,javascript]
----
{
  curentUser : {
     login : "name",
     roles : {
         ROLE_ADMIN: true,
         ROLE_MANAGER: true
     }
  }
}
----


=== Controlling visibility of controls based on user roles

Having the current logged user info on the root of the viewModel hierarchy (that is, the viewport) enables child views to address this info to show/hide controls based on some info. For example:

[source,javascript]
----
Ext.define('Sample.some.View', {
   extends : 'Ext.Panel',
   items : [
     {
        html: 'This will be visible always'
     },
     {
        html: 'This is only visible to users with ROLE_ADMIN role',
        bind:{
          hidden : '{currentUser.roles.ROLE_ADMIN}'
        }
     }]
});
----
