:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== An OASP4JS Application Structure

=== Overview

What we have shown in the previous section is the aspect of a My Thai Star client app that consumes the services created with the _Oasp4j_ server solution.

From now on we are going to focus on the implementation of the components, services and directives to show how is it formed and how you can create your own _Oasp4js_ client project with Devon framework.

My Thai Star project is hosted https://github.com/oasp/my-thai-star[on github] and includes different technologies such as _Java_, _.Net_ and _Node_ for backend solutions and _Angular_ and _Xamarin_ as default clients.

==== The OASP4JS Project

Using the _Oasp4js_ approach for the client project we will have a structure of a main _Angular_ project formed as follows:

image::images/oasp4js/2.Example_app/project_main_files.JPG[, link="images/oasp4js/2.Example_app/project_main_files.JPG"]

In the _e2e_ folder will be all end-to-end tests.

In the _node modules_ folder, all installed dependencies will be stored.

The _src_ folder contains all the application code.

Finally, the rest of the files are config files for the different technologies involved in the project.

==== Angular folder structure

Following https://angular.io/docs/ts/latest/guide/style-guide.html[Angular style guide] rules, the structure of the application has been built this way:

* app
** components
*** sub-components
*** shared
**** services
*** component files
** main app component
* assets folder
* environments folder
* rest of angular files

As can be seen in this image:

image::images/oasp4js/2.Example_app/app_structure.JPG[, link="images/oasp4js/2.Example_app/app_structure.JPG"]

==== Components
As we already saw in the previous chapter, Angular architecture is based on three types of elements: Components, Services, Modules and Directives.

In this section we are going to focus on the _components_. We can distinguish them because they all are named with the extension *.component.ts*.

Components are a single element of the application, but it can have, at the same time, more components in them, this is the case for the components that are _main views_: *app*(main component of the app), *home*, *menu*, *book-table*, *cockpit-area* or the components for the dialogs. These views have their own layout from Covalent Teradata to organize its contents as well as other components or tags to be displayed.

[source, typescript]
----
import {...} from '...'

@Component({
  selector: 'public-menu',
  templateUrl: './menu.component.html',
  styleUrls: ['./menu.component.scss'],
})
export class MenuComponent implements OnInit {
    methods implementation...
}

----

Even though, there are also components that are an element of a template that has a complete meaning by themselves and can be reused multiple times and/or in multiple places, this is the case of components like, *sidenav*, *header* or *menu-card*, which is an element that accepts an input data with the menu information and displays it as a card, this component will be repeated for every single dish on the menu, so the better way to handle this is to isolate its logic and template in a component so the menu view just have to know about the existence of the component and the data it needs to work.

[source, typescript]
----
<public-menu-card *ngFor="let menu of menus" [menu]="menu"></public-menu-card>
----

image::images/oasp4js/2.Example_app/menu_cards.JPG[, link="images/oasp4js/2.Example_app/menu_cards.JPG"]

To interact and navigate between the main views, Angular provides a *Router* that provides with functionalities to move between URL's in the same app, in addition, it provides an HTML tag `<router-outlet></router-outlet>` that will show the component that has been navigated to. This router tag is placed in the main app component, at the same level as the sidenav and the header, this means that these two components are on top of whatever the router shows, that is why we can always see the header no matter what component we are displaying through the router.

Also, Angular Material provides a _tab_ component, which can show content depending on which tab you clicked, but they are in the same component, an example of usage of this kind of components can be seen in the book-table view:

image::images/oasp4js/2.Example_app/book_table.JPG[, link="images/oasp4js/2.Example_app/book_table.JPG"]

This component view shows a card that can show an instant reservation or the creation of an event.

==== Services
Ideally, all the logic should be taken out of the component, and let there only the calls to the services and minimal script interaction. Services is where all the logic should be, including calling the server.

MyThaiStar components consume this services, as could be the price-calculator when a costumer makes an order:

image::images/oasp4js/2.Example_app/price_calculator.JPG[, link="images/oasp4js/2.Example_app/price_calculator.JPG"]

There are two exceptional cases in MyThaiStar of services that serve with a different proposal than serve to a specific component: *Authentication and AuthGuard* and *HttpClient*.

To secure the access to waiter cockpit, which is a forbidden area to anyone who is not a waiter, MyThaiStar counts with a service of authentication and a Router Guard.

image::images/oasp4js/2.Example_app/authentication.JPG[, link="images/oasp4js/2.Example_app/authentication.JPG"]

Guards are services that implements _CanActivate_ function which returns a Boolean indicating if the navigation is valid or forbidden. If is forbidden, the router stands still where it is, and if it is valid, it navigates correctly. The authentication service serves as a storage and a validator of certain data regarding username, role, permissions and JWT token.

HttpClient is an envelope of Http that implement the management of headers. The workflow is exact the same as the standard Http but as the project needed to incorporate a token to every call to a specific secured services, then, this token needed to be added and removed depending on call to the server, also, it has been extended to handle the error in case the token has expired or corrupted.

image::images/oasp4js/2.Example_app/authorization_header.JPG[, link="images/oasp4js/2.Example_app/authorization_header.JPG"]

When all of this correctly setup, we can do a log-in to the waiter cockpit, and if entered the correct credentials, the logged state will set to true, the login to the server will be correct returning the token and the header with this token will be setted giving as a result the correct navigation to the waiter cockpit:

image::images/oasp4js/2.Example_app/waiter_cockpit.JPG[, link="images/oasp4js/2.Example_app/waiter_cockpit.JPG"]

==== Modules
Through modules you can encapsulate whole functionalities or part of the application. All Angular apps have, at least, one module: _app.module_. But Angular encourages the use of more modules to organize all the components and services. In MyThaiStar every component and service is inside a module, making the _app.module_ composed only by other smaller modules.