:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Working with Git and Github

=== What is a version control system

A version control system (VCS) allows you to track the history of a collection of files. It supports creating different versions of this collection. Each version captures a snapshot of the files at a certain point in time and the VCS allows you to switch between these versions. These versions are stored in a specific place, typically called a repository.

=== What are Git and Github

Git is currently the most popular implementation of a distributed version control system.

Git originates from the Linux kernel development and was founded in 2005 by Linus Torvalds. Nowadays, it is used by many popular open source projects, e.g., the Android or the Eclipse development teams, as well as many commercial organizations.

The core of Git was originally written in the programming language C, but Git has also been re-implemented in other languages, e.g., Java, Ruby and Python.

You can use it on Windows by installing, among others, https://git-for-windows.github.io/[Git for Windows].

GitHub is a web-based Git repository hosting service. It offers all of the distributed revision control and source code management (SCM) functionality of the Git as well as adding its own features.

Both, the Open Source as well as the IP parts of Devon are hosted on Github. The workflow is based on the default workflow as being supported by GitHub.

=== Devon and OASP4J Workflow for Git

When you work with Git on a https://github.com/devonfw/devon[Devon] / https://github.com/oasp/oasp4j[OASP4J] project, you need to take into account that you are always working with a local copy of the remote repository.

The image below can help you to have a clear view about the way to work with Git, on the https://github.com/devonfw/devon[Devon] / https://github.com/oasp/oasp4j[OASP4J] project.

image::images/working-with-git/devon-guide-working-with-git-diagram.PNG[,width="450", link="images/working-with-git/devon-guide-working-with-git-diagram.PNG"]

==== Step 1 Create a new Fork

To avoid problems with OASP/Devon repositories, you need to create your own copy (a "fork") of the repository.

To create the repository, go to the GitHub repository of https://github.com/devonfw/devon[Devon] / https://github.com/oasp/oasp4j[OASP4J] and click on the option 'Fork'.

image::images/working-with-git/devon-guide-working-with-git-fork.PNG[,width="450",link="images/working-with-git/devon-guide-working-with-git-fork.PNG"]

A fork is a copy of a repository. Forking a repository, allows you to freely experiment with changes without affecting the original project.

Most commonly, forks are used, either to propose changes to someone else's project or to use someone else's project as a starting point for your own ideas.

==== Step 2 Clone the repository

Now, copy the forked repo (created in the last step) on your local machine. This process is called "making a clone". To do so, you need to open a console (for example: GitBash) and then execute the next commands, in the directory where you want to create the local copy of the remote repository.

Devon
[source,console]
----
git clone https://github.com/<your_git_user>/devon
----

OASP4J
[source,console]
----
git clone https://github.com/<your_git_user>/oasp4j
----

Now, you have a local copy of the repository.

==== Step 3 Define the repository URL

To avoid problems with the Git URLs repositories, you can redefine the label used by git as a shortcut for the repositoryÂ´s URL. The standard label "origin" will be replaced by your GitHub username.

To do so, you need to open the console and go to the local repository and then execute the next commands:


[source,console]
----
git remote add devon https://github.com/devonfw/devon
----

Or

[source,console]
----
git remote add oasp https://github.com/oasp/oasp4j
----

Now, you can see the remote repositories on the command prompt.

[source,console]
----
git remote -v
----

If you are defining Devon URL, you will see something like this:

[source]
----
$ git remote -v
devon   https://github.com/devonfw/devon (fetch)
devon   https://github.com/devonfw/devon (push)
origin  https://github.com/<your_git_user>/devon (fetch)
origin  https://github.com/<your_git_user>/devon (push)
----

If you are adding OASP4j:

[source]
----
$ git remote -v
oasp    https://github.com/oasp/oasp4j (fetch)
oasp    https://github.com/oasp/oasp4j (push)
origin  https://github.com/<your_git_user>/devon (fetch)
origin  https://github.com/<your_git_user>/devon (push)
----

Now, rename the origin remote repository the with following command:

[source]
----
git remote rename origin <your_git_user>
----

==== Step 4 Working with Topic Branches

The previous steps were an introduction about how you can get the remote repositories on your local machine. Now, you need to work with this repository. To do so, you need to create a new topic branch.

Topic branches are typically lightweight branches that you create locally and that has a name which is meaningful for you. These topic branches are the one's where you might work, to fix a bug or a feature (they're also called feature branches) that is expected to take some time to complete.

Another type of branch is the "remote branch" or "remote-tracking branch". This type of branch follows the development of someone else's work and is stored in your own repository. You periodically update this branch (using git fetch) to track what is happening there. When you are ready to catch up with everybody else's changes, you would use git pull to both fetch and merge.

To create a new topic branch, you need to use the next command:

[source,console]
----
git branch <new_branch_name>
----

To see the actual branch, you can use the next command:

[source,console]
----
git branch
----

To view all the branches, you can use the following command. Also, you can use this command to view the actual branch as it's with an asterisk mark.

[source,console]
----
git branch -a
----

To move to another branch, you need to use:

[source,console]
----
git checkout <name_of_existing_branch>
----

==== Step 5 Commit the changes

When you are working in a branch and you want to change the branch or you just want to save your change in your local repository, you need to commit the changes.

To commit your changes, you need to use the following command:

[source,console]
----
git commit -m "Commit message"
----

After executing the above command, git stores the current contents of the index in a new commit along with a log message from the user describing the changes.

In several cases, you will see a message like this:

[source]
----
$ git commit -m "Commit message"
On branch new_branch
Changes not staged for commit:
        deleted:    README.md
        modified:   pom.xml

Untracked files:
        New Text Document.txt

no changes added to commit
----

Thus, git shows the changes in the branch and you need to add the file "New Text Document.txt". There are several ways to add a new file in git.

You can add file using the following command:

[source,console]
----
git add <file_name>
----

[NOTE]
====
You need to be careful, if you have any space in the name of the file. You need to add the name as shown below:
[source,console]
----
git add File\ With\ Spaces.txt
----
====

Another way to add the files is shown below:

[source,console]
----
git add .
----

This command will add all the untracked files in the local repository, this is a little bit dangerous because in some cases, you don't want to add some files, such as Eclipse configuration files.

In this case, you need a way to exclude or ignore some files. Git has a file called .gitignore, where you can put the files to ignore. The competent of the file looks as shown below:

[source]
----
*.class
*.classpath
*.project
*.iml
.*
target/
jsclient/
eclipse-target/
**/src/generated/
**/tmp/

# Package Files #
*.jar
*.war
*.ear

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
----

Thus, there are many extensions and folders that Git will ignore, if you use the command "git add .".

[NOTE]
====
Windows doesn't permit us to create a file with the name ".gitignore, so to create a new .gitignore file, you can use the following command:

[source,console]
----
echo "" > .gitignore
git add .gitignore
----

Then, you can open the file with a text editor and include the filenames which you want to ignore.
====

Another way to commit without any problems is to commit and add the files at the same time, you can do this with the command:

[source,console]
----
git commit -am "Commit message"
----

You need to keep in count the .gitignore file in this case too.

==== Step 6 Push to the remote repository

When you want to include your changes in the repository, include it in your remote repository. To do so, you need to push your local topic branch in remote branch.

[source,console]
----
git push <remote_repository> <topic_branch_origin>:<topic_branch_destiny>
----

As shown, the <remote_repository> can be the URL of the GitHub repository or the name that you defined in the step 3.

==== Step 7 Pull request

At this point, you have the modifications in your remote repository, so you can make a pull request to the remote https://github.com/devonfw/devon[Devon] / https://github.com/oasp/oasp4j[OASP4J] repository. To do so, you need to go to your fork repository of https://github.com/devonfw/devon[Devon] / https://github.com/oasp/oasp4j[OASP4J], open the branch you want to pull and then press the button "New pull request".

image::images/working-with-git/devon-guide-working-with-git-new-pull-request.PNG[,width="450",link="images/working-with-git/devon-guide-working-with-git-new-pull-request.PNG"]

First of all, GitHub will check if the branch is correct and is available to do the pull request. If everything is correct, then you will see as shown in the image below:

image::images/working-with-git/devon-guide-working-with-git-available-to-pull.PNG[,width="450",link="images/working-with-git/devon-guide-working-with-git-new-pull-request.PNG"]

As you can see, the branch is available to do the new pull request. Additionally, you can scroll down and look the differences with respect to the original repository.

Check if everything is correct, then you can click "Create pull request" button. Then, you can see a small form with a name of the New pull request and a little description that you need to complete.

image::images/working-with-git/devon-guide-working-with-git-new-pull-request-description.PNG[,width="450",link="images/working-with-git/devon-guide-working-with-git-new-pull-request-description.PNG"]

When you complete the form, you press the button "Create pull request" and then the pull is sent to be checked and added in the remote original repository.

==== Step 8 Synchronize the repository

When your Pull request is included in the original repository, you need to actualize your local and remote repository with the original repository. To do so, first of all, you need to check that you are in the development branch.

[source,console]
----
git checkout develop
----

Now, you need to pull the original https://github.com/devonfw/devon[Devon] / https://github.com/oasp/oasp4j[OASP4J] repository to your local repository. To do this, you can execute the following command:

[source,console]
----
git pull devon/oasp develop:develop
----

As you can see, you can use the defined variables with the url of https://github.com/devonfw/devon[Devon] / https://github.com/oasp/oasp4j[OASP4J] (Step 3) or just the URL of the repository.

When you have the local repository synchronized, you need to push the local development branch to your remote development branch

[source,console]
----
git push <your_git_user> develop:develop
----

As it is commented above, <your_git_user> is the variable defined with the URL of your remote repository (the fork of https://github.com/devonfw/devon[Devon] / https://github.com/oasp/oasp4j[OASP4J]) (Step 3).

=== OASP Issue Work

==== Issue creation and resolution

===== Issue creation
You can create an issue [here](https://github.com/oasp/oasp4j/issues/new). Please consider the following points:

[square]
* If your issue is related to a specific building block (like e.g. oasp4js), open an issue on that specific issue tracker. If you're unsure which building block is causing your problem, open an issue on this repository.
* Put a label on the issue to mark, whether you suggest an enhancement, report an error or something else.

When reporting the errors:

[square]
* Include the version of OASP4j you are using.
* Include screenshots, stack traces.
* Include the behavior you expected.
* Using a debugger, you might be able to find the cause of the problem and you could be the one to contribute a bug-fix.

===== Preparation for issue resolution
Before you start working on an issue, check out the following points:

[square]
* Try to complete all the other issues, you are working on before. Only postpone issues where you are stuck and consider giving them back in the queue (backlog).
* Check that, no-one else is already assigned or working on the issue.
* Read through the issue and check that you understand the task completely. Collect any remaining questions and clarify them with the one responsible for the topic.
* Ensure that, you are aware of the branch on which the issue shall be fixed and start your work in the corresponding workspace.
* If you are using +git+, perform your changes on a feature branch.

===== Definition of Done

[square]
* The actual issue is implemented (bug fixed, new feature implemented, etc.).
* The new situation is covered by tests (according to test strategy of the project e.g. for bugs, create a unit test first proving the bug and running red, then fix the bug and check that the test gets green, for new essential features create new tests, for GUI features do manual testing).
* Check the code-style with sonar-Qube in Eclipse. If there are any anomalies in the new or modified code, please rework.
* Check out the latest code from the branch you are working on (+svn update+, +git pull+ after +git commit+).
* Make sure that, all the builds and tests are working correctly (+mvn clean install+).
* Commit your code (+svn commit+, +git push+) - for all your commits, ensure that you should stick to the conventions for code contributions (see <<Code Contributions,[code contribution>>) and provide proper comments (see <<Code conventions,coding conventions>>).
* If no milestone was assigned, please assign suitable milestone.
* Set the issue as done.

=== Code Contribution

We are looking forward to your contribution to OASP4J. This page describes the few conventions to follow. Please note that this is an open and international project and all content has to be in (American) English language.

For contributions to the code, please consider:

* All works on the issue-based follow-up, so check if there is already an issue in the tracker for the task you want to work on or create a new issue for it.
* In case of more complex issues, please get involved with the community and ensure that there is a common understanding of what and how to do it. It is better, not to invest into something that will later be rejected by the community.
* Before you get started, ensure that you comment the issue accordingly and you are the person assigned to the issue. If there is already someone else assigned, get in contact with him, if you still want to contribute to the same issue. It is better, not to invest into something that is already done by someone else.
* Create a https://help.github.com/articles/fork-a-repo/[fork] of the repository on github to your private github space.
* Checkout this fork and do modifications.
* Ensure that, you stick to the <<Code conventions,Code conventions>>.
* Check in features or fixes as individual commits associated with an link:../issues[issue] using the commit message format:
+
[source]
#<issueId>: <describe your change>
+
Then, GitHub will automatically link the commit to the issue. In case, you worked on an issue from a different repository (e.g. change in +oasp4j-sample+ due to issue in +oasp4j+), use this commit message format:
[source]
oasp/<repository>#<issueId>: <describe your change>
+
As an example:
[source]
oasp/oasp4j#1: added REST service for tablemanagement
* If you completed your feature (bugfix, improvement, etc.), use a https://help.github.com/articles/using-pull-requests/[pull request] to give it back to the community.
* Also, see the link:https://oasp.github.io/assets/PDF/OASP4J.pdf[documentation] guidelines.