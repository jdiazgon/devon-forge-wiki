:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Extending the CRUD: Adding an inbox to search tables

As we can see in our sample application, in our home page we have a menu in the left side of the screen.  The panel is blank now but we are going to add some items in order to create a sort of inbox to search tables depending on their state (Free, Reserved or Occupied).   We have to edit the file `LeftSideMenu.js` in `app/view/main/`.   The content of this file should be:

[source,javascript]
----
Ext.define('demo.view.main.LeftSidePanel', {
    extend: 'Ext.Panel',

    alias: 'widget.main-leftsidepanel',

    requires: [
    ],

    cls:'main-leftsidepanel',
    width: 220,
    bodyPadding:0,
    resizable: {
        handles: 'e',
        pinned: true
    },

    layout: {
        type:'vbox',
    	align:'stretch'
    },

    items: [{
        xtype: 'main-res-status',
        height:220
    }]
}); 
----

We only have added the item with the xtype `main-res-status`.  This is a reference to a view that we are going to define now.

Create `RestaurantStatus.js` in `app/view/main/`:

[source,javascript]
----
Ext.define('demo.view.main.RestaurantStatus', {
    extend: 'Ext.tree.Panel',
    alias: 'widget.main-res-status',
    requires:['demo.view.main.RestaurantStatusVC'],
    title: i18n.restaurantStatus.title,
    collapsible:true,
    controller: 'main-res-status',
    rootVisible: false,
    root: {
    	expanded: true,
    	id:'root',
        children: [{
            text: i18n.restaurantStatus.tables,
            id:'tables',
            expanded: true,
            children: [{
                text: i18n.restaurantStatus.free,
                id:'tables-free',
                iconCls:'treenode-no-icon',
                leaf: true
            },{
            	text: i18n.restaurantStatus.reserved,
            	id:'tables-reserved',
            	iconCls:'treenode-no-icon',
                leaf: true
            },{
            	text: i18n.restaurantStatus.occupied,
            	id:'tables-occupied',
            	iconCls:'treenode-no-icon',
                leaf: true
            }]
        }]
    }
});
----

In this view we are creating a treePanel to show all the states that a table can have and show the quantity of tables in each state.   Then, when we click one state we want to be able to see the grid of the tables filtered by that state.   For that purpose we need to create the ViewController for this view. 

Create the file 'RestautantStatusVC.js' in 'app/view/main/':

[source,javascript]
----
Ext.define('demo.view.main.RestaurantStatusVC', {
    extend: 'Ext.app.ViewController',

    alias: 'controller.main-res-status',

    listen: {
        global: {
            eventTablesChanged: 'onTablesChanged'
        }
    },

    control: {
        '#': {
            afterrender: 'onAfterRender'
        }
    },

    onTablesChanged: function(){
        this.refreshTree();
    },

    onAfterRender: function() {
        this.refreshTree();
    },

    refreshTree: function(){
        var store=this.getView().getStore();
        Devon.rest.tablemanagement.search.post({
            jsonData:{},
            success:function(data){
                var res=data.result, free=0, occupied=0, reserved=0;
                Ext.Array.each(res,function(item){
                    if(item.state==demo.model.table.TableM.state.FREE) free++;
                    if(item.state==demo.model.table.TableM.state.OCCUPIED) occupied++;
                    if(item.state==demo.model.table.TableM.state.RESERVED) reserved++;
                });
                store.getNodeById('tables-free').set('text',i18n.restaurantStatus.free+' ('+free+')');
                store.getNodeById('tables-reserved').set('text',i18n.restaurantStatus.reserved+' ('+reserved+')');
                store.getNodeById('tables-occupied').set('text',i18n.restaurantStatus.occupied+' ('+occupied+')');
            }
        });
    }
});
----

Then, the next step is to edit the file `Main_en_EN.js` to update the messages for this next functionality:

[source,javascript]
----
    restaurantStatus:{
        title:'Restaurant',
        tables: 'Tables',
        positions: 'Positions',
        free : 'Free',
        occupied : 'Occupied',
        reserved : 'Reserved',
        assigned : 'Assigned',
        total : 'Total'
    }
----

As we have created a new view in our application, we have to add the reference of this view in the ‘requires’ property of the `MainController.js`.  

So, we edit the `MainController` to add the reference to the `RestaurantStatus` view:

[source,javascript]
----
    requires: [
        'demo.view.main.i18n.Main_en_EN',
        'demo.view.main.LeftSidePanel',
        'demo.view.main.Content',
        'demo.view.main.Home',
        'demo.view.NewPage',
        'demo.view.main.RestaurantStatus'
    ]
----

The next step is to edit the file `TableM.js` to add some static text about the state of a table.  We should use an independent file for this purpose in order to have all of the constants of the application in the same file.  However, in our sample we are going to use the model to keep these constants:

[source,javascript]
----
Ext.define('demo.model.table.TableM', {
    extend: 'Ext.data.Model',
    
    statics: {
        state: {
            OCCUPIED: 'OCCUPIED',
            FREE: 'FREE',
            RESERVED: 'RESERVED'           
        }
    },
    
    fields: [
        { name: 'id', type: 'int' },
        { name: 'number', type: 'int', allowNull: true },
        { name: 'state', type: 'auto' },
        { name: 'modificationCounter', type: 'int', allowNull: true}
    ]
});
----

These constants are used in `RestaurantStatusVC.js` to compare the state of a table and the text of this state that we have as a constant in the model.

Navigate to our application in the browser. We will see a tree named `Tables` and three possible states: Free, Reserved or Occupied.   Besides, we can see the number of tables in each state.

image::images/client-gui-sencha/leftPanel.PNG[Left Panel,width="300", link="images/client-gui-sencha/leftPanel.PNG"]

Now, we want to add some functionality to be able to show the table view with the grid filtered by the state selected.   For achieve that, we can to edit the file `RestaurantStatus.js` adding the listener to fire the event when a node of the tree is selected:

[source,javascript]
----
    listeners: {
        select: 'onSelect'
    }
----

As we have added the event we have to edit the file `RestaurantStatusVC.js` to capture that event:

[source,javascript]
----
    onSelect : function(tree, record){
    	if(record.isLeaf()){
    	    var nodeId=record.getId();
    	    if(Ext.String.startsWith(nodeId,'table')){
    	        var state=nodeId.split('-')[1];
    	        var title=i18n.tables.title+' '+i18n.restaurantStatus[state];
    	        state=demo.model.table.TableM.state[state.toUpperCase()];
    	        Ext.GlobalEvents.fireEvent('eventOpenTableList',{title:title,stateFilter:state});
    	    }
    	}
    }
----

We have added the function `onSelect` to open the tab panel with the management of the tables but depending on the filter selected.   In this function we fire the event `eventOpenTableList` which is captured by the controller `TableController.js`.  

Then, we have to edit the controller to give the view the options we have just sent.  These options are the title of the view and the filter of the state.   Edit the function `onMenuOpenTables`:

[source,javascript]
----
    onMenuOpenTables: function(options) {
        var tables = new demo.view.table.TableListV(options);
        Devon.App.openInContentPanel(tables);
    },
----

Now, we are providing these configuration options to the view.   
The next step is to use these options when the view is rendered.   In order to do that we have to define the event in the controller of the view, `TableListVC.js`:

[source,javascript]
----
    listen: {
        global: {
            eventTablesChanged: 'onTablesChanged'
        },
        component: {
            'tables': {
                'afterrender':'onAfterRender'
            }
        }
    },

    onAfterRender: function(panel){
        var stateFilter=this.getView().stateFilter;
        if(stateFilter) this.getViewModel().set('stateFilter',{state:stateFilter});
        else this.getViewModel().set('stateFilter',{state:null});
    },
----

As we can see, we are using the ViewModel to set the state filter.   Then, we have to add to our request the filter to get the data and load the store.  

Edit the file `TableListVM.js` to add the state param:

[source,javascript]
----
    tables: {
        model: 'demo.model.table.TableM',
        pageSize: 3,
        proxy: {
            type: 'tablemanagement.search',
            extraParams:'{stateFilter}'
        },
        autoLoad: true,
        remoteSort:true,
        remoteFilter:true,
        sorters: {property:'number', direction:'ASC'}
    },
----

Besides adding the `extraParams` property to the proxy request, we have configured other properties:

* **remoteSort**: When we are sorting the information of the columns of the grid, we only sort the information for the page we are in that moment.  In order to sort the grid by the column selected independently from the page, we have to change this property to true.   With this, when the request to the backend is done it will sort the information there, not in the view according to the page.
* **remoteFilter**: Indicates if the filters are going to be done on the server or on the client.  We need this property to filter the whole store, not only the data that is showed in the current page.
* 	**sorters**: Show the information sorted by defect with the column and direction indicated.

Check the output and use the tree panel to filter tables

image::images/client-gui-sencha/treePanelFilter.PNG[Tree panel Filter,width="450", link="images/client-gui-sencha/treePanelFilter.PNG"]

