:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== CORS support

When you are developing the Javascript client separately from the server application, you usually have to deal with cross domain issues. Ajax requests for data are made to a target domain distinct to the original domain where the application code was loaded, and the browser does not allow this.

In the Devon4Sencha there is a solution to resolve this issues:

* Enable request from distinct origin and target domain.

* Security cookies. In the request we need to send the flag `withCredentials` to `true` to say to the browser "We also want send the security cookie in our request". In IE there are some issues about this property that Sencha helps us to manage.

=== Configure CORS support

In the `Config.js` file, you have to define a `CORSEnabled` propertie to a `true` value and add the full path to the server in the `server` property. These are the only things you need to configure to have CORS support. For example:

[source,javascript]
----

var Config={
    //...
    CORSEnabled: true
    //...
};

----

=== Bypass CORS security check during development

Sometimes our back-end server is not CORS enabled so we have to deal with it in an alternative way. There are several ways to do it:

* Using a reverse proxy in front of both the client side server and the server side
** The proxy will fetch the correct files from each server
** This can be implemented easily with some node.js modules such as indexzero http-server (https://github.com/indexzero/http-server)

* Using a browser extension to bypass the CORS policy
** It is usually easier than the proxy approach although less flexible in what can be accomplished
** There are several tools available for different browsers 

==== Using a browser extension to bypass the CORS policy

Here we present an example for Google Chrome browser called *ForceCORS*.

In our example we will use two files:
* index.html being served from localhost:9999
* users.json being served from localhost:8000

The index.html has a Javascript that makes an AJAX request to fetch the users.json file on the other server.

The problem arises because we are trying two things on the requests:

* Accessing a different server through AJAX than the server which served the client code 
** HTML/Javascript files on localhost:9999
** Backend application in localhost:80000
* Making use of the "with-credentials" setting in the AJAX requests
** This is important. It means that we want to access localhost:8000 from localhost:9999 AND ALSO send cookies for the localhost:8000 server.
** If we don't use "with-credentials" then after the login... the next request to localhost:8000 will be sent without cookies... and it will fail on server-side because it has no access!
** The with-credentials flag is being set on the devon4sencha Ajax.js when Config.CORSEnabled==true

This will result on the page loading and the browser showing the following error on the DevTools console:

image::images/devon4sencha/cors/devon_guide_CORS_example_error.png[Disable Buttons,width="450",link="images/devon4sencha/cors/devon_guide_CORS_example_error.png"]


To solve it:

1. Install it from the Google WebStore

image::images/devon4sencha/cors/devon_guide_CORS_example_ForceCORS.png[Disable Buttons,width="450",link="images/devon4sencha/cors/devon_guide_CORS_example_ForceCORS.png"]

2. Configure it

image::images/devon4sencha/cors/devon_guide_CORS_example_configuration.png[Disable Buttons,width="450",link="images/devon4sencha/cors/devon_guide_CORS_example_configuration.png"]

This way we "simulate" that the server side is adding the needed CORS headers to the Ajax response.

==== Add more allowed headers

If your client code adds custom headers to the Ajax request (CorrelationId for example in case of an devon4sencha application) then you should add this headers to the *`Access-Control-Allow-Headers`* configuration setting. For example:

[source]
----
Access-Control-Allow-Headers = Origin, X-Requested-With, Content-Type, Accept
----

If we reload the page we should get the data as expected:

image::images/devon4sencha/cors/CORS-example-ok.png[width="450",link="images/devon4sencha/cors/CORS-example-ok.png"] 