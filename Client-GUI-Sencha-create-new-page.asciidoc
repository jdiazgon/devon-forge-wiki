:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Creating a new page

Now we will create a sample page with an associated ViewModel and ViewController which will be shown on the menu of the application. The main objective here is to show you quickly with a simple example all the steps we should follow in order to create a new view and the functionality associated.

Please follow these steps:

=== Step 1: ViewModel

Create a new ViewModel in the file `app/view/NewPageVM.js`:

[source,javascript]
----
Ext.define('demo.view.NewPageVM', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.new-page',
  data: {
    htmlContent: 'My page content'
  }
});
----

We will make use of the `data` of this ViewModel within the view object.

=== Step 2: ViewController

Create a new ViewController in the file `app/view/NewPageVC.js`:

[source,javascript]
----
Ext.define('demo.view.NewPageVC', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.new-page',
  onTestButtonClick: function(){
    alert('Click on test button'
  }
});
----


=== Step 3: View

Create the new view object in the file `app/view/NewPage.js`. Here we request and assign the ViewModel and the ViewController previously created:

[source,javascript]
----
Ext.define('demo.view.NewPage', {
  extend : 'Ext.Panel',
  alias: 'widget.new-page',
  requires: [
    'demo.view.NewPageVM',
    'demo.view.NewPageVC'
  ],
  controller: 'new-page',
  viewModel:'new-page',
  title : 'New page',
  bind:{
    html:'{htmlContent}'
  },
  buttons:[{
    text:'Test button',
    handler: 'onTestButtonClick'
  }]
});
----

Please note how we make use of the `bind` property on the view to access the data of the viewModel.

Also for the button on the page where we reference the `onTestButtonClick` handler defined on the ViewController, there is no need to specify that the handler is for the `click` event because it's the default for the `button` component.

=== Step 4: MenuItem

In order to have the view appear in the menu of the application we should add an item to the view object. 
If the recommended layout for Devon application is used we have to edit the `app/view/Menu.js` file:

[source,javascript]
----
Ext.define('demo.view.main.Menu', {
    extend: 'Ext.Panel',

    alias: 'widget.main-menu',

    requires: [
        'Ext.toolbar.Toolbar',

        //by default use the Devon VC for this menu
        'Devon.view.main.MenuVC'
    ],

    controller: 'main-menu',
    cls:'main-menu',
    buttonAlign:'left',
    buttons: [{
            text: 'page1', //i18n
            eventName: 'eventOpenPage1'
        },{
            text: 'My new page',
            eventName: 'eventOpenMyNewPage'
        }
    ]
});
----

Here, the `eventName` property is not part of Sencha but **Devon4sencha**. It will be used by the `Devon.view.MenuVC` instance (if you use the recommended layout) to fire an event when the menu option is selected. This event will be caught by the following controller.


=== Step 5: Controller

Edit the `app/controller/MainController.js` file to add the `eventOpenMyNewPage` event listener function. This  instantiates and shows the new page by making use of the `Devon.App.openInContentPanel` method. We also have to add the new view dependency:

[source,javascript]
----
Ext.define('demo.controller.main.MainController', {
    extend: 'Ext.app.Controller',

    requires: [
        'demo.view.main.i18n.Main_en_EN',
        'demo.view.main.LeftSidePanel',
        'demo.view.main.Content',
        'demo.view.main.Home',
        'demo.view.NewPage'
    ],
    
    config: {
        listen: {
            global: {
                eventOpenMyNewPage: 'onOpenMyNewPage'
            }
        }
    },
    onOpenMyNewPage:function(){
        var view = Ext.widget("new-page");
        Devon.App.openInContentPanel(view);
    },

    onClickButton: function () {
        Ext.Msg.confirm('Confirm', 'Are you sure?', 'onConfirm', this);
    },

    onConfirm: function (choice) {
        if (choice === 'yes') {
            //
        }
    }
});
----

Navigate to the application in the browser and check the result:

image::images/client-gui-sencha/newPage.PNG[App Structure,width="450", link="images/client-gui-sencha/newPage.PNG"]