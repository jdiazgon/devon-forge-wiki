:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Components

An Ext JS application’s UI is made up of one or many widgets called Components. All Components are subclasses of the Ext.Component class which allows them to participate in automated lifecycle management including instantiation, rendering, sizing and positioning, and destruction. Ext JS provides a wide range of useful Components out of the box, and any Component can easily be extended to create a customized Component.

To know more about Components visit http://docs.sencha.com/extjs/6.5.0/guides/core_concepts/components.html[Sencha] wesite.

=== Creating Custom Components

==== Composition or Extension

When creating a new UI class, the decision must be made whether that class should own an instance of a Component, or to extend that Component.

It is recommended to extend the nearest base class to the functionality required. This is because of the automated lifecycle management Ext JS provides which includes automated rendering when needed, automatic sizing and positioning of Components when managed by an appropriate layout manager, and automated destruction on removal from a Container.

It is easier to write a new class which is a Component and can take its place in the Component hierarchy rather than a new class which has an Ext JS Component, and then has to render and manage it from outside.

==== Subclassing

The Class System makes it easy to extend any part of the Ext JS framework.

Ext.Base is the building block of all Ext JS classes, and the prototype and static members of this class are inherited by all other classes.

While you can certainly begin adding functionality at the lowest possible level via Ext.Base, in many cases developers want to start a bit higher in the inheritance chain.

The following example creates a subclass of Ext.Component:

[source,java]
----
Ext.define('My.custom.Component', {
    extend: 'Ext.Component',

    newMethod : function() {
       //...
    }
});
----

This example creates a new class, My.custom.Component, which inherits all of the functionality (methods, properties, etc.) of Ext.Component in addition to any new methods or properties defined.

Template Methods

Ext JS uses the Template method pattern to delegate to subclasses, behavior which is specific only to that subclass.

This means each class in the inheritance chain may "contribute" an extra piece of logic to certain phases in the Component’s lifecycle. Each class implements its own special behavior while allowing the other classes in the inheritance chain to continue to contribute their own logic.

An example is the render function. render is a method defined in Component. It is responsible for initiating the rendering phase of the Component lifecycle. render must not be overridden, but it calls onRender during processing to allow the subclass implementor to add an onRender method to perform class-specific processing. Every onRender method must call its superclass’ onRender method before "contributing" its extra logic.

The diagram below illustrates the functioning of the onRender template method.

The render method is called (This is done by a Container’s layout manager). This method may not be overridden and is implemented by the Ext base class. It calls this.onRender which is the implementation within the current subclass (if implemented). This calls the superclass version which calls its superclass version etc. Eventually, each class has contributed its functionality, and control returns to the render function.



image::images/devon4sencha/ext-component/devon_guide_sencha_define_ext_component_template_pattern.png[Disable Buttons,width="450",link="images/devon4sencha/ext-component/devon_guide_sencha_define_ext_component_template_pattern.png"]

Here is an example of a Component subclass that implements the onRender method:

[source,java]
----
Ext.define('My.custom.Component', {
    extend: 'Ext.Component',
    onRender: function() {
        this.callParent(arguments); // call the superclass onRender method

        // perform additional rendering tasks here.
    }
});
----

It is important to note that many of the template methods also have a corresponding event. For example the render event is fired after the Component is rendered. When subclassing, however, it is it is essential to use template methods to perform class logic at important phases in the lifecycle and not events. Events may be programmatically suspended, or may be stopped by a handler.

Below are the template methods that can be implemented by subclasses of Component:

- initComponent This method is invoked by the constructor. It is used to initialize data, set up configurations, and attach event handlers.
- beforeShow This method is invoked before the Component is shown.
- onShow Allows addition of behavior to the show operation. After calling the superclass’s onShow, the Component will be visible.
- afterShow This method is invoked after the Component is shown.
- onShowComplete This method is invoked after the afterShow method is complete
- onHide Allows addition of behavior to the hide operation. After calling the superclass’s onHide, the Component will be hidden.
- afterHide This method is invoked after the Component has been hidden
- onRender Allows addition of behavior to the rendering phase.
- afterRender Allows addition of behavior after rendering is complete. At this stage the Component’s Element will have been styled according to the configuration, will have had any configured CSS class names added, and will be in the configured visibility and the configured enable state.
- onEnable Allows addition of behavior to the enable operation. After calling the superclass’s onEnable, the Component will be enabled.
- onDisable Allows addition of behavior to the disable operation. After calling the superclass’s onDisable, the Component will be disabled.
- onAdded Allows addition of behavior when a Component is added to a Container. At this stage, the Component is in the parent Container’s collection of child items. After calling the superclass’s onAdded, the ownerCt reference will be present, and if configured with a ref, the refOwner will be set.
- onRemoved Allows addition of behavior when a Component is removed from its parent Container. At this stage, the Component has been removed from its parent Container’s collection of child items, but has not been destroyed (It will be destroyed if the parent Container’s autoDestroy is true, or if the remove call was passed a truthy second parameter). After calling the superclass’s onRemoved, the ownerCt and the refOwner will not be present.
- onResize Allows addition of behavior to the resize operation.
- onPosition Allows addition of behavior to the position operation.
- onDestroy Allows addition of behavior to the destroy operation. After calling the superclass’s onDestroy, the Component will be destroyed.
- beforeDestroy This method is invoked before the Component is destroyed.
- afterSetPosition This method is invoked after the Components position has been set.
- afterComponentLayout This method is invoked after the Component is laid out.
- beforeComponentLayout This method is invoked before the Component is laid out.

==== Which Class To Extend

Choosing the best class to extend is mainly a matter of efficiency, and which capabilities the base class must provide. There has been a tendency to always extend Ext.panel.Panel whenever any set of UI Components needs to be rendered and managed.

The Panel class has many capabilities:

- Border
- Header
- Header tools
- Footer
- Footer buttons
- Top toolbar
- Bottom toolbar
- Containing and managing child Components

If these are not needed, then using a Panel is a waste of resources.

==== Component

If the required UI Component does not need to contain any other Components, that is, if it just to encapsulate some form of HTML which performs the requirements, then extending Ext.Component is appropriate. For example, the following class is a Component that wraps an HTML image element, and allows setting and getting of the image’s src attribute. It also fires a load event when the image is loaded:

[source,java]
----
Ext.define('Ext.ux.Image', {
    extend: 'Ext.Component', // subclass Ext.Component
    alias: 'widget.managedimage', // this component will have an xtype of 'managedimage'

    autoEl: {
        tag: 'img',
        src: Ext.BLANK_IMAGE_URL,
        cls: 'my-managed-image'
    },

    // Add custom processing to the onRender phase.
    // Add a 'load' listener to the element.
    onRender: function() {
        this.autoEl = Ext.apply({}, this.initialConfig, this.autoEl);
        this.callParent(arguments);
        this.el.on('load', this.onLoad, this);
    },

    onLoad: function() {
        this.fireEvent('load', this);
    },

    setSrc: function(src) {
        if (this.rendered) {
            this.el.dom.src = src;
        } else {
            this.src = src;
        }
    },

    getSrc: function(src) {
        return this.el.dom.src || this.src;
    }
});
----

Usage:
[source,java]
----
var image = Ext.create('Ext.ux.Image');

Ext.create('Ext.panel.Panel', {
    title: 'Image Panel',
    height: 200,
    renderTo: Ext.getBody(),
    items: [ image ]
});

image.on('load', function() {
    console.log('image loaded: ', image.getSrc());
});

image.setSrc('http://www.sencha.com/img/sencha-large.png');
----

This example is for demonstration purposes only - the Ext.Img class should be used for managing images in a real world application.

==== Container

If the required UI Component is to contain other Components, but does not need any of the previously mentioned additional capabilities of a Panel, then Ext.container.Container is the appropriate class to extend. At the Container level, it is important to remember which Ext.layout.container.Container is to be used to render and manage child Components.

Containers have the following additional template methods:

- onBeforeAdd This method is invoked before adding a new child Component. It is passed the new Component, and may be used -to modify the Component, or prepare the Container in some way. Returning false aborts the add operation.
- onAdd This method is invoked after a new Component has been added. It is passed the Component which has been added. This method may be used to update any internal structure which may depend upon the state of the child items.
- onRemove This method is invoked after a new Component has been removed. It is passed the Component which has been removed. This method may be used to update any internal structure which may depend upon the state of the child items.
- beforeLayout This method is invoked before the Container has laid out (and rendered if necessary) its child Components.
- afterLayout This method is invoked after the Container has laid out (and rendered if necessary) its child Components.

==== Panel

If the required UI Component must have a header, footer, or toolbars, then Ext.panel.Panel is the appropriate class to extend.

Important: A Panel is a Container. It is important to remember which Layout is to be used to render and manage child Components.

Classes which extend Ext.panel.Panel are usually highly application-specific and are generally used to aggregate other UI Components (Usually Containers, or form Fields) in a configured layout, and provide means to operate on the contained Components by means of controls in the tbar and the bbar.

Panels have the following additional template methods:

- afterCollapse This method is invoked after the Panel is Collapsed.
- afterExpand This method is invoked after the Panel is expanded
- onDockedAdd This method is invoked after a docked item is added to the Panel
- onDockedRemove This method is invoked after a docked item is removed from the Panel