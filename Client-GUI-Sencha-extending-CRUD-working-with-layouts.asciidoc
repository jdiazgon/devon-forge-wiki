:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Extending the CRUD: Working with layouts

We are going to do a simple exercise to practice with **layouts**.  Previosly we have created a new view to order some products from a menu.   We have two grids but they are showed one below the other.   We are going to change the way they are displayed on the screen.

Therefore, our goal here is to show the grids as you can see below:

image::images/client-gui-sencha/layout.PNG[Layout,width="450", link="images/client-gui-sencha/layout.PNG"]

In order to get that output, we should make some changes in our code.

* Edit the **view** `TableOrderV.js` adding the layout 'vbox'

[source,javascript]
----
    layout: {
        type: 'vbox',
        align: 'stretch'
    },
----

and creating a new panel to englobe the two grids with the layout 'hbox' so they are going to be aligned horizontally:

[source,javascript]
----
{
    xtype: 'panel',
    layout: {
        type: 'hbox',
        align: 'stretch'
    },
    flex: 1,
    padding: 10,
    border: false,
    items: [
        this.gridMenu(),
        this.gridOrder()
    ]
}
----

This is the complete code for the view with the changes mentioned above:

[source,javascript]
----
Ext.define("demo.view.table.TableOrderV", {
    extend: "Ext.panel.Panel",
    alias: 'widget.tableorder',

    requires: [
        'demo.view.table.TableOrderVM',
        'demo.view.table.TableOrderVC'
    ],

    controller: "table-order-controller",

    viewModel: {
        type: "table-order-model"
    },
    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    
    closable: true,
    
    initComponent: function() {
        Ext.apply(this, {
        items : [
            this.header(),
            {
                xtype: 'panel',
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                },
                flex: 1,
                padding: 10,
                border: false,
                items: [
                    this.gridMenu(),
                    this.gridOrder()
                ]
            }
        ]
        });
        this.callParent(arguments);
    },
    
    header: function(){
        return {
            padding: 10,
            bind: {
                html: i18n.tableOrder.html + '{tableId}'
            },
            border: false
        }
    },
    
    gridMenu: function(){
        return {
            xtype: 'grid',
            title: 'Menu',
            flex: 1,
            margin: '0 10 0 0',
            reference: 'menugrid',
            allowDeselect: true,
            columns: [{
                text: i18n.tableOrder.grid.number,
                dataIndex: 'id'
            }, {
                text: i18n.tableOrder.grid.title,
                dataIndex: 'description',
                flex: 1
            }, {
                text: i18n.tableOrder.grid.price,
                dataIndex: 'price'
            }],
            bind: {
                store: '{menu}',
                selection: '{selectedMenuItem}'
            },
            viewConfig: {
                plugins: {
                    ptype: 'gridviewdragdrop',
                    dragGroup: 'firstGridDDGroup',
                    dropGroup: 'secondGridDDGroup',
                    enableDrop: false
                }
            },
            tbar: {
                items: [{
                    text: i18n.tables.buttons.add,
                    handler: 'onAddMenuClick'
                }, {
                    text: i18n.tables.buttons.edit,
                    bind: {
                        disabled: '{!selectedMenuItem}'
                    },
                    handler: 'onEditMenuClick'
                }, {
                    text: i18n.tables.buttons.del,
                    bind: {
                        disabled: '{!selectedMenuItem}'
                    },
                    handler: 'onDeleteMenuClick'
                }]
            },
            bbar: {
                items: [{
                        text: i18n.tableOrder.add,
                        bind: {
                            disabled: '{!selectedMenuItem}'
                        },
                        handler: 'addOrder'
                    }
                ]
            },
            listeners: {
                beforeitemdblclick: 'onEditMenuDblclick'
            }
        }
    },
    
    gridOrder: function(){
        return {
            xtype: 'grid',
            title: 'Orders',
            flex: 1,
            margin: '0 0 0 10',
            reference: 'ordergrid',
            allowDeselect: true,
            columns: [{
                dataIndex: 'id',
                hidden: true
            }, {
                text: i18n.tableOrder.grid.title,
                dataIndex: 'description',
                flex: 1
            }, {
                text: i18n.tableOrder.grid.price,
                dataIndex: 'price'
            }],
            bind: {
                store: '{order}',
                selection: '{selectedOrderItem}'
            },
            viewConfig: {
                plugins: {
                    ptype: 'gridviewdragdrop',
                    dragGroup: 'secondGridDDGroup',
                    dropGroup: 'firstGridDDGroup',
                    enableDrag: false
                },
                listeners: {
                    drop: 'restoreMenu'
                }
            },
            bbar: {
                items: [{
                        text: i18n.tableOrder.remove,
                        bind: {
                            disabled: '{!selectedOrderItem}'
                        },
                        handler: 'orderRemove'
                    },
                    '->', {
                        text: i18n.tableOrder.submit,
                        handler: 'tableOrderSubmit'
                    }, {
                        text: i18n.tableOrder.cancel,
                        handler: 'tableOrderCancel'
                    }
                ]
            }
        }
    }
});
----

For more information about the configuration property `flex` check Sencha documentation:

image::images/client-gui-sencha/flex.PNG[Flex,width="450", link="images/client-gui-sencha/flex.PNG"]