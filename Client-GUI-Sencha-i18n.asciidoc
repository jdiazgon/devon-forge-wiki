:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Internationalization
Internationalization in Devon applications is performed independently on the client and the server side. On the client side, literal JavaScript objects are used to define the messages similar to the properties files used on the server side.

As messages are used during the definition of Sencha classes for the application, these have to be loaded prior to their usage. Devon4Sencha takes care of this by following the next steps.

=== Configuration
Firstly, you need to configure the default language used for the application when loading and the group of possible languages the application can make use of.

`Config` object is used to set the following properties:

.Config.js
[source,javascript]
----
supportedLocales = ['en_EN','de_DE','es_ES'];
defaultLocale = 'en_EN';
----
* *`supportedLocales`* (Array[String]): List of application supported locales in ISO format (language_country_variant).
* *`defaultLocale`* (String): Default application locale.

=== Message bundles
Message bundles are group of key/value pairs that defines the literals for a language in a hierarchical way by using the JavaScript object literal format. In Devon Framework, a language bundle is a singleton class that inherits from *`Devon.I18nBundle`* class. The class name, has to end with the corresponding locale code:
[source,javascript]
----
/*en_EN bundle for Table*/
Ext.define('Sample.view.table.i18n.Table_en_EN',{
  extend:'Devon.I18nBundle',
  singleton:true,
  i18n:{
    tables: {
      title: 'Tables',
      html:'List of tables for the restaurant demo'
    },
    only_en_EN:'Only in english'
  }
});

/*es_ES bundle for Table*/
Ext.define('Sample.view.table.i18n.Table_es_ES',{
  extend:'Devon.I18nBundle',
  singleton:true,
  i18n:{
    tables: {
      title: 'Mesas',
      html:'Lista de mesas del restaurante de demostraci√≥n'
    }
  }
});
----
Note that, all the language key/values are inside an *`i18n`* property object, that can be used in another Sencha class by referencing a global `i18n` variable as follows:
[source,javascript]
----
Ext.define("Sample.view.table.TableList", {
  extend: "Ext.panel.Panel",
  title: i18n.tables.title,
  html: i18n.tables.html
});
----

Therefore, a view needs all the referenced bundles to get loaded before loading itself. As a recommendation, these bundles can be loaded in a main controller by requiring the message bundle object prior to the view object:
[source,javascript]
----
Ext.define('Sample.controller.table.TablesController', {
  extend: 'Ext.app.Controller',
  requires:[
    'Sample.view.table.i18n.Table_en_EN',
    'Sample.view.table.i18n.Table_es_ES',
    'Sample.view.table.TableList'
  ]
});
----
A language tag has to be defined at least for the default locale bundle. As shown in the sample, the tag `i18n.only_en_EN` is only defined in the bundle `en_EN`, so when the language is set to the other possible language `es_ES`, this tag has the value _"Only in english"_.

=== Change language
The current locale for the application can be changed with the static method *`Devon.I18n.setCurrentLocale((String)locale)`*. After the method executes, the global object `*i18n*` points to the specified locale. Devon framework saves this locale in a cookie, and the page is reloaded with `*location.reload*` showing the changes:
[source,javascript]
----
Ext.define('Sample.view.main.HeaderVC', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.main-header',

  languageChange : function(combo){
    Devon.I18n.setCurrentLocale(combo.getValue());
    location.reload();
  }
});
----
