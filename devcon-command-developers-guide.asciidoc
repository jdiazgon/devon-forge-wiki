:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Devcon Command Developer's guide

=== Introduction

<<Devcon User Guide,Devcon>> is a cross-platform command line and GUI tool written in Java that provides many automated tasks around the full life-cycle of Devonfw applications.

The structure of Devcon is formed by two main elements: _modules_ and _commands_.

image::images/devcon/devcon-structure.png[,width="450", link="images/devcon/devcon-structure.png"]

where each module represents an area of Devon and groups commands that are related to some specific task of that area.

There is also a third element with a main spot in Devcon, the _parameters_, we will see them later.

After <<Download Devcon,installing Devcon>> you can see the modules and commands available out of the box opening a command line and using the command `devon -g` to launch the Devcon's graphic user interface.

[NOTE]
====
Using the command line and the command `devon -h` (even using only the keyword `devon` or `devcon`) and `devon <module> -h` will show the equivalent information.
====

image::images/devcon/devcon-structure-gui.png[,width="450", link="images/devcon/devcon-structure-gui.png"]

The available modules appear in the window bar and clicking over each module a drop down menu shows the list of commands grouped under a particular module.

As showed above the module _oasp4j_ has four commands related to the _oasp4j_ projects: _create_, _build_, _run_ and _deploy_. Each command takes care of an specific task within the context of that particular module.

=== Creating your own Devcon modules

Devcon has been designed to be easily extended with new custom functionalities. Thanks to its structure based on _modules_ and _commands_ (and _parameters_) the users can cover new tasks simply including new modules and commands to the tool.

We will be able to do that in two ways:

- Adding a new Java module in the _core_ of Devcon.
- Adding an external module written in Javascipt.

Let's see the basic elements to have in mind before starting with the addition of new modules.

==== Elements and their keywords

Each main element of Devcon needs to be _registered_ to become accessible, to achieve that we annotate each element with a specific _keyword_ that will tell Devcon, during the launching process, which elements are available as modules and commands.

===== module registry
Internally the modules are registered in Devcon's context using the _@CmdModuleRegistry_ annotation and providing some _metadata_ (like _name_, _description_, etc.) to define the basic details of the module.

In de Javascript approach this annotation will be replaced by a _json_ file.

===== command registry
In the same way, the commands in Devcon are registered using the _@Command_ annotation, that also allows to add _metadata_ (_name_, _description_, etc.) to provide more information.

===== parameter registry
In most cases the commands will need parameters to work with. The _@Parameters_ and _@Parameter_ annotations allow to register those in Devcon. The _@Parameter_ annotation also allows to define the basic info of each parameter (_name_, _description_, etc.).


==== Creating a java module

If you are not interested in create _core_ modules and want to focus on external Javascript modules skip this section and go direcly to <<Javascript modules,Javascript modules>> part.

So once we have the basic definition of the Devcon's elements and we know how to register them, let's see how to add a new module in Devcon's _core_ using Java.

In this example we are going to create a new module called _file_ in order to manage files. As a second stage we are going to add an _extract_ command to extract zip files. To avoid the tricky details we are going to reuse the _unzip_ functionality already implemented in the Devcon's utilities.

1 - Get the last Devcon release from https://github.com/devonfw/devcon/releases

2 - Unzip it and _Import_ the Devcon project using Eclipse.

3 - In `src/main/java/com.devonfw.devcon/modules` folder create a new package _file_ for the new module and inside it add a new _File_ class.

===== Module annotations

To define the class as a Devcon module we must provide:

- *@CmdModuleRegistry* annotation with the attributes:
	* _name_: for the module name.
	* _description_: for the module description that will be shown to the users.
	* _visible_: if not provided its default value is _true_. Allows to hide modules during develop time.
	* _sort_: to sort modules, if not provided the default value will be _-1_. If sort >=0, it will be sorted by descending value. Modules which do not have any value for sort attribute or which have value <1 will be omitted from numeric sort and will be sorted alphabetically. This modules will be appended to the modules which are sorted numerically.

- extend the _AbstractCommandModule_ to have access to all internal features already implemented for the modules (access to output and input methods, get metadata from the project _devon.json_ file, get the directory from which the command has been launched, get the root of the distribution and so foth).

Finally we will have something like

[source,java]
----
@CmdModuleRegistry(name = "file", description = "custom devcon module", sort = -1)
public class File extends AbstractCommandModule {

...
}
----

===== Command annotations

Now is time to define the command _extract_ of our new module _file_. In this case we will need to provide:

- *@Command* annotation with attributes:
	* _name_: for the command name.
	* _description_: for the command description that will be shown to the users.
	* _context_: the context in which the command is expected to be launched regarding a project. E.g. think in the _oasp4j run_ command. In this case the _run_ command of the _oasp4j_ module needs to be launched within the context of an _oasp4j_ project. We will define that context using this _context_ attribute. The options are:
		** _NONE_: if the command doesn't need to be launched within a project context.
		** _PROJECT_: if the command is expected to be launched within a project (oasp4j, oasp4js or Sencha). In theese cases this context definition will automatically provide a default _path_ parameter to the command parameters alongside some extra project info (see the _oasp4j run_ implementation.).
		** _COMBINEDPROJECT_: if the command needs to be launched within a combined (server & client) project.
	* _proxyParams_: in case you need to configure a proxy this attribute will inject automatically a _host_ and _port_ parameters as part of the parameters of your command.
	* _sort_: see the _sort_ attribute in the previous section.

===== Parameter annotations

To define the parameters of our _extract_ method we must use the following annotations:

-	*@Parameters* annotation to group the command parameters
	*	_value_: an array with the parameters
		**	*@Parameter* annotation for each parameter expected.
			*** _name_: the name for the parameter.
			*** _description_: the description of the parameter to be shown to the users.
			*** _optional_: if the parameter is mandatory or not, by default this attribute has as value _false_, so by default a parameter will be mandatory.
			*** _sort_: see the _sort_ attribute in the previous section.
			*** _inputType_: the type of field related to the parameter to be shown in the graphic user interface of Devcon.
				**** _GENERIC_ for text field parameters.
				**** _PATH_ if you want to bind the parameter value to a _directory window_.
				**** _PASSWORD_ to show a password field.
				**** _LIST_ to show a dropdown list with predefined options as value for a parameter.

Let's imagine that in our _extract_ example we are going to define two parameters _filepath_ and _targetpath_ (the location of the zip file and the path to the folder to store the extracted files).
As our command will extract a zip file we don't need a particular project context so we will use the _ContextType.NONE_.

Finally, importing the package `com.devonfw.devcon.common.utils.Extractor` we will have access to the _unZip_ functionality. Also, thanks to the _AbstractCommandModule_ class that we have extended we have access to an output object to show info/error messages to the users.

So our example will look like

[source,java]
----
@CmdModuleRegistry(name = "file", description = "custom devcon module", sort = -1)
public class File extends AbstractCommandModule {

  @Command(name = "extract", description = "This command extracts a zip file.", context = ContextType.NONE)
  @Parameters(values = {
  @Parameter(name = "filepath", description = "path to the file to be extracted", inputType = @InputType(name = InputTypeNames.GENERIC)),
  @Parameter(name = "targetpath", description = "path to the folder to locate the extracted files", inputType = @InputType(name = InputTypeNames.PATH)) })
  public void extract(String filepath, String targetpath){
    getOutput().showMessage("Extracting...");
    try {
      Extractor.unZip(filepath, targetpath);
      getOutput().showMessage("Done!");
    } catch (Exception e) {
      getOutput().showError("Ups something went wrong.");
    }
  }
}
----

===== Generate the jar

Finally, we need to generate a new devcon.jar file containing our new module. To do so, in Eclipse, with right click over the _devcon_ project in the _Project Explorer_ panel:

- _Export_ > _Runnable JAR file_ > _Next_
- Runnable JAR File Export window:
	* Launch configuration: Devcon (if you don`t have any option for that paramter try to launch once the Devcon.java class with right click and _Run as_ > _Java Application_ and start again the JAR generation).
	* Export destination: select a location for the jar.
	* Check 'Extract required libraries into generated JAR'.
	* Click _Finish_ and click _OK_ in the next window prompts.

Once we have the devcon.jar file we have two options depending if we are customizing a Devcon installed locally or the Devcon tool included with the Devon distributions (from version 2.1.1 onwards).

- OPTION1: If you are working over a local installation of Devcon you only need to copy the _devcon.jar_ you just created, to `C:\Users\{Your User}\.devcon` replacing the devcon.jar that is inside of that directory with your new _devcon.jar_ (be aware that the directory _.devcon_ may be placed in another drive like _D_).

[NOTE]
====
If you don't have Devcon installed you can see how to install it <<Download Devcon,here>>
====

- OPTION 2: In case you are working over the copy of Devcon enabled by default in Devon distributions you only need to copy the _devcon.jar_ you just created, to `Devon-distribution\software\devcon` replacing the devcon.jar that is inside of that directory with your new _devcon.jar_  

Once we have installed our customized version of Devcon we can open the Windows command line (for local Devcon installations) or _console.bat_ script (for the Devcon included in Devon distributions) and type `devcon -g` or `devcon -h`. The first one will open the Devcon graphic user interface, the second one will show the Devcon basic info in the command line. In both cases we should see our new module as one of the available modules.

In case of the _gui_ option we will see

image::images/devcon/devcon-new-module.png[,width="450", link="images/devcon/devcon-new-module.png"]

And selecting the _extract_ command we can see that the parameters we defined appear as mandatory parameters.

image::images/devcon/devcon-new-module2.png[,width="450", link="images/devcon/devcon-new-module2.png"]

[NOTE]
====
If you want to try the same but using the command line you can use the command `devcon file extract -h`
====

===== Using our module and command

Finally we want to use the _extract_ command of our _file_ module to extract a real zip file.

We have a _myFile.zip_ in _D:_ and want to extract the files into _D:\Temp_ directory

*with the gui*

We will need to provide both mandatory parameters and click _Start_ button

image::images/devcon/devcon-using-custom-command-gui.png[,width="450", link="images/devcon/devcon-using-custom-command-gui.png"]

*with the command line*

We would obtain the same result using the command line

[source,batch]
----
C:\>devcon file extract -filepath D:\myFile.zip -targetpath D:\Temp
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
Extracting...
file unzip : D:\Temp\myFile\file1.txt
file unzip : D:\Temp\myFile\file2.txt
file unzip : D:\Temp\myFile\file3.txt
file unzip : D:\Temp\myFile\file4.txt
Done

C:\>
----

That's all, with theese few steps, we have created and included a new customized module written in Java in the Devcon's core.




==== Javascript modules

As we mentioned at the beginning of this chapter Devcon allows to be extended with custom modules in an external way by adding modules written in Javascript.

[NOTE]
====
You will need to have installed Java 8 to be able to run Javascript modules.
====

We have seen how to define the Devcon's elements (modules, commands and parameters) and how to register them (using keywords) so let's see how to add a new module to Devcon using Javascript.

===== Module structure

The Javascript modules must include two main files:

- the *commands.json* file that contains the definition of the elements of the module (module metadata, commands and parameters).
- a Javascript file *<name of the module>.js* with the logic of the module.

===== How to register a module

To register a Javascript module we only need to create a directory with that two files and add it to the Devcon's module engine. If you have installed Devcon locally you should add that directory in a _scripts_ directory within the `C:\Users\{Your User}\.devcon` folder but if you are customizing the Devcon included by default in the Devon distributions (for versions 2.1.1 or higher) you should add the directory with the _json_ and the _js_ files in a _scripts_ directory within the `Devon-dist\software\devon` folder (we will see it later in more detail).

===== Module definition

The _commands.json_ file located in the Javascript module folder defines the elements included in it, from the module details, as name or description, to the commands and its parameters.

If you have followed the <<Creating a java module,Creating a Java module>> section you have seen that for the Java modules we use the _@CmdModuleRegistry_ annotation to register a module. In the case of the Javascript modules this is replaced by the _commands.json_ file itself so we won't have an equivalent _module registry_ keyword.

To define the module in the _commands.json_ file we can use the following attributes:

- _name_: for the module name.
- _description_: for the module description that will be shown to the users.
- _visible_: _true_/_false_ attribute. Allows to hide modules in case we don't want them to be available.
- _sort_: to sort modules, if sort >=0, it will be sorted by descending value. Modules which have value <1 will be omitted from numeric sort and will be sorted alphabetically. This modules will be appended to the modules which are sorted numerically.

An example for a _commands.json_ might look like

[source,json]
----
{
    "name": "myJSmodule",
    "description": "this is an example of a Devcon Javascript module",
    "visible": true,
    "sort": -1,

...

}
----

===== Command definition

Also in the _commands.json_ file we will define the commands of the module and its parameters.

- We will use a *commands* array to enumerate all the commands of a module. Each command will be defined with the following attributes:
	* _name_: for the command name.
	* _path_: path to the _js_ file that contains the logic of the module. If this is located in the same folder than the _commands.json_ file we can provide only the name of the file, without the path.
	* _description_: for the command description that will be shown to the users.
	* _context_: the context in which the command is expected to be launched regarding a project. E.g. the _run_ command of the _oasp4j_ module needs to be launched within the context of an _oasp4j_ project. The options to define the context are:
		** _NONE_: if the command doesn't need to be launched within a project context.
		** _PROJECT_: if the command is expected to be launched within a project (oasp4j, oasp4js or Sencha). In theese cases this context definition will automatically provide a default _path_ parameter to the command parameters alongside some extra project info (see the _oasp4j run_ implementation.).
		** _COMBINEDPROJECT_: if the command needs to be launched within a combined (server & client) project.
	* _proxyParams_: in case your command needs to configure a proxy, this attribute will inject automatically a _host_ and _port_ parameters as part of the parameters of your command.
	* _sort_: see the _sort_ attribute in the previous section.

[source,json]
----
{
    "name": "myJSmodule",
    "description": "this is an example of a Devcon Javascript module",
    "visible": true,
    "sort": -1,
	"commands": [{
		"name": "myFirstCommand",
		"path": "myFirstCommand.js",
		"description": "this is my first js command",
		"context": "NONE",
		"proxyParams": false,
		...
	}]
}
----

===== Parameter definition

As part of the _command_ object in the _commands.json_ file we can define the parameters using the following structure of attributes:

-	*parameters* array to group the command parameters. For each parameter we will define the following attributes:
	* _name_: the name for the parameter.
	* _description_: the description of the parameter to be shown to the users.
	* _optional_: a _true_/_false_ attribute to define if the parameter is mandatory or not.
	* _sort_: see the _sort_ attribute in the previous section.
	* _inputType_: by default the parameters will be represented in the Devcon's graphic user interface as text boxes but, in case we want the parameter to be a drop down list, a directory picker or a password box, we can specify it using this _inputType_ attribute and defining some sub-attributes
		** _drop down list_: `"inputType": {"name":"list", "values":["optionA", "optionB", "optionC"]}`
		** _directory picker_: `"inputType": {"name":"path", "values":[]}`
		** _password box_: `"inputType": {"name":"password", "values":[]}`


In our example we are going to add two parameters, a first one that will be showed as a text box and the second one that will be a drop down with four options. The result will look like the following

[source,json]
----
{
    "name": "myJSmodule",
    "description": "this is an example of a Devcon Javascript module",
    "visible": true,
    "sort": -1,
	"commands": [{
		"name": "myFirstCommand",
		"path": "myFirstCommand.js",
		"description": "this is my first js command",
		"context": "NONE",
		"proxyParams": false,
		"parameters": [
			{
			"name": "firstParameter",
			"description": "this is my first parameter",
			"optional": false,
			"sort": -1
			},
			{
			"name": "secondParameter",
                        "description": "this is my second parameter",
                        "optional":true,
                        "sort": -1,
			"inputType" : {"name":"list", "values":["devonfw", "oasp4j", "cobigen", "devcon"]}
			}
		]
	}],

...


}
----

===== The commands

Each command will be defined in a separate Javascript file with a name that match the `path` attribute defined in the `commands.json` file of the module. Remember that in case that the js file is in the same directory than the _commands.json_ file we only need to provide the name of the js file.

The JavaScript file must have as content either a named or anonymous function which contains the command implementation. The parameters of the funcion contain the parameters in the defined order and the `this` special property points to the Java _CommandModule_ context.

So returning to our example we will have a file called `myFirstCommand.js` located in the same directory than the `commands.json`.

The content will be
[source,javascript]
----
function (firstParameter, secondParameter){

	// Here the content of your module.
}
----

===== Creating a javascript module

*Adding the module structure*

We have already seen the structure of a Devcon's Javascript module so let's see how to create one with an example that contains all steps.

In this case we are going to create (again) a command to extract a zip file, so we are going to create a module called _myJSmodule_ with a command _extract_ that gets two mandatory parameters _filepath_ for the path to the zip file and a _targetpath_ to define the location of the extracted files.

- 1. The `Devcon Directory` is

** for local installations of Devcon: `C:\Users\{Your User}\.devcon` (if you don't find the `.devcon` directory there try looking in `D:` drive, if the directory is not there neither check your Devcon's installation).

** for the Devcon tool within the Devon distribution (version 2.1.1 or higher): `Devon-dist\software\devon`

[NOTE]
====
If you want to customize a copy of Devcon in a local context and you still don't have Devcon installed you can see how to download and install it <<Download Devcon,here>>.
====

- 2. We will need to create the _scripts_ folder within the _Devcon Directory_. 

- 3. Then we will need to create inside the _scripts_ folder the directory for our new module and inside it we need to add

  * a `commands.json` file with the definition of the module
  * and an `extract.js` file with the code for the _extract_ command.

So we will end having a structure like `{Devcon Directory}\scripts\myModule` 

image::images/devcon/devcon-js-structure.png[,width="450", link="images/devcon/devcon-js-structure.png"]


===== Defining the module and the command

To define and register the module and the command we will use the _commands.json_ file. First we will add the module metadata (name, description) and then the commands, and its parameters, inside the _commands_ array.

[source,json]
----
{
	"name": "myJSmodule",
	"description": "test module",
	"visible": true,
	"sort": -1,
	"commands": [
	    {
	    "name": "extract",
	    "path": "extract.js",
	    "description": "command to extract a file",
	    "context": "NONE",
	    "proxyParams": false,
	    "parameters": [
	         {
		     "name": "filepath",
		     "description": "path to the file to be extracted",
		     "optional": false,
		     "sort": -1
		  },
		  {
		      "name": "targetpath",
                      "description": "path to the folder to locate the extracted files",
                      "optional":false,
                      "sort": -1
		   }
		]
	}
      ]
}
----

===== Adding the command logic

As we have previously mentioned we need to add the code of our command in the _extract.js_ file. As we want to extract a file, to avoid a most complicated implementation, we are going to use the _unZip_ method that belongs to the _utils_ package of Devcon. To access to the method we will need to provide the fully qualified name `com.devonfw.devcon.common.utils.Extractor.unZip`.

So in the _extract.js_ file we must add a function that gets the two parameters defined in the _commands.json_ (_filepath_ and _targetpath_) and uses the Java method _unZip_ to extract the file. Also remember that the special property _this_ will give us access to the Devcon's module context so we will be able to use the Devcon's output (you can find the entire resources that `this` can provide https://github.com/devonfw/devcon/blob/develop/src/main/java/com/devonfw/devcon/common/impl/AbstractCommandModule.java[here])

[source,javascript]
----
function(filepath, targetpath){
	this.getOutput().showMessage("extracting...");
	com.devonfw.devcon.common.utils.Extractor.unZip(filepath, targetpath);
	this.getOutput().showMessage("Done!");
}
----

===== Using the new module and the command

We have finished the implementation of the new Javascript module so now we can start using it.

We have created a module to extract _zip_ files so we are going to use a _myFile.zip_ located in the `D:` drive and we are going to extract it to the `D:\Temp` directory using our new module.

As you may know if you have followed the Devcon's documentation we can use the tool in two ways: using the command line or using the Devcon's graphic user interface (GUI).

*using the gui*

To launch Devcon's GUI we must open a command line and use the `devon -g` command. After that the Devon main window should be opened and we should see our new `myJSmodule` in the list of available modules. Then if we click over the module we should see the `extract` command available.

image::images/devcon/devcon-new-js-module.png[,width="450", link="images/devcon/devcon-new-js-module.png"]

Then if we click over the `extract` command we should see a window with the name and description we provided in the `commands.json` alongside the parameters that we defined (_filepath_ and _targetpath_), both mandatory.

If we provide the parameters and click on the _Start_ button the command should be launched and the file should be extracted.

image::images/devcon/devcon-using-custom-js-command-gui.png[,width="450", link="images/devcon/devcon-using-custom-js-command-gui.png"]

We have extracted the file successfully using our just created Devcon command.

*using the command line*

If we use the command line the result will be exactly the same.

Open a Windows command line (for local Devcon installations) or _command.line_ script (for the Devcon included in Devon distributions) and launch the `devcon` command (`devon` or `devcon -h` will also work)

[source,batch]
----
...>devon
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: devon <<module>> <<command>> [parameters...] [-g] [-h] [-p] [-s] [-v]
Devcon is a command line tool that provides many automated tasks around the full
 life-cycle of Devon applications.
 -g,--gui         show devcon GUI
 -h,--help        show help info for each module/command
 -p,--prompt      prompt user for parameters
 -s,--stacktrace  show (if relevant) stack-trace when errors occur
 -v,--version     show devcon version
List of available modules:
> dist: Module with general tasks related to the distribution itself
> doc: Module with tasks related with obtaining specific documentation
> file: custom devcon module
> github: Module to get Github repositories related to Devonfw.
> help: This module shows help info about devcon
> myJSmodule: test module
> oasp4j: Oasp4j(server project) related commands
> oasp4js: Module to automate tasks related to oasp4js
> project: Module to automate tasks related to the devon projects (server + client)
> sencha: Commands related with Ext JS6/Devon4Sencha projects
> system: Devcon and system-wide commands
> workspace: Module to create a new workspace with all default configuration
----

In the list of available modules you should see our `myJSmodule`.

Now if we ask for the `myJSmodule` information with the command `devcon myJSmodule -h` we can check that our `extract` command is available. Also we can see the needed parameters using the `devcon myJSmodule extract -h` command

[source,batch]
----
...>devcon myJSmodule extract -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: myJSmodule extract [-filepath] [-targetpath]
command to extract a file
 -filepath    path to the file to be extracted
 -targetpath  path to the folder to locate the extracted files
----

Finally we can use the _extract_ command providing both mandatory parameters

[source,batch]
----
...>devcon myJSmodule extract -filepath D:\myFile.zip -targetpath D:\Temp
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
extracting...
file unzip : D:\Temp\myFile\file1.txt
file unzip : D:\Temp\myFile\file2.txt
file unzip : D:\Temp\myFile\file3.txt
file unzip : D:\Temp\myFile\file4.txt
Done!
----

=== Conclusion

In this section we have seen how easy can be to extend Devcon with new modules. You can either choose to add a Java module into the core of Devcon or achieve the same in an external way creating your own modules with Javascript (remember that you will need Java 8 to run your Javascript modules).

Thanks to the Devcon's structure, in both cases the work is reduced to, first, register the modules and then define each of its elements (commands and parameters) and the modules engine of Devcon will do the rest.
