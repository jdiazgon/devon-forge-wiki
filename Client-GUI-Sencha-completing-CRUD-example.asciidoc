:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Complete CRUD example (Create, Read, Update and Delete)

In order to complete our example, we are going to add to our page several operations we can do with a Table (Create table, Update table, Read tables and Delete tables).

First of all, we define the following properties in the grid in `TableListV.js` so that we add all the needed buttons to invoke the new business operations.

[source,javascript]
----
grid: function() {
    return {
        xtype: 'grid',
        reference: 'tablesgrid',
        flex: 1,
        padding: '0 10 10 10',
        allowDeselect: true,
        store: this.getStore(),
        columns: [{
            text: i18n.tables.grid.number,
            dataIndex: 'number'
        }, {
            text: i18n.tables.grid.state,
            dataIndex: 'state',
            flex: 1
        }],
        tbar: {
            items: [{
                text: i18n.tables.buttons.add,
                handler: 'onAddClick'
            }, {
                text: i18n.tables.buttons.edit,
                handler: 'onEditClick'
            }, {
                text: i18n.tables.buttons.del,
                handler: 'onDeleteClick'
            }]
        }

    }
},
----

Then, we have to change the `TableListVC.js` to add the functionality that we need for our view:

[source,javascript]
----
Ext.define('demo.view.table.TableListVC', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tablelist',

    onAddClick: function() {
        Ext.GlobalEvents.fireEvent('eventTableAdd');
    },
    onEditClick: function() {
        var grid = this.lookupReference('tablesgrid');
        var rowSelected = grid.getSelectionModel().selected.items[0];
        var id = rowSelected.data.id;
        Ext.GlobalEvents.fireEvent('eventTableEdit', id);
    },
    onDeleteClick: function() {
        var me = this;
        Ext.MessageBox.confirm('Confirmar', i18n.tables.buttons.deleteMsg,
            function(buttonPressed) {
                if (buttonPressed == 'no' || buttonPressed == 'cancel') {
                    return;
                }
                var grid = me.lookupReference('tablesgrid');
                var rowSelected = grid.getSelectionModel().selected.items[0];
                Devon.rest.tablemanagement.table.del({
                    scope: me,
                    withCredentials: true,
                    uriParams: {
                        id: rowSelected.get('id')
                    },
                    success: me.refreshGrid
                });
            }
        );
    },

    refreshGrid: function() {
        var grid = this.lookupReference('tablesgrid');
        grid.getStore().reload();
    }
});
----

We have to change `TableController.js` in order to add the listeners for the events we have defined in the file `TableListVC.js`:

[source,javascript]
----
Ext.define('demo.controller.table.TableController', {
    extend: 'Ext.app.Controller',
    /*view requires*/
    requires:[
        'demo.view.table.i18n.Table_en_EN',
        'demo.view.table.TableListV',
        'demo.view.table.TableEditV'
    ],
    /*Global events listeners definition*/
    config: {
        listen: {
            global: {
                eventOpenTableList: 'onMenuOpenTables',
                eventTableAdd: 'onTableAdd',
                eventTableEdit: 'onTableEdit'
            }
        }
    },
    /*Rest end points definition*/
    init: function() {
        Devon.Ajax.define({
            'tablemanagement.table': {
                url: 'tablemanagement/v1/table/{id}'
            }
        });
    },
    /*Create a view when a global event is fired*/
    onMenuOpenTables: function() {
        var tables = new demo.view.table.TableListV();
        Devon.App.openInContentPanel(tables);
    },
    
    //We use window for add case to show an example of how to work with window
    onTableAdd: function() {
        this.openAddEditWindow();
    },

    onTableEdit: function(id) {
        this.openAddEditWindow(id);
    },
    
    openAddEditWindow: function(idValue){
        var title = idValue ? 'Edit Table' : 'New Table';
        
        var window = Ext.create('Ext.window.Window', {
            title: title,
            width: 400,
            layout: 'fit',
            closable:false,
            draggable:true,
            resizable:false,
            modal:true,
            items: [{
                xtype:'tableedit',
                params: {'id' : idValue}
            }],
            listeners: {
                scope: this,
                eventDone: 'closeWindow'
            }
        }).show();
    },

    closeWindow: function(window){
        window.close();
    }
});
----

Alter defining the Controller, we have to create the window for the addition and edition of the tables.   Create the page `TableEditV.js` in `app/view/table`:

[source,javascript]
----
Ext.define("demo.view.table.TableEditV", {
    extend: "Ext.panel.Panel",
    alias: 'widget.tableedit',
    requires: [
        'Ext.grid.Panel',
        'demo.view.table.TableEditVC'
    ],
    controller: "table-edit-controller",
    initComponent: function() {
        Ext.apply(this, {
        items : [
            this.formpanel()
        ]
        });
        this.callParent(arguments);
    },
    
    formpanel : function(){
        return {
            xtype:'form',
            reference:'panel',
            defaults:{ margin : 5 },
            items : [{
                xtype:'hiddenfield',
                reference:'id',
                name: 'id'
            },{
                xtype:'numberfield',
                reference:'number',
                fieldLabel:i18n.tableEdit.number,
                tabIndex:1,
                minValue:1,
                name: 'number'
            },{
                xtype:'combo',
                reference:'state',
                fieldLabel:i18n.tableEdit.state,
                tabIndex:2,
                queryMode: 'local',
                displayField: 'code',
                valueField: 'code',
                name: 'state',
                store: this.getStore()
            },{
                xtype:'hiddenfield',
                reference:'modificationCounter',
                name: 'modificationCounter'
            }],
            bbar: [
                '->', {
                    text: i18n.tableEdit.submit,
                    handler: 'onTableEditSubmit'
                }, {
                    text: i18n.tableEdit.cancel,
                    handler: 'onTableEditCancel'
                }
            ]
        }
    },
    
    getStore: function(){
        return Ext.create('Ext.data.Store', {
                    fields: ['code'],
                    data:[
                        {'code':'FREE'},
                        {'code':'OCCUPIED'},
                        {'code':'RESERVED'}
                    ]
               });
    }
});
----

As we have created a view, we will need to create the ViewController related to the view.

This View Controller is defining the actions to perform when the submit or cancel button is pressed. Also, it is responsible for getting the data for a table if it is an edit operation.

Create the file `TableEditVC.js` in the path `app/view/table/`:

[source,javascript]
----
Ext.define('demo.view.table.TableEditVC', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.table-edit-controller',
    control: {
        '#': {
            afterrender: 'onAfterRender'
        }
    },
    onTableEditSubmit: function() {
        var form = this.lookupReference('panel');
        var params = form.getValues();
        Devon.rest.tablemanagement.table.post({
            scope: this,
            jsonData : params,
            success: function(){
                //Fire close event
                var parent =  this.getView().up();
                
                //If window we fire event
                if(parent.xtype=='window'){
                    parent.fireEvent('eventDone', parent);
                }
                //If tabpanel, we close the tab
                else{
                    this.getView().close();
                }
            }
        });
    },
    onTableEditCancel: function() {
        this.tableEditClose();
    },
    onAfterRender: function(view) {
        var parentParams = view.params || {};
        if(parentParams.id){
            var form = this.lookupReference('panel');
            
            Devon.rest.tablemanagement.table.get({
                scope: this,
                uriParams: {
                    id: parentParams.id
                },
                success: function(result, options){
                    var formId = this.lookupReference('id');
                    formId.setValue(result.id);
                    var formNumber = this.lookupReference('number');
                    formNumber.setValue(result.number);
                    var formState = this.lookupReference('state');
                    formState.setValue(result.state);
                    var formModificationCounter = this.lookupReference('modificationCounter');
                    formModificationCounter.setValue(result.modificationCounter);
                }
            });
        }
    },

    tableEditClose: function() {
        var parent =  this.getView().up();
            //If window we fire event
        if(parent.xtype=='window'){
            parent.fireEvent('eventDone', parent);
        }
    }
});
----

After this, we have to complete our bundle of messages for completing the CRUD.  So, we edit `demo.view.table.i18n.Table_en_EN`:

[source,javascript]
----
Ext.define('demo.view.table.i18n.Table_en_EN',{
    extend:'Devon.I18nBundle',
    singleton:true,
    i18n:{
        tables: {
            title: 'Tables',
            html:'List of tables for the restaurant demo',
            grid: {
                number: 'NUMBER',
                state: 'STATE'
            },
            buttons: {
                add: 'Add',
                edit: 'Edit',
                del: 'Delete',
                deleteMsg: 'Are you sure you want to delete this Table?'                }
        },
        tableEdit:{
            number:'Number',
            state:'State',
            submit:'Submit',
            cancel:'Cancel'
        }
    }
});
----

Finally, we should edit our `TableM.js` to add a new field `modificationCounter`.   This is because the business operation needs this field to find out if it is a new value or an updated one.   This field gives us information about how many times a record has been modified:

[source,javascript]
----
Ext.define('demo.model.table.TableM', {
    extend: 'Ext.data.Model',
    fields: [
        { name: 'id', type: 'int' },
        { name: 'number', type: 'int', allowNull: true },
        { name: 'state', type: 'auto' },
        { name: 'modificationCounter', type: 'int', allowNull: true}
    ]
});
----

Navigate to our application in the browser and check the result of the changes

Now, we can see that we have three new buttons above our grid:

image::images/client-gui-sencha/gridCRUD.PNG[Grid CRUD,width="450", link="images/client-gui-sencha/gridCRUD.PNG"]

If we click the `Add` button, the application will open a new window:

image::images/client-gui-sencha/addCRUD.PNG[Add CRUD,width="450", link="images/client-gui-sencha/addCRUD.PNG"]

If we select a record from the grid and we click the `Edit` button:

image::images/client-gui-sencha/editCRUD.PNG[Edit CRUD,width="450", link="images/client-gui-sencha/editCRUD.PNG"]

If we select a record from the grid and we click the `Delete` button:

image::images/client-gui-sencha/deleteCRUD.PNG[Delete CRUD,width="450", link="images/client-gui-sencha/deleteCRUD.PNG"]

If we try to delete a record from the grid we will obtain the following error:

image::images/client-gui-sencha/deleteCRUDerror.PNG[Delete CRUD error,width="450", link="images/client-gui-sencha/deleteCRUDerror.PNG"]

This is because the user `waiter` does not have enough permission to do this functionality.

Instead of using this user, we can use the user `chief` for this purpose:

image::images/client-gui-sencha/chiefLogin.PNG[Chief Login,width="300", link="images/client-gui-sencha/chiefLogin.PNG"]

Use the `chief` user and try to delete a record from the tables grid

Later we will see how to disable some buttons depending on the user that is connected in that moment.   With this we will be providing security to the application.

=== Extending the CRUD

In the following chapters we are going to extend the CRUD adding some functionalities.

include::Client-GUI-Sencha-extending-the-CRUD-refresh-and-double-click.asciidoc[]

<<<<

include::Client-GUI-Sencha-extending-the-CRUD-viewModels.asciidoc[]

<<<<

include::Client-GUI-Sencha-extending-CRUD-pagination.asciidoc[]

<<<<

include::Client-GUI-Sencha-extending-CRUD-search-and-filter.asciidoc[]

<<<<

include::Client-GUI-Sencha-extending-CRUD-add-an-inbox.asciidoc[]

<<<<

include::Client-GUI-Sencha-extending-CRUD-change-state-table.asciidoc[]

<<<<

include::Client-GUI-Sencha-extending-CRUD-edit-menu-order.asciidoc[]

<<<<

include::Client-GUI-Sencha-extending-CRUD-working-with-layouts.asciidoc[]

<<<<

include::Client-GUI-Sencha-extending-CRUD-editable-grid.asciidoc[]

<<<<

include::Client-GUI-Sencha-extending-CRUD-custom-plugin.asciidoc[]