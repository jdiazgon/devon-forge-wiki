:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Write Unit Test Cases

=== Unit Test

In computer programming, unit testing is a software testing method by which individual units of source code, sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures, are tested to determine whether they are fit for the use. Intuitively, one can view a unit as the smallest testable part of an application. For more information, visit https://en.wikipedia.org/wiki/Unit_testing[wikipedia].

==== Unit Test in Eclipse

In order to understand how the Unit Tests works in Eclipse, lets discuss how to create and run a simple test.

===== Step 1: Create a new class

Create a class with the name _MyClass.java_ (you can <<Creating your First Application,create a new application>> as per need). In Eclipse, right click on the package in the application and then select _New > Class_. Name it _MyClass_ and press _Finish_.

===== Step 2: Create a JUnit test

In Project Explorer, over the new _MyClass.java class_, then right click and go to _New > Other >_ and select _JUnit Test Case_. Name it _MyClassTest_ (name by default) and select source folder and package in the application to create the test. e.g. `src/test/java` (this is a good practice). 

===== Step 3: Implement the test
Fist of all, check the dependencies of the module in _pom.xml_ file.

[source,xml]
----
<dependency>
  <groupId>io.oasp.java.modules</groupId>
  <artifactId>oasp4j-test</artifactId>
  <scope>test</scope>
</dependency>
----

In a OASP4J project, you have your own Component Test methods, so you need your new _JUnit Test_ class to extend _AbstractComponentTest_ class of the OASP4J module test.

[source,java]
----
@SpringBootTest(classes = { SpringBootApp.class })
public class MyClassTest extends AbstractComponentTest {

  @Test
  public void test() {
    assertThat(false).isTrue();
  }
}
----

This is a very simple test that verifies if the boolean value `true` is true. And is the case to start testing OASP4J application. As you can imagine that the test is going to fail, but you will see the details in later part.

[NOTE]
=====
You are including the `@SpringBootTest` annotation in order to define an application context to your test. Without the context of the application, the test gets a fatal error, because you can't test a non-running application. 

You can include a configuration location in the last annotation, if you need it, or use `@ContextConfiguration(locations = { "classpath:my-bean-context.xml" })`. For this tutorial, it's unnecessary because your test is the most simplest test you can perform.
=====

===== Step 4: Run the test

Eclipse provides a very helpful view to test the applications. If you can't see, press the menu: _Windows > Show View > Other_ and select _JUnit_.

Now, over the test, press right click _Run As > JUnit test_

image::images/writing-unittest-cases/getting-started-writing-unittest-cases-failed.png[,width="450", link="images/writing-unittest-cases/getting-started-writing-unittest-cases-failed.png"]

In the above image, Eclipse shows a red rectangle because one of the tests has been failed (in this case, a single test). The failure of the test is marked with a blue cross but you can observe three different marks:

* Red cross: the test has some fatal error as, e.g context error, null pointer exceptions, etc.
* Blue cross: the test fails in some test method like `asserThan()` (like your case)
* Green check: the test is OK

In above case, you have a simple failure because your test has a `assertThat(false).isTrue()` meaning check if `true == false`. Now, let's discuss how to fix the failure and run the test again.

[source,java]
----
@SpringBootTest(classes = { SpringBootApp.class })
public class MyClassTest extends AbstractComponentTest {

  @Test
  public void test() {
    assertThat(true).isTrue();
  }
}
----

Now, you need to run the test again. And you will get the next result as shown in below image.

image::images/writing-unittest-cases/getting-started-writing-unittest-cases-ok.png[,width="450", link="images/writing-unittest-cases/getting-started-writing-unittest-cases-ok.png"]

Evidently, the test ends successfully and Eclipse shows a green rectangle and the test with a green check.

With the discussed knowledge base, you can start testing all the applications. 

=== TDD Test-driven development

Test-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: first the developer writes an (initially failing) automated test case that defines a desired improvement or new function, then produces the minimum amount of code to pass that test, and finally refactors the new code to acceptable standards.

The process of TDD is described as follows:

* Create a test
* Run all the tests
* Write the implementation code
* Run all the tests
* Refactor

==== TDD in Eclipse

Now, you are acquainted with the skills of creating, writing and running the test. Therefore, you can start with a simple tutorial in order to get the most clear idea about TDD.

The goal is create a simple calculator that has two methods: add(int,int) and sub(int,int).

===== Step 1: Create a test

The idea is very simple, you will create the tests for the methods of a class that needs to be implemented later. It will allow you to get the control of the result and verify that the code is working properly from the beginning.

You need to create a test called `CalculatorTest` in test package and a class `Calculator` in the java package. 

In this test class, you will include a variable of a class _Calculator_ and the test to the future _add()_ and _sub()_ methods of _Calculator_ class.

Calculator.java
[source,java]
----
public class Calculator {
  public Calculator() {}

  public Object add(int a, int b) {
    return null;
  }

  public Object sub(int a, int b) {
    return null;
  }
}
----

Thus, you have the wire of your calculator. In this case, the implementation is very simple, but you can scale it to a  more complex logic. Now, you need to include the test data required to run the class _CalculatorTest_. 

CalculatorTest.java
[source,java]
----
@SpringBootTest(classes = { SpringBootApp.class })
public class CalculatorTest extends AbstractComponentTest {
  private Calculator calculator = new Calculator();

  @Test
  public void addTest() {
    assertThat(this.calculator.add(1, 2)).isEqualTo(3);
  }

  @Test
  public void subTest() {
    assertThat(this.calculator.sub(1, 2)).isEqualTo(-1);
  }
}
----

===== Step 2: Run the test new test

Run the test and the result is as shown below:

image::images/writing-unittest-cases/getting-started-writing-unittest-cases-TDD-failed.png[,width="450", link="images/writing-unittest-cases/getting-started-writing-unittest-cases-TDD-failed.png"]

Obviously, the test shows some failures as expected because the Calculator doesn't work yet. 

The fact, this is more of a metaphoric step, as the implementation is in progress and it is obvious to get errors after running the test. As it is the cycle of the TDD, you need to write a test that will fail certainly so that the code to satisfy the test can be written. Surely, this will help to keep the code simple and clean.


[NOTE]
=====
Methods named `add()` and `sub()`, returns `Object` as return value because if the methods return an `int`, you will get a "red cross error" pointing `NullPointerException` instead of "blue cross error" of `assetThat()`. It's just for this tutorial.
=====

===== Step 3: Write the implementation code

So far, you have seen a perfect test and an awful implementation of the Calculator. Let's start with the implementation.

Let's implement the method `add()` and see what happens.

[source,java]
----
 public class Calculator {
  public Calculator() {}

  public int add(int a, int b) {
    return a + b;
  }

  public Object sub(int a, int b) {
    return null;
  }
}
----

===== Step 4: Run the test -again-

If you run the test, you will get the following result:

image::images/writing-unittest-cases/getting-started-writing-unittest-cases-TDD-failed2.png[,width="450", link="images/writing-unittest-cases/getting-started-writing-unittest-cases-TDD-failed2.png"]

Now, you have a success result for the method `add()` and a failure result for the method `sub()`. Clearly, it's not necessary to get all the tests results as OK to run the tests, you can check the result of the test and work on to satisfy it. This the idea of TDD.

===== Step 5: Refactor

Now, let's implement the method `sub()`

[source,java]
----
public class Calculator {
  public Calculator() {}

  public int add(int a, int b) { 
    return a + b;
  }

  public int sub(int a, int b) { 
    return a - b;
  }
}
----

===== Step 6: Run the test -return to step 2-

If you run the application, you will get the following result:

image::images/writing-unittest-cases/getting-started-writing-unittest-cases-TDD-ok.png[,width="450", link="images/writing-unittest-cases/getting-started-writing-unittest-cases-TDD-ok.png"]

Finally, here is your first application implemented with TDD methodology!

Therefore, in this tutorial, you have dealt with a very simple application, so you donâ€™t need another round of the TDD cycle, but in the real applications, you may need to repeat the cycle several times to get a successful result.