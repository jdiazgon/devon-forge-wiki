:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Creating Component's Structure with _Cobigen_

Once we have finished creating the _core_ of our components we could continue creating all the structure and elements manually, but we are going to show how using _Cobigen_ for those tasks we can save a significant amount of time and effort.

==== Importing Cobigen templates

Before start using _Cobigen_ we need to import into our project the _CobiGenTemplates_. To do so, we only need to use the Eclipse's menu _File > Import > Existing Projects into Workspace_ and browse to select the `workspaces/main/CobiGen_Templates` directory. Then click _Finish_ button and you should have the _CobiGenTemplates_ as a new project in Eclipse's workspace.

image::images/oasp4j/4.Components/cobigen_templates.png[width="250", link="images/oasp4j/4.Components/cobigen_templates.png"]


==== Cobigen Health Check

The first time we use Cobigen is recommended to check the health of the tool. To do so, right-click over an entity and select _Health Check_

image::images/oasp4j/4.Components/cobigen0.png[link="images/oasp4j/4.Components/cobigen0.png"]

The next dialogs will show us if there are outdated templates. In that case we can solve it clicking the _Update_ button.

image::images/oasp4j/4.Components/cobigen_health1.png[width="350",link="images/oasp4j/4.Components/cobigen_health1.png"]

image::images/oasp4j/4.Components/cobigen_health2.png[width="350",link="images/oasp4j/4.Components/cobigen_health2.png"]

==== _Visitor_ component structure

To create the whole structure of a component with _Cobigen_ we only need to right-clicking over our component core entity, select _Cobigen > Generate_

image::images/oasp4j/4.Components/cobigen1.png[link="images/oasp4j/4.Components/cobigen1.png"]

Now we have to choose which packages we want to generate with the tool.

The options are:

* _CRUD DAO's_: generates the implementation of CRUD operations in the data access layer.

image::images/oasp4j/4.Components/cobigen2_crud_dao.png[link="images/oasp4j/4.Components/cobigen2_crud_dao.png"]

* _CRUD REST services_: generates a complete service layer with CRUD operations for our entity exposed as a REST service.

image::images/oasp4j/4.Components/cobigen2_crud_rest.png[link="images/oasp4j/4.Components/cobigen2_crud_rest.png"]

* _CRUD logic (with use cases)_: generates the logic layer dividing the implementation in different use cases.

image::images/oasp4j/4.Components/cobigen2_crud_logic_withusecases.png[link="images/oasp4j/4.Components/cobigen2_crud_logic_withusecases.png"]

* _CRUD logic (all in one)_: does the same as previous option but with the implementation of the logic layer in only one class instead of different use-cases classes.

image::images/oasp4j/4.Components/cobigen2_crud_logic_allinone.png[link="images/oasp4j/4.Components/cobigen2_crud_logic_allinone.png"]

* _Entity infrastructure_: creates the entity main interface and edits (by a merge) the current entity to extend the oasp classes

image::images/oasp4j/4.Components/cobigen2_entityinfrastructure.png[link="images/oasp4j/4.Components/cobigen2_entityinfrastructure.png"]

* _TO's_: generates the related _Transfer Objects_ that we will explain in next chapters of this tutorial

image::images/oasp4j/4.Components/cobigen2_tos.png[link="images/oasp4j/4.Components/cobigen2_tos.png"]

To generate all the needed functionalities of our component we are going to select the following packages to be generated *at the same time*

image::images/oasp4j/4.Components/cobigen3_allpackages.png[link="images/oasp4j/4.Components/cobigen3_allpackages.png"]

Now we can select the fields to be involved (all by default) or directly create all the packages clicking the _Finish_ button.

During the process _Cobigen_ will show a message asking us to review some ambiguous references. Click _Continue_

image::images/oasp4j/4.Components/cobigen4_review_imports.png[link="images/oasp4j/4.Components/cobigen4_review_imports.png"]

Once _Cobigen_ has finished we will check if we need to introduce manual adjustments. In the case of the _Visitor_ component, we have a relation (dependency) with some of the _Access Code_ component elements, that are still not created. We will solve this compilation errors in next step.

image::images/oasp4j/4.Components/cobigen5_expected_errors.png[link="images/oasp4j/4.Components/cobigen5_expected_errors.png"]

==== _Access Code_ component structure

Now we are going to repeat the same process using _Cobigen_ with our other _AccessCode_ component.

Once the process has finished you may see that we need to also adjust manually some imports related to _Timestamp_ type in:

- `accesscodemanagement/common/api/AccessCode.java`

- `accesscodemanagement/logic/api/to/AccessCodeSearchCriteriaTo.java`

- `accesscodemanagement/dataaccess/impl/dao/AccessCodeDaoImpl.java`

- `accesscodemanagement/logic/api/to/AccessCodeEto.java`

Solve it manually using the Eclipse helpers and finally go to `visitormanagement/logic/api/to/VisitorCto.java` and resolve our last compilation error related to `AccessCodeEto`, that has been already created.

==== Run the app

If all compilation errors are solved run the app ( _SpringBootApp.java right click > Run as > Java application_ ). The app should be launched without errors.

Congratulations you have created your first _Oasp4j_ components. In the next chapter we will explain and show in detail each of the created elements.