:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing
 
== Devon4Sencha Best Practices
 
=== Bad formed code

- *Trailing coma*

* Not every browser support it

* Difficult to debug

[source, javascript]
----
var myObject = {
    foo: 1,
    bar: 'value',
    traillingComma: true,
};
----


[source, javascript]
----
var me = this,
    store = me.getStore(),
    firstRec = store.getAt(0) //<-- missing comma
accidentalGlobal = true;
----


- Unused function parameters should be removed.

- Functions should not be too complex.

- Unused local variables should be removed.

- Control structures should use always curly brackets.

- Variables should not be redeclared.

- Each statement should end with a semicolon.

- Nested blocks of code should not be left empty.

- Sections of code should not be "commented out".
 
=== Excessive or unnecessary nesting of component structures
  
* One of the most common mistakes developers make is nesting components for no reason.
 
* Doing this hurts performance and can also cause oddities such as double borders or unexpected layout behavior.
 
* **Example**: Panel that contains a single grid. Panel is unnecessary.  The extra panel can be eliminated.  Forms, trees, tab panels and grids all extend from Panel, so you should especially watch for unnecessary nesting conditions

[source,javascript]
----
items: [{

    xtype: 'panel',

    title: 'My Cool Grid',

    layout: 'fit',

    items: [{

        xtype: 'grid',

        store: 'Mystore',

        columns: [{...
        }]

    }]

}]
----

 
    Example 1A BAD: The panel is unnecessary.
    
    
    
[source,javascript]    
----
layout: 'fit',

    items: [{
        xtype: 'grid',
        title: 'My cool Grid',
        store: 'Mystore',
        columns: [{...
        }]

    }]

}]
----
      

    Example 1B Good: The grid is already a panel, so just use any panel properties directly on the grid.

   
=== Memory leaks caused by failure to cleanup unused components 

* *Why my app is getting slower and slower?*

* *Failure to cleanup unused components as user navigates*

** Each time user right-clicks on a grid row a new context menu is created

** If the user keeps this app open and clicks hundreds of times, hundreds of context menus will never be destroyed

** To the developer and user, the apps "looks" visually correct because only the last context menu created is seen on the page

** Memory utilization will keep increasing 
** Slower operation / browser crash


[source,javascript]
----
Ext.define('MyApp.view.MyGrid', {
    extend: 'Ext.grid.Panel',
    columns: [{...
    }],
    store: 'MyStore',
    initComponent: function() {
        this.callParent(arguments);
        this.on({
            scope: this,
            itemcontextmenu: this.onItemContextMenu
        });
    },

    onItemContextMenu: function(view, rec, item, index, event) {
        event.stopEvent();
        Ext.create('Ext.menu.Menu', {
            items: [{
                text: 'Do Something'
            }]
        }).showAt(event.getXY());

    }
});
----


* *Better solution*

** Context menu is created once when grid is initialized and is simply reused each time

** However, if the grid is destroyed, the context menu will still exist


[source,javascript]
----
Ext.define('MyApp.view.MyGrid', {
    extend: 'Ext.grid.Panel',
    columns: [{...
    }],
    store: 'MyStore',
    columns: [{...
    }],
  
    initComponent: function() {
        this.menu = this.buildMenu();
        this.callParent(arguments);
        this.on({
            scope: this,
            itemcontextmenu: this.onItemContextMenu
        });
    },


    buildMenu: function() {
        return Ext.create('Ext.menu.Menu', {
            items: [{
                text: 'Do something'
            }]
        });
    },
  
  

    onItemContextMenu: function(view, rec, item, index, event) {
        event.stopEvent();
        Ext.create('Ext.menu.Menu', {
            items: [{
                text: 'Do Something'
            }]
        }).showAt(event.getXY());

    }
});
----


* *Best solution*

** Context menu is destroyed when the grid is destroyed

[source,javascript]
----
Ext.define('MyApp.view.MyGrid', {
    extend: 'Ext.grid.Panel',
    columns: [{...
    }],
    store: 'MyStore',
    columns: [{...
    }],

    initComponent: function() {
        this.menu = this.buildMenu();
        this.callParent(arguments);
        this.on({
            scope: this,
            itemcontextmenu: this.onItemContextMenu
        });
    },


    buildMenu: function() {
        return Ext.create('Ext.menu.Menu', {
            items: [{
                text: 'Do something'
            }]
        });
    },


    onDestroy: function() {
        this.menu.destroy();
        this.callParent(arguments);
    },


    onItemContextMenu: function(view, rec, item, index, event) {
        event.stopEvent();
        Ext.create('Ext.menu.Menu', {
            items: [{
                text: 'Do Something'
            }]
        }).showAt(event.getXY());

    }
});
----

=== Poor folder structure for source code

* Doesn't affect performance or operation, but it makes it difficult to follow the structure of the app


    Example 1A BAD: Poor folder estructure:

image::images/devon4sencha-badPractices/bad-practices/poor-folder-stucture.png[Bad folder estructure,align="center",width="175",link="images/devon4sencha-badPractices/bad-practices/poor-folder-stucture.png"]

    Example 1B Good: Folder estructure to follow:

image::images/devon4sencha-badPractices/bad-practices/good-folder-stucture.png[Good folder estructure,align="center",width="175",link="images/devon4sencha-badPractices/bad-practices/good-folder-stucture.png"]

=== Use of global variables

* Name collisions and hard to debug.

* We should hold "properties" in a class and then reference them with getters and setters.

    Instead of 
[source,javascript] 
----
MyLastCustomer= 123456;
----

    We use 

image::images/devon4sencha-badPractices/bad-practices/global-variable-I.png[Global variable 2,align="center",width="175",link="images/devon4sencha-badPractices/bad-practices/global-variable-I.png"]

[source,javascript] 
----
Ext.define('MyApp.config.Runtime', {
    singleton: true,
    config: {
        myLastCustomer: 0 // initialize to 0
    },

    constuctor: function(config) {
        this.initConfig(config);
    }
}
});
----

[source,javascript] 
----
MyApp.config.setMyLastCustomer(12345);

MyApp.config.getMyLastCustomer();
----

=== Use of _id_

* Use of id's on components is not recommended.

* Each id must be unique.

[source,javascript]
----
//here we define the first save button 
xtype: 'toolbar',
    items: [{
        text: 'Save Picture',
        id: 'savebutton'
    }]


//somewhere else in the code we have another component with an id of 'savebutton'

xtype: 'toolbar',
    items: [{
        text: 'Save Order',
        id: 'savebutton'
    }]
----


* Replace by "itemId" resolves the name conflict and we can still get a reference to the component.

[source,javascript] 
----
xtype: 'toolbar',
    itemId: 'picturetoolbar',
    items: [{
        text: 'Save Picture',
        itemId: 'savebutton'
    }]

// somewhere else in the code

xtype: 'toolbar',
    itemId: 'ordertoolbar',
    items: [{
        text: 'Save Order',
        itemId: 'savebutton'
    }]

----

[source,javascript]
----
var pictureSaveButton = Ext.ComponentQuery.query('#picturetoolbar > #savebutton')[0];

var orderSaveButton = Ext.ComponentQuery.query('#ordertoolbar > #savebutton')[0];

// assuming we have a reference to the "picturetoolbar" as picToolbar

picToolbar.down('#savebutton');
----


=== Unreliable referencing of components

* Code that relies on component positioning in order to get a reference.

* It should be avoided as the code can easily be broken if any items are added, removed or nested within a different component.

[source,javascript]
----
var mySaveButton = myToolbar.items.getAt(2);
var myWindow = myToolbar.ownerCt;
----

[source,javascript]
----
var mySaveButton = myToolbar.down('#savebutton');
var myWindow = myToolbar.up('window');
----


=== Failing to follow upper or lowercase naming conventions

* Avoid confusion and keep your code clean.

* Additionally, if you are firing any custom events, the name of the event should be all lowercase.

 Wrong upper lower naming convention


[source,javascript]
----
Ext.define('MyApp.view.customerList', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.CustomerList',
    MyCustomConfig: 'xyz',
    initComponent: function() {

        Ext.apply(this, {
            store: 'Customers',
            ...

        });
        this.callParent(arguments);
    }
});
----



    Correct upper lower naming convention



[source,javascript]
----
Ext.define('MyApp.view.CustomerList', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.customerList',
    MyCustomConfig: 'xyz',
    initComponent: function() {

        Ext.apply(this, {
            store: 'Customers',
            ...

        });
        this.callParent(arguments);
    }
});
----


=== Making your code more complicated than necessary.

* Each value is loaded individually


[source,javascript]
----
//suppose the following fields exist within a form 
items: [{
    fieldLable: 'User',
    itemId: 'username'
}, {
    fieldLable: 'Email',
    itemId: 'email'
}, {
    fieldLable: 'Home Address',
    itemId: 'address'
}];

//you could load the values from a record into each form field individually 

myForm.down('#username').setValue(record.get('UserName'));
myForm.down('#email').setValue(record.get('Email'));
myForm.down('#address').setValue(record.get('Address'));
----


* Use "loadRecord" method

* Review all of a component's methods and examples to make sure you are using simple and proper techniques.


[source,javascript]
----
items: [{
    fieldLable: 'User',
    name: 'UserName'
}, {
    fieldLable: 'Email',
    name: 'Email'
}, {
    fieldLable: 'Home Address',
    name: 'Address'
}];

myForm.loadRecord(record);

----


=== Nesting callbacks are a nightmare

* Pyramidal code

* Will cost problems in the future

* Difficult to

- Read

- Comprehend

- Follow

- Debug

[source, javascript]
----
Ext.Ajax.request({
    url: 'someUrl.php',
    success: function(response) {
        // Do work here 
        Ext.Ajax.request({
            url: 'anotherUrl.php',
            success: function(response) {
                // Do more work here 
                Ext.Ajax.request({
                    url: 'yetAnotherUrl.php',
                    success: function(response) {
                        // Do yet more work here 
                        Ext.Ajax.request({
                            url: 'yetAnotherUrl.php',
                            success: function(response) {
                                // This is pretty rediculous.
                            }

                        });
                    }
                });
            }

        });
    }
});
----



* Use "scope"

[source,javascript]
----
getPeople: function(people) {
        Ext.Ajax.request({
            url: 'people.php',
            method: 'GET',
            params: people,
            scope: this,
            success: this.onAfterGetPeople
        });
    },

    onAfterGetPeople: function(response) {
        // Do some work here 

        var jsonData = Ext.decode(response.responseText);
        this.getDepartments(jsonData.departments);
    },

    getDepartments: function(departments) {
        Ext.Ajax.request({
            url: 'departments.php',
            method: 'GET',
            params: 'departments',
            scope: this,
            success: this.onAfterGetDepartments
        });
    }

onAfterGetDepartments: function(response) {
    // Do more work
}
----


=== Caching and references

* Wrong use of object references.

** Loop accessing an object.

** Repetition of accessing to the object.

** Use references! 

*** Store object in a variable.
*** Improvement of application performance.

* Avoid using:

- document.getElementById()

- Ext.getCmp()

- and other global queries.

* jsPerf

- JavaScript performance playground.

- Aims to provide an easy way to create and share test cases, comparing the performance of different JavaScript snippets by running benchmarks.

- http://jsperf.com

[source,javascript]
----
for (var i = 0; i < 1000; i++) {
  globalVar.some.ridiculous.chain.method();
  globalVar.some.ridiculous.chain.value = 'foobar';

// you get the idea 

}
----

[source,javascript]
----
var localReference = globalVar.some.ridiculous.chain;

for (var i = 0; i < 1000; i++) {
    localReference.method();
    localReference.value = 'foobar';

    //you get the idea
}
----


=== Identation

* Code impossible to follow

- Too much!

- Inconsistent

- Waste

image::images/devon4sencha-badPractices/bad-practices/Improperly-idented-code.png[Identation 1,width="300",link="images/devon4sencha-badPractices/bad-practices/Improperly-idented-code.png"]

* Always code for readability.

[source, javascript]
----
if (!this.isReadable()) {
    this.refactorWith({
        properIndentation: true,
        optimizedCodeForReadability: true
    });

    else {
        this.beHappy();
    }
----

=== One class per file

* Avoid files with more than 1000 lines of code.

- Difficult to maintain

[source,javascript]
----
sendTwitter();
return true;
};
}
},
// eachTime function . Called whenever the plugin is

function($, jQuery, dmJQuery, callback) {
    if (callback) {
        callback();
    }
}
);

----

- Organize your file system.

- Files and folders should match namespacing.

- Follow architectural pattern (MVC or MVVM).

- Abstraction!

- Development loader / Production builder.

=== Too much work to return

* Make it easy!

* *This code is not wrong but could be better*

[source,javascript]
----
testSomeVal: function(someVal) {
        if (someVal <= 2) {
            return true;
        } else {
            return false;
        }
    }
----

* *We are starting to get there.*

[source,javascript]
----
testSomeVal: function(someVal) {
        return (someVal <= 2) ? true : false;
    }
----


* *Yup, this is it !*

[source,javascript]
----
 testSomeVal: function(someVal) {
        return someVal <= 2; // May be hard to read at first glance.
    }


    testSomeVal: function(someVal) {
        return (someVal <= 2); // Add brances for readability
    }
----



=== Comments or Documentation

*Bad practice*

- No comments

- Variables with unmeaningful names

- Impossible to figure out what is the intent of this code


[source,javascript]
----
var bs_note = 1;
var arr_p = new Array();
for (var j=0; j<6; j++)
{
	if (!isNaN(tmp[j] && bs_note)
	{
		arr_p[j] = '<div class=\"oo-str\"></div>';
		bs_note = 8;
	}
	else if (!bs_note && isNaN(tmp[j]) && tmp[j] != 'x')
	{
		arr_p[j] = '<div class=\"b-str\"></div>';
	}
	else if (tmp[j] = 'x')
	{
		arr_p[j] = '<div class=\"x-str\"></div>';
	}
	else
	{
		arr_p[j] = '<div class=\"o-str\"></div>';
	}
}
----

*Best practice*

- Comment top-level structures.

- Use meaningful names : "Self-commenting" code.

- Add notes whenever logic is not obvious.

* Build your docs into a searchable tool.

- JSDuck – https://github.com/senchalabs/jsduck/wiki[https://github.com/senchalabs/jsduck/wiki]

- API documentation generator for Sencha.

image::images/devon4sencha-badPractices/bad-practices/js-duck.png[Documentation 2,align="center",width="250",link="images/devon4sencha-badPractices/bad-practices/js-duck.png"]

=== Operators

Use "===" "!==" instead of "==" "!="

* Comparator operations

- When you receive data in a json structure and you are not sure about what you are getting you should be more restrictive.

image::images/devon4sencha-badPractices/bad-practices/comparator-operation.png[Operators,width="450",link="images/devon4sencha-badPractices/bad-practices/comparator-operation.png"]

=== Be lazy

* Bad practice: Initialization of all three panels

[source,javascript]
----
{
    xtype: 'container',
    layout: 'card',
    items: [{
        xtype: 'panel',
        title: 'Card One'
    }, {
        xtype: 'panel',
        title: 'Card Two'
    }, {
        xtype: 'panel',
        title: 'Card Three'
    }]
}
----


* Best practice

- Lazy initialization: Add items/views only when necessary

- Lazy rendering: Save the browser some time!

- Reuse things: Save yourself some time!

image::images/devon4sencha-badPractices/bad-practices/bill-gate-says.png[Be lazy 2,align="center",width="250",link="images/devon4sencha-badPractices/bad-practices/bill-gate-says.png"]

=== Knowing this

* This

- Describes the actual object application is executing

- Defines context and scope.

* Two rules for this:

1. When a function is executed via a *var* reference, the default execution context ("this") is *window*

2. When a function is executed via an object key, the execution context ("this") is the object.


[source,javascript]
----
var myFn = function() {
    console.log(this)
};
myFn();
----

[source,javascript]
----
var person = {
    name: 'jay',
    getName: function() {
        console.log(this);
    }
};
person.getName();
----

=== Additional resources

* "Maintainable JavaScript" by Nicholas Zacha

-  http://www.slideshare.net/nzakas/maintainable-javascript-2012

* "Code Conventions for JS" by Douglass Crockford

-  http://javascript.crockford.com/code.html

* "JavaScript Performance Tips & Tricks" by Grgur Grisogono

-  http://moduscreate.com/javascript-performance-tips-tricks/