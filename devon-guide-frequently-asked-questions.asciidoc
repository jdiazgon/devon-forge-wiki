:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing


== Frequently Asked Questions (FAQ)

=== Server

==== Data Base

===== Can you connect two databases in a single OASP4J project ?

You can create two _Spring_ active profiles, one for each database, in `oasp4j\samples\core\src\main\resources\config`. If , for instance , the databases that you are using are _MYSQL_ and _MSSQL_ , you can create two Spring active profiles namely `application-myssql.properties` and `application-mssql.properties` and follow the instructions below

1. Define connection details in `application-mysql.properties` and `application-mssql.properties`. Make sure the entry for flyway is not present in the files.

2. Comment the entry 'spring.profiles.active=h2mem' in `oasp4j\samples\core\src\main\resources\application.properties`.

3. Add the entries for the spring active profiles that you have created.
`spring.profiles.active=mysql,mssql`.

4. Comment the entry `spring.profiles.active=junit` in `oasp4j\samples\core\src\test\resources\`.

==== Security

===== How to disable Spring Boot Security?

*Disable security for the services*

In case, you want to disable the default security filter of roles, to have full access to the services of the sample application, you must introduce the following changes:

*Modify the _unsecuredResources_*

In the _BaseWebSecurityConfig.java_ class located in the `src/main/java/io.oasp.gastronomy.restaurant/general/service/impl/config/BaseWebSecurityConfig.java` folder of the _core_ project, add the rest services path to the _unsecuredResources_

[source,java]
----
String[] unsecuredResources =
    new String[] { "/login", "/security/**", "/services/rest/login", "/services/rest/logout", "/services/rest/**" };
----

*Disable CSRF protection*

Also, in _BaseWebSecurityConfig.java_

- comment the CsrfRequestMatcher
[source,java]
----
// .csrf().requireCsrfProtectionMatcher(new CsrfRequestMatcher()).and()
----

- add right after
[source,java]
----
.csrf().disable()
----

In the _CsrfRequestMatcher.java_ class in _`src/main/java/io.oasp.gastronomy.restaurant/general/common/impl/security`, change _PATH_PREFIXES_WITHOUT_CSRF_PROTECTION_ to
[source,java]
----
private static final String[] PATH_PREFIXES_WITHOUT_CSRF_PROTECTION = { "/login", "/logout", "/services/rest/**", "/websocket" };
----

*Disable the Global Method Security*

In the _SpringBootApp.java_ class, located in `src/main/java/io.oasp.gastronomy.restaurant`, change (to _false_) the _EnableGlobalMethodSecurity_ annotation.

[source,java]
----
@EnableGlobalMethodSecurity(jsr250Enabled = false)
----

*Check the services access*

Now, run the app (Right click over _SpringBootApp.java_ class and select _Run As_ > _Java Application_) and try to access  the rest service through a browser:

[source,url]
----
http://localhost:8081/oasp4j-sample-server/services/rest/tablemanagement/v1/table/101
----

Should return a response similar to

[source,json]
----
{"id":101,"modificationCounter":1,"revision":null,"waiterId":null,"number":1,"state":"OCCUPIED"}
----

*Disable Login*

In addition to the previous section, if you also want to disable the security login of the sample application, you only need to delete/comment the content of the _configure_ method of the _BaseWebSecurityConfig.java_ class.

[source,java]
----
  @Override
  public void configure(HttpSecurity http) throws Exception {

  }
----

Doing that, you will directly access the _Welcome_ page of the app without the login process.

*_Load denied by X-Frame error_ when trying to upload a file to the server from the client*

This error is thrown by the spring security component in the server in order to avoid link:https://en.wikipedia.org/wiki/Clickjacking[clickjacking] attacks. You can override this configuration in the spring security config adding the following:

[source,xml]
---
<http>
    <headers>
        <frame-options policy="SAMEORIGIN"/>
    </headers>
</http>
---

The available options for _policy_ are: _DENY_, _SAMEORIGIN_ and _ALLOW-FROM_. You can get more information about this, link:http://docs.spring.io/spring-security/site/docs/3.2.0.CI-SNAPSHOT/reference/html/appendix-namespace.html#nsa-frame-options[here] and link:http://docs.spring.io/autorepo/docs/spring-security/3.2.0.CI-SNAPSHOT/reference/html/headers.html[here]

=== Client

==== Devon4Sencha

===== How to disable _defeat cache_ functionality?
When working with Sencha application, all the required files are loaded with an additional parameter _dc=[random number] that will disallow debugging properly on the browser developer tools because breakpoints will be lost on reload.

In order to disable this functionality, you have to add the following on the app.json of your Devon4Sencha application:

[source,json]
----
    "loader": {
          "cache": true
    },
----


=== Configuration issues

==== Maven

[NOTE]
====
Remember to verify the proxy configuration in the `conf/.m2/settings.xml` file and the Firewall configuration of your machine as first steps, if you have connection issues using Maven.
====

===== Non-resolvable import POM: Project dependencies download failure

*Error details*

 - Could not transfer artifact from/to central ValidatorException

    [source,batch]
    ----
    Non-resolvable import POM: Could not transfer artifact org.springframework.boot:spring-boot-dependencies:pom:1.3.3.RELEASE from/to central (https://repo.maven.apache.org/maven2): sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    ----

 - Maven Dependency Problem: Failed to read artifact descriptor / Missing artifact

*Solution*

- Try changing in the `conf\.m2\settings.xml` file of your distribution the URL of the remote repo from _https_ to plain _http_ : http://repo.maven.apache.org/maven2

- As an alternative, you also can include a `<mirror>` tag inside `<mirrors>` with the following structure:
[source,xml]
----
<mirror>
    <id>UK</id>
    <name>UK Central</name>
    <url>http://uk.maven.org/maven2</url>
    <mirrorOf>central</mirrorOf>
</mirror>
----

[NOTE]
====
If the project is already imported in Eclipse then update the project:
Right click on project > Maven > Update Project > check the Force update of Snapshot/Releases checkbox > Ok
====

===== How to install the Devon IP Modules?

If you have any problems resolving the dependencies or accessing to the Devon IP modules, you can install them directly in your distribution. To achieve that, you only need to open a distribution console launching the 'console.bat' script and then go to following path `workspaces\examples\devon\modules` and use the _install_ command of _Maven_.

[source,batch]
----
D:\Devon-dist\workspaces\examples\devon\modules>mvn install

[...]

[INFO] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[INFO] Reactor Summary:
[INFO]
[INFO] devonfw-modules .................................... SUCCESS [  0.565 s]
[INFO] devonfw-foo ........................................ SUCCESS [  2.969 s]
[INFO] devonfw-reporting .................................. SUCCESS [ 10.022 s]
[INFO] devonfw-winauth .................................... SUCCESS [  3.069 s]
[INFO] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[INFO] BUILD SUCCESS
[INFO] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[INFO] Total time: 17.002 s
[INFO] Finished at: 2016-11-22T15:39:10+01:00
[INFO] Final Memory: 15M/40M
[INFO] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
----

This command will install the available Devon IP modules of your distribution locally, so you will be able to start using them on your Devon application.

===== _Address is invalid on the local machine, or port is not valid on remote machine_ error

This error is related mainly to a network problem.

In some environments, Maven seems to be attempting to use an IPv6 address to do the HTTP calls, when either the OS doesn't support it, or is not set up properly to handle it.

You can force Maven (that is a Java tool) to use an IPv4 address with the property.

`-Djava.net.preferIPv4Stack=true`

So, in order to use that property, you need to add it to your Maven command:

[source,bash]
----
mvn -Djava.net.preferIPv4Stack=true {{lifecycle phase}}
----

==== Spring Boot

===== How to set debug mode for logs?
For Spring Boot applications, the easiest way is to edit the `[project]\main\resources\application.properties` file and add the following property:

  logging.level.=DEBUG

[NOTE]
====
The accepted modes for logging level are: TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
====

===== Recommended usage for annotations

As a Devon design principle is recommended to use the annotations in _private field_ rather than _property access_ as it provides a better encapsulation for a similar performance.

*Exceptions*

However, you can find an exception to that principle in the case of _Lazy loading in Hibernate_. In this case, using a _field access_ to get the _Id_ of an Entity Hibernate initializes a lazy proxy that triggers an SQL query that loads the entire entity from DB, what may cause an important impact over the performance of the application.

So, in this case, instead of using the `@Id` annotation with a private field

[source,java]
----

@Id
private long id;

----

the alternative might be to use the _property access_ using the annotation directly over the _getter_

[source,java]
----

  private long id;

 
  @Id
  public String getId() {
    return this.id;
  }

----


Although, you can also find http://blog.xebia.com/jpa-implementation-patterns-field-access-vs-property-access/[other solutions] to avoid the _property access_.

You can find more information about this topic here:

- https://www.yammer.com/capgemini.com/#/Threads/show?threadId=696430156&search_origin=global&scoring=linear1Y-prankie-group-private-higher&match=any-exact&search_sort=relevance&page=1&group_ids=5030942&search=inject[Yammer discussion]

- https://forum.hibernate.org/viewtopic.php?f=1&t=996502[Hibernate forum]

- http://blog.xebia.com/jpa-implementation-patterns-field-access-vs-property-access/[JPA implementation patterns: Field access vs. property access]

- https://www.catalysts.cc/en/wissenswertes/ejb-annotations-hibernate-lazy-loading/[EJB 3.0 Annotations mit Hibernate Lazy Loading]

- http://chstath.blogspot.com.es/2007/05/field-access-vs-property-access-in-jpa.html[Field access vs Property access in JPA]


==== Tomcat

===== _java.lang.NoSuchMethodError_ error when deploying Devon app on Tomcat 7

*Error details*

[source,batch]
----
java.lang.NoSuchMethodError: javax.servlet.ServletContext.getVirtualServerName()Ljava/lang/String;
----

*Solution*

Add below dependencies in the _pom.xml_ file of the _core_ project

[source,xml]
----
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
    </exclusions>
</dependency>

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-tomcat</artifactId>
    <scope>provided</scope>
</dependency>
----


=== Crosscutting concerns

===== Which is the format of a REST request?

Using Spring Boot and with the default code structure and practices, you can make a GET request to the following url:

  http://[server]:[port]/services/rest/[service name]/[service version]/[operation]/[param1]

For example:

  http://localhost:8080/services/rest/tablemanagement/v1/table/101

Take into account that, for an app deployed to a traditional web server (WAR/EAR packaged), it is usually prepended with the context name of the application, for example:

  http://oasp-ci.cloudapp.net/oasp4j-sample/services/rest/tablemanagement/v1/table
