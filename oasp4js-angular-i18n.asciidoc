:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== OASP4JS i18n internationalization

Nowadays, a common scenario in front-end applications is to have the ability to translate labels and locate numbers, dates, currency and so on when the user clicks over a language selector or similar. OASP4JS and specifically Angular has a default mechanism in order to fill the gap of such features, and besides there are some wide used libraries that make even easier to translate applications.

More info at link:https://angular.io/guide/i18n[Angular i18n official documentation]

== OASP4JS i18n approach

The official approach could be a bit complicated, therefore the recommended one is to use the recommended library **NGX Translate** from http://www.ngx-translate.com/.

=== Install NGX Translate

In order to include this library in your OASP4JS **Angular >= 4.3** project you will need to execute in a terminal:

[source,bash]
----
$ npm install @ngx-translate/core @ngx-translate/http-loader --save 
# or if you use yarn
$ yarn add @ngx-translate/core @ngx-translate/http-loader
----

- **@ngx-translate/core** is the core library to provide i18n capabilities.
- **@ngx-translate/http-loader** is a loader for ngx-translate that loads translations using http.

=== Configure NGX Translate

Depending on the volume of the OASP4JS application we will include the NGX Translate library in the `app.module.ts` or in the `core.module.ts` transversal to the application.

[source,typescript]
----
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule, HttpClient } from '@angular/common/http';
import { TranslateModule, TranslateLoader } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
----

Next, an exported function for factories has to be created:

[source,typescript]
----
// AoT requires an exported function for factories
export function HttpLoaderFactory(http: HttpClient) {
    return new TranslateHttpLoader(http);
}

@NgModule({
    imports: [
        BrowserModule,
        HttpClientModule,
        TranslateModule.forRoot({
            loader: {
                provide: TranslateLoader,
                useFactory: HttpLoaderFactory,
                deps: [HttpClient]
            }
        })
    ],
    bootstrap: [AppComponent]
})
export class AppModule { } // or CoreModule
----

The `TranslateHttpLoader` also has two optional parameters:

- prefix: string = "/assets/i18n/"
- suffix: string = ".json"

By using those default parameters, it will load the translations files for the lang "en" from: `/assets/i18n/en.json`. In general, any translation file will loaded from the `/assets/i18n/` folder.

Those parameters can be changed in the `HttpLoaderFactory` method just defined. For example if you want to load the "en" translations from `/public/lang-files/en-lang.json` you would use:

[source,typescript]
----
export function HttpLoaderFactory(http: HttpClient) {
    return new TranslateHttpLoader(http, "/public/lang-files/", "-lang.json");
}
----

For now this loader only support the json format.

[NOTE]
If you're still on Angular < 4.3, please use `Http` from `@angular/http` with `http-loader@0.1.0`.

=== Usage
In order to translate any label in any HTML template you will need to use the `translate` pipe available:

[source,html]
----
{{ 'HELLO' | translate }}
----

An **optional** parameter from the component TypeScript class could be included as follows:

[source,html]
----
{{ 'HELLO' | translate:param }}
----

So, `param` has to be defined in the class. The default language used is defined as follows:

[source,typescript]
----
// imports 

@Component({
    selector: 'app',
    template: `
        <div>{{ 'HELLO' | translate }}</div>            // Without param
        <div>{{ 'HELLO' | translate:param }}</div>      // With param
    `
})
export class AppComponent {
    // This param will be used in the translation
    param = { value: 'world' };

    constructor(translate: TranslateService) {
        // this language will be used as a fallback when a translation isn't found in the current language
        translate.setDefaultLang('en');

        // the lang to use, if the lang isn't available, it will use the current loader to get them
        translate.use('en');
    }
}
----

In order to change the language used you will need to create a button or selector that calls the `this.translate.use(language: string)` method from `TranslateService`. For example:

[source,typescript]
----
toggleLanguage(option) {
    this.translate.use(option);
}
----

The translations will be included in the `en.json`, `es.json`, `de.json`, etc. files inside the `/assets/i18n` folder. For example `en.json` would be (using the previous param):

[source,json]
----
{
    "HELLO": "hello"
}
----

Or with an **optional param**:

[source,json]
----
{
    "HELLO": "hello {{value}}"
}
----

The `TranslateParser` understands nested JSON objects. This means that you can have a translation that looks like this:

[source,json]
----
{
    "HOME": {
        "HELLO": "hello {{value}}"
    }
}
----

In order to access access the value, use the dot notation, in this case `HOME.HELLO`.

=== Service translation 

If you need to access translations in any component or service you can do it injecting the `Translateservice` into them:

[source,typescript]
----
translate.get('HELLO', {value: 'world'}).subscribe((res: string) => {
    console.log(res);
    //=> 'hello world'
});
----

[IMPORTANT]
You can find a complete example at https://github.com/oasp/oasp4js-application-template. 

Please, visit https://github.com/ngx-translate/core for more info.