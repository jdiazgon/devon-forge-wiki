:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== WebSocket

WebSocket is a protocol providing full-duplex communication channels over a single TCP connection. WebSocket is designed to be implemented in web browsers and web servers, but it can be used by any client or server application. 

The WebSocket Protocol is an independent TCP-based protocol. Its only relationship to HTTP is that its handshake is interpreted by HTTP servers as an Upgrade request. The WebSocket protocol makes more interaction between a browser and a website possible, facilitating the real-time data transfer from and to the server. For more information you can visit https://en.wikipedia.org/wiki/WebSocket[wikipedia].

=== WebSocket configuration
In Devonfw a websocket endpoint is configured within the business package as a Spring configuration class. We can find an example in the _salesmanagement_ use case of the OASP4J example application.
 
[source, java]
----
package io.oasp.gastronomy.restaurant.salesmanagement.websocket.config;

...

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {

  @Override
  public void configureMessageBroker(MessageBrokerRegistry config) {

    config.enableSimpleBroker("/topic");
    config.setApplicationDestinationPrefixes("/sample");
  }

  @Override
  public void registerStompEndpoints(StompEndpointRegistry registry) {

    registry.addEndpoint("/websocket/positions").withSockJS();
  }
  
  ...
}
----

The _@Configuration_ annotation indicates that this is a Spring configuration class.

The _@EnableWebSocketMessageBroker_ annotation makes Spring Boot registering this endpoint and enables the WebSocket support.

The _AbstractWebSocketMessageBrokerConfigurer_ implements the _WebSocketMessageBrokeConfigurer_ interface that allows to customize the imported configuration.

The `configureMessageBroker()` method overrides the default method in `WebSocketMessageBrokerConfigurer` to configure the message broker. It starts by calling `enableSimpleBroker()` to enable a simple memory-based message broker to carry the messages back to the client on destinations prefixed with "/topic". The `setApplicationDestinationPrefixes` defines the application name using which browser and server will communicate over WebSocket.

The `registerStompEndpoints` registers the "/websocket/positions" endpoint and enables SockJS fallback options so that alternative messaging options may be used if WebSocket is not available. SockJS is a Javascript library which provides websocket like object for browsers and provides cross browser compatibility and support for STOMP protocol. SockJS works in the way that we need to provide URL to connect with message broker and then get the stomp client to communicate. https://stomp.github.io/[STOMP] is Streaming Text Oriented Messaging Protocol. A STOMP client communicates to a message broker which supports STOMP protocol. STOMP uses different commands like connect, send, subscribe, disconnect, etc. to communicate.

You can see a complete example of how to build an interactive web application using WebSocket https://spring.io/guides/gs/messaging-stomp-websocket/[here] 

