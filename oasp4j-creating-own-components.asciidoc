:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Create your own Components

=== Basics

After you have completed <<Creating your First Application,your own OASP4J app>> creation, we are going to create our first app component.

Going back to our example application, <<Design Philosophy : Jump the Queue,Jump the Queue>>, we need to provide two basic functionalities:

- register a user (returning an access code).

- show the registered queue members.

To accomplish that we are going to work over two entities: _Visitor_ and _AccessCode_.

image::images/oasp4j/4.Components/visitor-accesscode.png[width="250", link="images/oasp4j/4.Components/visitor-accesscode.png"]

The _Visitor_ will be defined with: _name_, _email_ and _phone_.

The _Access Code_ will be represented as a _code_ and a _date_.

In addition, we will have to represent the https://en.wikipedia.org/wiki/One-to-one_(data_model)[one to one] relation between both entities.

Now is the moment to decide the components of our app. The complexity of the functionality would allow us to create only one component for managing both entities. But ,in order to clarify the example, we are going to create also two components, one for _Visitors_ and other for _Access Codes_.

[NOTE]
====
However if you feel more comfortable managing both entities in a single component you can also do it in that way. The results will be the same and the only difference will be related with the structure of the elements and the distribution of the code.
====

==== The database

In the projects created with the _Oasp4j_ archetype, we already have a complete database schema that we can use as a model to create our own. By default we are going to work over the http://www.h2database.com/html/main.html[H2] database engine provided in the _Oasp4j_ applications, although you can use other database alternatives for this exercise. 

Open the _/jumpthequeue-core/src/main/resources/db/migration/h2/V0001__R001_Create_schema.sql_ and delete all the tables (except _BinaryObject_ and _RevInfo_, that are used internally by default).

===== _Visitor_ table

Now we can add our first table _Visitor_. In the case of _Jump the Queue_, the visitors will provide: _name_, _email_ and _phone_ to obtain an _access code_. So we need to represent that data in our table 

[source, sql]
----
CREATE TABLE Visitor(
  id BIGINT NOT NULL AUTO_INCREMENT,
  modificationCounter INTEGER NOT NULL,
  name VARCHAR(255),
  email VARCHAR(255),
  phone VARCHAR(255),
  idCode BIGINT,
  CONSTRAINT PK_Visitor PRIMARY KEY(id)
);
----

- _id_: the id for each visitor.

- _modificationCounter_: used internally by https://en.wikipedia.org/wiki/Java_Persistence_API[JPA] to take care of the https://en.wikipedia.org/wiki/Optimistic_concurrency_control[optimistic locking] for us.

- _name_: the visitor's name.

- _email_: the visitor's email.

- _phone_: the visitor's phone.

- _idCode_: the relation with the _Access Control_ entity represented with an id.

===== _Access Code_ table

As second table we will represent the _Access Code_ that will be formed by the _code_ itself and the related date. 

[source, sql]
----
CREATE TABLE AccessCode(
  id BIGINT NOT NULL AUTO_INCREMENT,
  modificationCounter INTEGER NOT NULL,
  code VARCHAR(5),
  dateAndTime TIMESTAMP,
  idVisitor BIGINT,
  CONSTRAINT PK_AccessCode PRIMARY KEY(id),
  CONSTRAINT FK_AccessCode_idVisitor FOREIGN KEY(idVisitor) REFERENCES Visitor(id)
);
----

- _id_: the id for each code.

- _modificationCounter_: used internally by https://en.wikipedia.org/wiki/Java_Persistence_API[JPA] to take care of the https://en.wikipedia.org/wiki/Optimistic_concurrency_control[optimistic locking] for us.

- _code_: the _access code_ that we are going to provide to the user after registration.

- _dateAndTime_: the date related to the _access code_.

- _idVisitor_: the relation with the _Visitor_ entity.


===== Mock data

Finally we can provide a certain amount of mock data to start our app. In the _/jumpthequeue-core/src/main/resources/db/migration/V0002__R001_Master_data.sql_ script replace the current _inserts_ with ours

[source,sql]
----
INSERT INTO Visitor (id, modificationCounter, name, email, phone, idCode) VALUES (1, 1, 'Jason', 'jason@mail.com', '123456', 1);
INSERT INTO Visitor (id, modificationCounter, name, email, phone, idCode) VALUES (2, 1, 'Peter', 'peter@mail.com', '789101', 2);


INSERT INTO AccessCode (id, modificationCounter, code, dateAndTime, idVisitor) VALUES (1, 1, 'A01', CURRENT_TIMESTAMP + (60 * 60 * 24 * 5), 1);
INSERT INTO AccessCode (id, modificationCounter, code, dateAndTime, idVisitor) VALUES (2, 1, 'A02', CURRENT_TIMESTAMP + (60 * 60 * 24 * 5), 2);
----

[NOTE]
====
You can delete the scripts _V0003__R001_Add_blob_table_and_data.sql_ and _V0004__R001_Add_batch_tables.sql_ as we are not going to use them.
====

==== The _core_ of the components

Now that we have defined the database for our entities is the moment to start creating the code of the related components.

We are going to use _Cobigen_ to generate the component structure. That means that, as we already commented, we can generate all the structure and layers starting from a _core_ element: a simple _Plain Old Java Object_ that represents our _Entity_. So, in order to use _Cobigen_, we must create our entities in the expected location: `MyEntitymanagement.dataaccess.api`.

===== _Visitor_ component

To implement the component we will need to define a _VisitorEntity_ to connect and manage the data of the _Visitor_ table in the database.

The name for this component will be `visitormanagement` and for the entity `VisitorEntity`.

From the root package of the project create the following packages:

----
- visitormanagement
-- dataaccess
--- api
---- 

image::images/oasp4j/4.Components/visitor_component_packages1.png[ link="images/oasp4j/4.Components/visitor_component_packages1.png"]

image::images/oasp4j/4.Components/visitor_component_packages2.png[width="450", link="images/oasp4j/4.Components/visitor_component_packages2.png"]

Now create a new java class in the just created `visitormanagement.dataaccess.api` package

image::images/oasp4j/4.Components/visitor_component_entity1.png[ link="images/oasp4j/4.Components/visitor_component_entity1.png"]

and call it _VisitorEntity_

image::images/oasp4j/4.Components/visitor_component_entity2.png[width="450", link="images/oasp4j/4.Components/visitor_component_entity2.png"]

In the entity, we are going to add the fields to represent the data model, so our entity should contain:

[source,java]
----
  private String name;
  
  private String email;
  
  private String phone;

  private AccessCodeEntity code;
----

[NOTE]
====
We are not adding the _id_ nor the _modificationCounter_ because _Cobigen_ will solve this for us.

The _AccessCodeEntity_ is throwing an error as it is not created yet. We will solve it in next step.
====

Now we need to declare our entity as a JPA entity with `@Entity` annotation (_javax.persistence.Entity_) at class level.

Also at class level, to map the entity with the database table, we will use the _@Table_ annotation (_javax.persistence.Table_) defining the name of our already created _Visitor_ table: `@Table(name = "Visitor")`

[source, java]
----
@Entity
@Table(name = "Visitor")
public class VisitorEntity
----

Now we have to declare the _getters_ and _setters_ of the fields of our entity. We can do it manually or using Eclipse with the option  

image::images/oasp4j/4.Components/visitor_component_gettersandsetters.png[ link="images/oasp4j/4.Components/visitor_component_gettersandsetters.png"]

To represent the _one to one_ relation with the _Access Control_ entity we must use the JPA annotations `@OneToOne` and `@JoinColumn` in the _getCode()_ method.

[source,java]
----
  @OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
  @JoinColumn(name = "idCode")
  public AccessCodeEntity getCode(){
      ...
  }
----

The result of current implementation for _VisitorEntity_ class is

[source,java]
----
package com.cap.jumpthequeue.visitormanagement.dataaccess.api;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

@Entity
@Table(name = "Visitor")
public class VisitorEntity {

  private String name;

  private String email;

  private String phone;

  private AccessCodeEntity code;

  /**
   * @return name
   */
  public String getName() {

    return this.name;
  }

  /**
   * @param name new value of {@link #getname}.
   */
  public void setName(String name) {

    this.name = name;
  }

  /**
   * @return email
   */
  public String getEmail() {

    return this.email;
  }

  /**
   * @param email new value of {@link #getemail}.
   */
  public void setEmail(String email) {

    this.email = email;
  }

  /**
   * @return phone
   */
  public String getPhone() {

    return this.phone;
  }

  /**
   * @param phone new value of {@link #getphone}.
   */
  public void setPhone(String phone) {

    this.phone = phone;
  }

  /**
   * @return code
   */
  @OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
  @JoinColumn(name = "idCode")
  public AccessCodeEntity getCode() {

    return this.code;
  }

  /**
   * @param code new value of {@link #getcode}.
   */
  public void setCode(AccessCodeEntity code) {

    this.code = code;
  }

}

----

[NOTE]
====
The compilation errors related to _AccessCodeEntity_ will be solved when we create the related entity in next step.
====

===== _AccessCode_ component

We are going to repeat the same process for the _AccessCode_ component. So we will end up with the following structure

image::images/oasp4j/4.Components/jumpthequeue_emptycomponents.png[ link="images/oasp4j/4.Components/jumpthequeue_emptycomponents.png"]

And the content of the _AccessCodeEntity_ before start using _Cobigen_ will be

[source,java]
----
package com.cap.jumpthequeue.accesscodemanagement.dataaccess.api;

import java.sql.Timestamp;

import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.cap.jumpthequeue.visitormanagement.dataaccess.api.VisitorEntity;

@Entity
@Table(name = "AccessCode")
public class AccessCodeEntity {

  private String code;

  @Temporal(TemporalType.TIMESTAMP)
  private Timestamp dateAndTime;

  private VisitorEntity visitor;

  /**
   * @return code
   */
  public String getCode() {

    return this.code;
  }

  /**
   * @param code new value of {@link #getcode}.
   */
  public void setCode(String code) {

    this.code = code;
  }

  /**
   * @return dateAndTime
   */
  public Timestamp getDateAndTime() {

    return this.dateAndTime;
  }

  /**
   * @param dateAndTime new value of {@link #getdateAndTime}.
   */
  public void setDateAndTime(Timestamp dateAndTime) {

    this.dateAndTime = dateAndTime;
  }

  /**
   * @return visitor
   */
  @OneToOne
  @JoinColumn(name = "idVisitor")
  public VisitorEntity getVisitor() {

    return this.visitor;
  }

  /**
   * @param visitor new value of {@link #getvisitor}.
   */
  public void setVisitor(VisitorEntity visitor) {

    this.visitor = visitor;
  }

}
----

With this we have finished preparing the core of our components. Now we can start using _Cobigen_ to generate all the remaining structure (services, layers, dao's, etc.).

[NOTE]
====
Now we can solve the compilation errors related to `AccessCodeEntity` in the `VisitorEntity.java` class.
====