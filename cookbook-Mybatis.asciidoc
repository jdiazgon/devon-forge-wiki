:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Integrate Mybatis module

=== Introduction

http://www.mybatis.org/mybatis-3/[MyBatis] SQL mapper framework makes it easier to use a relational database with object-oriented applications. MyBatis couples objects with stored procedures or SQL statements using a XML descriptor or annotations. 
MyBatis is a fork of iBATIS 3.0 and is maintained by a team that includes the original creators of iBATIS.

=== Include MyBatis in a Devon project

The module provides you a handle to a mybatis framework, and a bunch of predefined operations for managing the objects inside the service, for your Devon applications.
To implement the module in a Devon project, you must follow these steps:

==== Adding the dependency in your project

Include the module dependency in your pom.xml, verifying that the _version_ matches the last available version of the module
[source,xml]
----
<dependency>
  <groupId>com.capgemini.devonfw.modules</groupId>
  <artifactId>devonfw-mybatis</artifactId>
  <version>2.2.1-SNAPSHOT</version>
</dependency>
<dependency>
  <groupId>org.mybatis.spring.boot</groupId>
  <artifactId>mybatis-spring-boot-starter</artifactId>
  <version>1.3.1</version>
</dependency>
<dependency>
  <groupId>org.mybatis.spring.boot</groupId>
  <artifactId>mybatis-spring-boot-starter-test</artifactId>
  <scope>test</scope>
  <version>1.3.0</version>
</dependency>
----

[WARNING]
====
The IP modules of Devonfw are stored in https://www.jfrog.com/artifactory/[Artifactory]. In case, you do not have access to that repository, as the modules are included in the Devonfw distribution, you can install them manually. To do so, open a Devonfw command line (_console.bat_), go to `Devon-dist\workspaces\examples\devon\modules` and execute the command `mvn install`.
If the project is already imported in Eclipse then update project: Right click on _project_ > _Maven_ > _Update Project_ > check the _Force update of Snapshot/Releases_ checkbox > _Ok_
====

==== Basic implementation

===== Class Diagram for Devonfw Mybatis Module

image::images/integrating-mybatis/mybatis_devonfw_classdiagram.jpg[, width="450", link="images/integrating-mybatis/mybatis_devonfw_classdiagram.jpg"] 

===== Add the Mapper scanner for dependency injection. To do so, you must add the following annotations in the _SpringBoot_ main class:

[source,java]
----
@MapperScan({ "io.oasp.application.mtsj.<component name>.mapper", "io.oasp.application.mtsj.<component name>.mapper" })
public class MyBootApp {

    [...]
}
----

===== To access the module functionalities, 

====== Create DAO class - <Component>MybatisDao that extends AbstractGenericMybatisDao, 

====== Autowired Mapper 

====== Add constructor

[source,java]
----
@Service
public class <Component>MybatisDao<T, PK> extends AbstractGenericMybatisDao<T, PK> {

    @Autowired
  private <Component>Mapper mapper;
  
   @Autowired
  public <Component>MybatisDao(<Component>Mapper myBatisMapper) {
    super(myBatisMapper);
  }
  
  Add your methods here.

    [...]

}
----

===== Create a (Interface)Mapper, and extends GenericMybatisMapper
[source,java]
----
public interface <Component>Mapper extends GenericMybatisMapper<<Component>MybatisEntity, Long> {

    @Options(useGeneratedKeys = true)
  @Insert("Insert Query")
  void insert(<Component>MybatisEntity <Component>MybatisEntity);
  
  @Delete("delete query")
  void delete(long id);
 
 //This search query should be placed in mapper.xml
List<<component>MybatisEntity> fetch(@Param("searchCriteria") SearchCriteria searchCriteria, RowBounds rowBounds); 
  
  Add other methods here.

    [...]

}
----
==== Accessing <Component>MybatisDao in logic(<component>Impl)

[source,java]
----
public class <Component>Impl {

	//Autowired Dao
    @Autowired
  private <Component>MybatisDao <Component>MybatisDao;

  
  use the dao in the methods.

    [...]

}
----
===== Using cobigen
[source,java]
----
Create an Entity with the Name <component>MybatisEntity.java