:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Devon4sencha

=== Introduction

image::images/client-gui-sencha/sencha.png[,align="center",width="200",Sencha,link="images/client-gui-sencha/sencha.png"]
Devon4Sencha is an alternative view layer for web applications developed with Devon Framework. It is based on the proprietary libraries developed by http://www.sencha.com[Sencha]. As it requires a license for commercial applications it won't be provided as Open Source (The companion OASP project).

These libraries provide support for creating SPA (Single Page Applications) with a very rich set of components for both desktop and mobile. They also provide a clear programming model based on the MVC and MVVM patterns. Sencha also has an excellent documentation for all the APIs in the framework.  Visit their http://www.sencha.com[website] for more examples on this.

Devon4Sencha builds on top of Sencha libraries to further standardize the way applications are created and to seamlessly integrate with the back-end application. We provide:

* Basic application template
* Basic layout for a tabbed based interface
* Security (CORS)
* Login and session management
* Internationalization
* Better organization of source code (following Sencha MVC pattern)
* Ajax communication simplification

Devon4sencha uses the latest Sencha Version 6.   The most important change in the version 6 is that it merges two frameworks: Ext JS (web) and Sencha Touch (mobile) into one single framework.
Now, in Ext JS 6, you can maintain a single code. For some of the views, you may need to have a separate view code, but there will be a lot of shared code.

They merged the common code and put them as a core framework, and they brought a concept called toolkit. A toolkit is a package with visual components, such as button, panels, and so on. There are two toolkits: classic and modern. Ext JS
visual components are placed in the classic toolkit, and Sencha Touch components are placed in the modern toolkit.

You can simply choose the toolkit that you want to target. If you are writing an application that only targets mobile devices, you can choose modern, and if you are targeting only for desktop, then you can choose the classic toolkit.

=== The Universal Application

If you want to target both desktop and mobile devices, then in Ext JS 6, you can
create a universal application, which will use both the toolkits. Instead of adding
the preceding toolkit config mentioned before, you have to add the following builds
config section that specifies which build uses which toolkit and theme:

[source]
----
"builds": {
	"classic": {
		"toolkit": "classic",
		"theme": "theme-triton"
	},
	"modern": {
		"toolkit": "modern",
		"theme": "theme-neptune"
	}
},
----

The basic idea here is to have two set of toolkits in a single framework in order to
target the desktop and mobile devices. When building the application it will create two different bundles for classic and modern.

When accessing from a desktop, the classic bundle will be used. When accessing from a tablet/mobile the modern bundle will be selected.

The sample restaurant application is an example of an *universal* application targeting both toolkits.

=== Legal Considerations

Devon4Sencha is based on Sencha Javascript libraries that are not free and this has to be taken into consideration before starting with a project.

The license model for Sencha is "per developer" and each engagement should take care of having enough licenses for developers working on the view layer.

Client should be informed of this fact and may be provided with licenses also if they retain the IP for the project developed within Capgemini.