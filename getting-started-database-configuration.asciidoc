:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Database Configuration

In this tutorial, you will see how to configure your application to connect with a real database of your choice. Devonfw gives you a simple configuration, so that you just need to add the dependency of the database libraries, create a profile, set the information about your database in the profile and activate it, update the script files, if any, as per DB syntax.
All these steps need to be done in the generated (through oasp4j-template server archetype), xxx-core project.
By default, it comes with configured http://www.h2database.com/html/quickstart.html[h2] database. If you want to configure another database such as MySQL, MS SQL or PostGre SQL, refer below sections.

=== Add dependencies
Add Dependency for database in _pom.xml_ file. For example, to configure _mysql_ database, add the following dependency:

MySQL:
 
[source,xml]
----
<dependency>
 	<groupId>mysql</groupId>
 	<artifactId>mysql-connector-java</artifactId>
</dependency>
----

image::images/database-configuration/db-config1.png[,width="450",link="images/database-configuration/db-config1.png"]

*Note*: This driver should NOT be used in a production environment because of the license issues. See below for an alternative.

=== Create a Spring Profile

Spring Profile provides a way to segregate parts of your application configuration and make it only available in certain environments. In the above case, create a profile to your database configuration.

Create a file in `src/main/resources/config` named _application-{PROFILE_NAME}.properties_. The name of the profile isn't important. For this example, you can name it _application-mysql.properties_.

=== Set the database configuration

Add database configuration in _application-{PROFILE_NAME}.properties_ file. For example,

MySQL:
[source]
----
spring.jpa.database=mysql
spring.datasource.url=jdbc:mysql://localhost:3306/restaurant?user=root&password=root&connectTimeout=10000&socketTimeout=10000&autoReconnect=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
flyway.locations=classpath:db/migration,classpath:db/migration/MySQL
----

image::images/database-configuration/db-config2.png[,width="450",link="images/database-configuration/db-config2.png"]

=== Activate the new profile

To activate the new profile, update `src/main/resources/application.properties` file. Set _spring.profiles.active= profile-name_. In the above example, the profile-name is _mysql_. 
 
MySQL:
[source]
----
spring.profiles.active=mysql 
----

image::images/database-configuration/db-config3.png[,width="450",link="images/database-configuration/db-config3.png"]


=== Further Details on Database Configurations

==== MySQL

The use of the MySQL has already been illustrated in the above example. However, as mentioned, the GPL licensed (native) MySQL driver should *not* be used in a production environment. As an alternative, the free and liberally licensed "mariaDB" (a MySQL clone) library could be used. 

The dependency declaration consists of:

[source,xml]
----
<dependency>
    <groupId>org.mariadb.jdbc</groupId>
    <artifactId>mariadb-java-client</artifactId>
    <version>1.2.3</version>
</dependency> 
----

And the library can be used such as MySQL but with a slight change in the configuration:

[source]
----
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
----

==== PostgreSQL 

The dependency declaration consists of:

 <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
     <version>9.4-1206-jdbc41</version>
  </dependency>


Ultimately, the following configuration must be used in order to use the postgresql driver and database:
[source]
----
spring.jpa.database=postgresql
spring.datasource.url=jdbc:postgresql://localhost:5432/<db name>
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.username=postgres
spring.datasource.password=<password set at time of installation>
spring.datasource.driver-class-name=org.postgresql.Driver
flyway.locations=classpath:db/migration,classpath:db/migration/postgres
----

==== Microsoft MSSQL Server

The Microsoft JDBC drivers are *not* available on Maven Central; http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&id=11774[ they need to be downloaded from the Microsoft site.]
 
Once downloaded, they should be installed in the local Maven repository (_.m2_ folder on the local machine). It can be done with the following command:

[source,batch]
----
mvn install:install-file -DgroupId=com.microsoft.sqlserver -DartifactId=sqljdbc4 -Dversion=<version> -Dpackaging=jar -DgeneratePom=true -Dfile=<driver JAR file>
----

Once installed, the library must be added to the project's _pom.xml_ file. The dependency declaration should be something like

[source,xml]
----
 <dependency>
    <groupId>com.microsoft.sqlserver</groupId>
    <artifactId>sqljdbc4</artifactId>
    <version>4.0</version>
  </dependency>
----

Ultimately, the following configuration must be used in order to use the MSSQL server driver and database:

[source]
spring.jpa.database=sqlserver
spring.datasource.url=jdbc:sqlserver://<servername>:<port>;databaseName=<databasename>
spring.jpa.database-platform=org.hibernate.dialect.SQLServerDialect
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver


(Replace _root_ with your actual username / password)

For further information see: https://wiki.jasig.org/pages/viewpage.action?pageId=57578731[MS SQL Server and MS JDBC Driver ]

==== DB2

The dependency with DB2 is explained below:

[source,xml]
----
 <dependency>
              <groupId>com.ibm.db2.jcc</groupId>
              <artifactId>db2jcc4</artifactId>
              <version>10.1</version>
       </dependency>
       <dependency>
              <groupId>com.ibm.db2</groupId>
              <artifactId>db2jcc_license_cisuz</artifactId>
              <version>9.7</version>
       </dependency>
       <dependency>
              <groupId>com.ibm.db2</groupId>
              <artifactId>db2java</artifactId>
              <version>9.7</version>
       </dependency>
----

And the properties are explained below:

[source]
jdbc:db2://<server>:<port>/<dbalias>
spring.datasource.url=jdbc:db2://<server>/<port>:user=<user>;password=<password>; 
spring.jpa.database-platform=org.hibernate.dialect.DB2Dialect
spring.datasource.traceLevel=com.ibm.db2.jcc.DB2BaseDataSource.TRACE_ALL
spring.datasource.driver-class-name=com.ibm.db2.jcc.DB2Driver 


You can see that the credential properties are included in the URL. If you want to learn more about URL format, you can see http://www.ibm.com/support/knowledgecenter/SSEPGG_9.7.0/com.ibm.db2.luw.apdv.java.doc/src/tpc/imjcc_r0052342.html[SQLJ type 4 connectivity]  and http://www.ibm.com/support/knowledgecenter/SSEPGG_9.7.0/com.ibm.db2.luw.apdv.java.doc/src/tpc/imjcc_r0052341.html[SQLJ type 2 connectivity] URL syntax.

[NOTE]
====
The http://www-01.ibm.com/support/docview.wss?uid=swg21363866[IBM Drivers] are not freely distributed, so you can't find them in Maven. You need to contact IBM or just find the license in required IBM software product.
====