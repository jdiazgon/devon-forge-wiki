:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Database Configuration

In this tutorial, you will see how to configure your application to connect with a real database of your choice. 
For different Database Configuration we only need to give input to archetype at time of project creation which DB you need to configure i.e. if you are using command line tool for generating project you need to add dbtype (h2|postgresql|mysql|mariadb|oracle|hana|db2)

[source,bash]
---- 
mvn -DarchetypeVersion=<OASP4J-VERSION> -DarchetypeGroupId=io.oasp.java.templates -DarchetypeArtifactId=oasp4j-template-server archetype:generate -DgroupId=<APPLICATION-GROUP-ID> -DartifactId=<APPLICATION-ARTIFACT-ID> -Dversion=<APPLICATION-VERSION> -Dpackage=<APPLICATION-PACKAGE-NAME> -DdbType=<DBTYPE>
---- 
If you want to configure database such as MySQL, MS SQL or PostGre SQL, refer below sections.

=== Dependencies
Dependency for database in pom.xml file will be added automatically. For e.g if we are configuring mysql database in our application the below dependency will be there in your pom.xml file:

MySQL:
 
[source,xml]
----
<dependency>
 	<groupId>mysql</groupId>
 	<artifactId>mysql-connector-java</artifactId>
</dependency>
----

image::images/database-configuration/db-config1.png[,width="450",link="images/database-configuration/db-config1.png"]

*Note*: This driver should NOT be used in a production environment because of the license issues. See below for an alternative.

=== Database configuration

Database configuration will be automatically generated in src/resources/config/application.properties_ file. Update the required values accordingly.

MySQL:
[source,java]
----
server.port=8081
server.context-path=/
spring.datasource.url=jdbc:mysql://address=(protocol=tcp)(host=localhost)(port=3306)/<db>
spring.datasource.password=<password>
# Enable JSON pretty printing
spring.jackson.serialization.INDENT_OUTPUT=true
# Flyway for Database Setup and Migrations
flyway.enabled=true
flyway.clean-on-validation-error=true

----
Database configuration will be automatically generated in src/resources/application.properties_ file. Update the required values accordingly.

MySQL:
[source,java]
----
spring.application.name=myapplication
server.context-path=/
security.expose.error.details=false
security.cors.enabled=false
spring.jpa.hibernate.ddl-auto=validate
# Datasource for accessing the database
spring.jpa.database=mysql
spring.datasource.username=mysqluser
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.batch.job.enabled=false
# Flyway for Database Setup and Migrations
flyway.locations=classpath:db/migration,classpath:db/type/mysql

----

=== Further Details on Database Configurations

==== MySQL

The use of the MySQL has already been illustrated in the above example. However, as mentioned, the GPL licensed (native) MySQL driver should *not* be used in a production environment. As an alternative, the free and liberally licensed "mariaDB" (a MySQL clone) library could be used. 

The dependency declaration consists of:

[source,xml]
----
<dependency>
    <groupId>org.mariadb.jdbc</groupId>
    <artifactId>mariadb-java-client</artifactId>
    <version>1.5.4</version>
</dependency> 
----

And the library can be used such as MySQL but with a slight change in the configuration:

[source]
----
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
----

==== PostgreSQL 

The below dependency will be added in pom for postgres database:

 <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
 </dependency>


Ultimately, the following configuration will be added for the postgresql driver and database:
Configuration in file : src/resources/application.properties_ file
[source]
----
spring.application.name=myapplication
server.context-path=/
security.expose.error.details=false
security.cors.enabled=false
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.database=postgresql
spring.datasource.username=<username>
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.batch.job.enabled=false
flyway.locations=classpath:db/migration,classpath:db/type/postgresql
----
Configuration in file : src/resources/config/application.properties_ file
[source]
----
server.port=8081
server.context-path=/
spring.datasource.url=jdbc:postgresql://localhost:5432/<>
spring.datasource.password=<password>
spring.jackson.serialization.INDENT_OUTPUT=true
flyway.enabled=true
flyway.clean-on-validation-error=true
----
==== Microsoft MSSQL Server

The Microsoft JDBC drivers are *not* available on Maven Central; http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&id=11774[ they need to be downloaded from the Microsoft site.]
 
Once downloaded, they should be installed in the local Maven repository (_.m2_ folder on the local machine). It can be done with the following command:

[source,batch]
----
mvn install:install-file -DgroupId=com.microsoft.sqlserver -DartifactId=sqljdbc4 -Dversion=<version> -Dpackaging=jar -DgeneratePom=true -Dfile=<driver JAR file>
----

Once installed, the below library will be there in the project's _pom.xml_ file. The dependency declaration should be something like

[source,xml]
----
 <dependency>
    <groupId>com.microsoft.sqlserver</groupId>
    <artifactId>mssql-jdbc</artifactId>
    <version>6.4.0.jre8</version>
  </dependency>
----

Ultimately, the following configuration will be added for the MSSQL server driver and database:

Configuration in file : src/resources/application.properties_ file
[source]
spring.application.name=mssqltest
server.context-path=/
security.expose.error.details=false
security.cors.enabled=false
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.database=mssql
spring.datasource.username=<username>
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.batch.job.enabled=false
flyway.locations=classpath:db/migration,classpath:db/type/mssql

Configuration in file : src/resources/config/application.properties_ file
[source]
server.port=8081
server.context-path=/
spring.datasource.password=<password>
spring.datasource.url=jdbc:mssql:TODO
spring.jackson.serialization.INDENT_OUTPUT=true
flyway.enabled=true
flyway.clean-on-validation-error=true


For further information see: https://wiki.jasig.org/pages/viewpage.action?pageId=57578731[MS SQL Server and MS JDBC Driver ]

==== DB2

The dependency with DB2 is explained below:

[source,xml]
----
 <dependency>
              <groupId>com.ibm.db2.jcc</groupId>
              <artifactId>db2jcc4</artifactId>
              <version>10.1</version>
       </dependency>
       <dependency>
              <groupId>com.ibm.db2</groupId>
              <artifactId>db2jcc_license_cisuz</artifactId>
              <version>9.7</version>
       </dependency>
       <dependency>
              <groupId>com.ibm.db2</groupId>
              <artifactId>db2java</artifactId>
              <version>9.7</version>
       </dependency>
----

And the properties are explained below:

Configuration in file : src/resources/application.properties_ file
[source]
spring.application.name=db2test
server.context-path=/
security.expose.error.details=false
security.cors.enabled=false
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.database=db2
spring.datasource.username=<username>
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.batch.job.enabled=false
flyway.locations=classpath:db/migration,classpath:db/type/db2

Configuration in file : src/resources/config/application.properties_ file
[source]
server.port=8081
server.context-path=/
spring.datasource.password=<password>
spring.datasource.url=jdbc:db2:TODO
spring.jackson.serialization.INDENT_OUTPUT=true
flyway.enabled=true
flyway.clean-on-validation-error=true

If you want to learn more about URL format, you can see http://www.ibm.com/support/knowledgecenter/SSEPGG_9.7.0/com.ibm.db2.luw.apdv.java.doc/src/tpc/imjcc_r0052342.html[SQLJ type 4 connectivity]  and http://www.ibm.com/support/knowledgecenter/SSEPGG_9.7.0/com.ibm.db2.luw.apdv.java.doc/src/tpc/imjcc_r0052341.html[SQLJ type 2 connectivity] URL syntax.

[NOTE]
====
The http://www-01.ibm.com/support/docview.wss?uid=swg21363866[IBM Drivers] are not freely distributed, so you can't find them in Maven. You need to contact IBM or just find the license in required IBM software product.
====