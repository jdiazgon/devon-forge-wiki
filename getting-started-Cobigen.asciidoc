:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Getting Started Cobigen

In Devonfw we have a server-side code generator called Cobigen. Cobigen is capable to create CRUD code from an entity or generate the content of the class that defines the user permissions. Cobigen is distributed in the Devonfw distribution as an Eclipse plugin, and is available to all Devonfw developers.

If you want to go deeper in Cobigen you can visit the documentation of the https://github.com/devonfw/tools-cobigen/wiki/CobiGen[Cobigen core].

=== Preparing Cobigen for first use

Before you can use Cobigen, you have to install the templates to be used by Cobigen. The Devonfw distribution comes with a set of default templates in the directory `workspaces\main\CobiGen_Templates`.

1. Open Eclipse by executing the batch file `eclipse-main.bat`

1. Select "File - Import"

1. Select "General - Existing projects into workspace"

1. Select the directory `workspaces\main\CobiGen_Templates`

1. Finish the import.

[NOTE]
====
In your own projects, you can create additional templates. Please refer to the document https://coconet.capgemini.com/sf/frs/do/downloadFile/projects.apps2_devon/frs.devon_distribution.devonfw_2_0/frs50089?dl=1[CobiGen.pdf] for further information.
====

=== Creating a CRUD with Cobigen

In an earlier chapter about <<Create CRUD functionality for an entity,CRUD functionality>> you saw the individual steps necessary to implement a basic CRUD functionality.

Using Cobigen, you can save most of these steps, and get a working result in far less time. We are going to explain how to use Cobigen to generate the code and classes related to the CRUD operations of an entity but you can know more about the https://github.com/devonfw/tools-cobigen/wiki/cobigen-eclipse_usage[Cobigen usage in Eclipse].

Cobigen needs a starting point to generate the code of a CRUD case. In this example the starting point is the `StaffMemberEntity` class, modelling a member of the staff of our restaurant. So we are going to create a CRUD for the new `StaffMemberEntity` class.

====== Step 1: Entity creation

We are going to create a `StaffMember` entity. First, we are going to add the database schema to our database.

In the script _resources/db/migration/V0001__Create_schema.sql_ we add:

[source,sql]
----

CREATE TABLE STAFFMEMBER(
    id BIGINT NOT NULL,
    modificationCounter INTEGER NOT NULL,
    firstname VARCHAR(255),
    lastname VARCHAR(255),
    login VARCHAR(255)
);

----

And in the same path, we are going to create a new file (if it do not exist) to add the default data to the `StaffMember` created. We create _V0002__Master_data.sql_ file.

[source,sql]
----

INSERT INTO STAFFMEMBER (id, login, firstname, lastname, modificationCounter) VALUES (0, 'chief', 'Charly', 'Chief', 0);
INSERT INTO STAFFMEMBER (id, login, firstname, lastname, modificationCounter) VALUES (1, 'cook', 'Carl', 'Cook', 0);
INSERT INTO STAFFMEMBER (id, login, firstname, lastname, modificationCounter) VALUES (2, 'waiter', 'Willy', 'Waiter', 0);
INSERT INTO STAFFMEMBER (id, login, firstname, lastname, modificationCounter) VALUES (3, 'barkeeper', 'Bianca', 'Barkeeper', 0);

----

Now, we create a new StaffMember entity in the package `devonfw.tutorial.staffmanagement.dataaccess.api` with the following code:

.StaffMemberEntity.java
[source, java]
----

package devonfw.tutorial.staffmanagement.dataaccess.api;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

import devonfw.tutorial.general.dataaccess.api.ApplicationPersistenceEntity;
import devonfw.tutorial.general.dataaccess.api.StaffMember;

//Add imports with respect to the package structure.

/**
 *
 * The {@link devonfw.tutorial.general.dataaccess.api.ApplicationPersistenceEntity persistent entity} for
 *
 * {@link StaffMember}.
 */

@Entity
@Table(name = "StaffMember")
public class StaffMemberEntity extends ApplicationPersistenceEntity implements StaffMember {

  private static final long serialVersionUID = 1L;

  private String name;

  private String firstName;

  private String lastName;

  /**
   * The constructor.
   */
  public StaffMemberEntity() {

    super();
  }

  @Column(name = "login", unique = true)
  @Override
  public String getName() {

    return this.name;
  }

  @Override
  public void setName(String login) {

    this.name = login;
  }

  @Override
  public String getFirstName() {

    return this.firstName;
  }

  @Override
  public void setFirstName(String firstName) {

    this.firstName = firstName;
  }

  @Override
  public String getLastName() {

    return this.lastName;
  }

  @Override
  public void setLastName(String lastName) {

    this.lastName = lastName;
  }

}

----

===== Step 2: Generate classes

To generate the rest of the classes concerning the StaffMember CRUD, we only have to do a right click on the `StaffMemberEntity.java` class in Eclipse Project Explorer and select "CobiGen ' Generate".

image::images/devonfw-cobigen/devon_guide_cobigen_1_context_menu.png[,width="450", link="images/devonfw-cobigen/devon_guide_cobigen_1_context_menu.png"]

This action opens a code generator wizard, like this:

image::images/devonfw-cobigen/devon_guide_cobigen_2_template_selection.png[,width="450", link="images/devonfw-cobigen/devon_guide_cobigen_2_template_selection.png"]

In this wizard you can select which classes you want to generate, organized by layer. In this example, please select:

* CRUD DAO's
* CRUD REST services
* CRUD logic layer (all in one)
* Entity infrastructure
* TO's

and continue.

In the next step you can select the fields of the entity that you want to expose via the REST service.

image::images/devonfw-cobigen/devon_guide_cobigen_3_field_selection.png[,width="450", link="images/devonfw-cobigen/devon_guide_cobigen_3_field_selection.png"]

Afterwards, click on "Finish" to let CobiGen do its work.

[NOTE]
====
It is possible that you will see a final dialog containing some warnings about ambiguous imports. You should review the mentioned files, and fix the imports yourself.

image::images/devonfw-cobigen/devon_guide_cobigen_4_warnings.png[,width="350", link="images/devonfw-cobigen/devon_guide_cobigen_4_warnings.png"]

In many cases, the imports are easily fixable by letting Eclipse auto-complete them by pressing "Ctrl-Shift-O".

====

Cobigen also works incrementally. Cobigen merges your changes and updates all classes based on the Entity class' fields. So you can use Cobigen to generate the structure and the different classes and then develop custom parts of your CRUD.

== Creating user permissions

In OASP4J applications the roles and permissions are defined by the _PermissionConstants_ class. The content of this class is bound with the permissions defined in the _access-control-schema.xml_ file. Cobigen let us to automatically generate (or update) the content of the _PermissionConstants_ class from the _access-control-schema.xml_ content. To achieve this we only have to follow two simple steps.

===== Step 1: Define the permissions and roles

In Eclipse open the _access-control-schema.xml_ located in _/oasp4j-sample-core/src/main/resources/config/app/security/access-control-schema.xml_ and define the permissions to the roles or group of roles like:

[source,xml]
----
<group id="MasterData" type="group">
    <permissions>
    <!-- staffmemberamanagement -->
      <permission id="FindStaffMember"/>
      <permission id="SaveStaffMember"/>
      <permission id="DeleteStaffMember"/>
    </permissions>
  </group>
----

===== Step 2: Generate the PermissionConstants class

Right click on the _access-control-schema.xml_ and select _Cobigen > Generate..._

This action opens a code generator wizard, like this:

image::images/devonfw-cobigen/devon_guide_cobigen_8a_permissions_template_selection.png[,width="450", link="images/devonfw-cobigen/devon_guide_cobigen_8a_permissions_template_selection.png"]

In this case you have only one option. Select _Permissions Constants_ and press _Finish_. You should see now the new Permissions added in the file _/oasp4j-sample-core/src/main/java/io/oasp/gastronomy/restaurant/general/common/api/constants/PermissionConstants.java_


[source,java]
----
public static final String FIND_STAFFMEMBER = "FindStaffMember";

public static final String SAVE_STAFFMEMBER = "SaveStaffMember";

public static final String DELETE_STAFFMEMBER = "DeleteStaffMember";
----

[NOTE]
====
It is possible that you can't press _Finish_ button in CobiGen.

image::images/devonfw-cobigen/devon_guide_cobigen_8_permissions_template_selection.png[,width="450", link="images/devonfw-cobigen/devon_guide_cobigen_8_permissions_template_selection.png"]

This happens because you are using an old version of CobiGen and the wizard can't merge the class _PermissionConstants_. To work around this you need to delete the class _PermissionConstants.java_ and try again. Cobigen will generate for us the class and will fill it with the updated content.
====

=== Fixing context problems

When launching the _Cobigen > Generate_ wizard you may find problems related to the context, like the following one

image::images/devonfw-cobigen/devon_guide_cobigen_5_error.png[,width="250", link="images/devonfw-cobigen/devon_guide_cobigen_5_error.png"]

This happens because you need to update the templates. So do again right click on the _access-control-schema.xml_ and select this time the _Cobigen > Health Check_ option and you will see a window with a message like the following

image::images/devonfw-cobigen/devon_guide_cobigen_6_error.png[,width="250", link="images/devonfw-cobigen/devon_guide_cobigen_6_error.png"]

Click in _Advance Health Check_

image::images/devonfw-cobigen/devon_guide_cobigen_7_error.png[,width="250", link="images/devonfw-cobigen/devon_guide_cobigen_7_error.png"]

Now upgrade the template to _constants/security_permissions_ and press _OK_. You now should be able to use Cobigen to generate the _PermissionConstants_ class content.
