:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Devonfw Distribution Structure

In this section, you will find outlook on the Devonfw distribution structure that you will find right after downloading the zip. In short, the use of each file and folder will be explained here.

Therefore, after unzipping the Devonfw distribution, you will find the following directory structure as shown in the image:

image::images/devonfw-dist-structure/devonfw-dist-structure-01.png["Structure after the download",width="400", link="images/devonfw-dist-structure/devonfw-dist-structure-01.png"]

=== Understanding the structure

In the above image, you can find different folders and executable _.bat_ files. You will find below the use of _create-or-update-workspace.bat_ and _update-all-workspaces.bat_ files. These are the scripts which you will execute to obtain the whole Devonfw structure:

- The *create-or-update-workspace.bat* file will create the _conf_ directory that stores the Maven local repository and two configuration files (the _settings.json_ with distribution information and the _settings.xml_ with the Maven connection settings). Alongside with that it will create the _eclipse-main.bat_ to start Eclipse.

- The *update-all-workspaces.bat* file sets some Eclipse preferences for workspaces and creates all the Eclipse _.bat_ launchers related to the projects in the _workspace_ directory.

Hence, after executing these two scripts, following structure will be generated:

image::images/devonfw-dist-structure/devonfw-dist-structure-02.png["Structure after scripts",width="400", link="images/devonfw-dist-structure/devonfw-dist-structure-02.png"]

Thereon, You will have the new _conf_ directory as expected and the _eclipse-main.bat_ and the _eclipse-examples.bat_ related to the _main_ and _examples_ directories within the _workspaces_ folder.

This is the final structure. A detailed explanation for each file and folder is given below: 

==== conf
As mentioned previously, this directory is generated by executing the _create-or-update-workspace.bat_. This is the directory where Maven will store its local repository, in a _.m2/repository_ path. Moreover, in the _conf_ directory, you can find two settings files. The _settings.json_ with distribution information and the _settings.xml_ with the Maven connection settings.

==== doc
Here, you can find, the documentation related to both, the starting development tasks with the framework and implementing its more advanced features in pdf format.

==== scripts
This folder stores the scripts referenced in the _.bat_ files in the root directory. These scripts are related to internal tasks of the distribution.

==== settings
This directory stores the elements required for internal functionality of the distribution. Here, you can find the configuration files of different software, included in the distribution, such as Eclipse, Maven, Sonarqube and several more.

==== software
All the software resources that the distribution needs are stored in this folder. Internally, the distribution will search here for available software. Therefore, all the programs, plugins and tools needed by the distribution must be located in this directory.

==== system
This is another directory with internal elements. In _system_ folder, you can find some files related to the environment configuration.

==== workspaces
This is the directory to store all the projects. One must keep in mind that the content of this folder will be associated with a Eclipse _.bat_ launcher files through the _update-all-worksapces.bat_ script. So if you want the separated Eclipse instances for two different projects, you must declare these projects in separate directories within the _workspaces_ folder.

To conclude, if you have a _workspaces/project01_ and a _workspaces/project02_ projects, then the _update-all-workspaces.bat_ script will create a _eclipse-project01.bat_ launcher and a _eclipse-project02.bat_ launcher in the root folder of the distribution. Thus, you can have access to the different Eclipse instances with different configurations for each project.

image::images/devconlogo_imgonly.png[,width="50"]
.*Using devcon*
[NOTE]
You can automate this operation using devcon with the `devon workspace create` command <<workspace create parameters,learn more here>>

==== console.bat
This script launches the distribution's _cmd_. Meaning, within this _cmd_, you have access to the software located in the _software_ folder, so that you can use the tools "installed" in that folder although you don't have this installed on your machine. Therefore, it is important to always run this _cmd_ (launching the _console.bat_ script) to make use of the software related to the distribution.

==== create-or-update-workspace.bat
This script is already explained <<Understanding the structure,at the beginning of this chapter>>.

==== EclipseConfigurator.log
This is a file for internal usage and records the logs of the _create-or-update-workspace.bat_ and the _update-all-workspaces.bat_ scripts.

==== eclipse-_project_.bat
These files are used to have different Eclipse instances related to the different projects located into the _workspaces_ directory. Therefore, for each project in the _workspaces_ directory, the _update-all-workspaces.bat_ script will create an Eclipse launcher with structure _eclipse-<projectName>.bat_. In such a way, you can have different Eclipse environments with different configurations related to the different projects of the _workspace_ directory.

==== s2-create.bat and s2-init.bat
These scripts relate to the _Shared Services_ functionality included in Devonfw. 
The _s2-init.bat_ configures the _settings.xml_ file to connect to an Artifactory Repository.
The _s2.create.bat_ generates a new project in the _workspaces_ directory and does a checkout of a Subversion repository inside. Each script needs to be launched from the distribution's cmd (launching the _console.bat_ script) and some parameters to work properly.

==== update-all-workspaces.bat
This script is already explained <<Understanding the structure,at the beginning of this chapter>>.

==== variables.bat
This script is related to the internal functionality of the distribution. The script stores some variables that are used internally by the distribution scripts.