:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== OASP4J Application Structure

=== The OASP4J project

Using the _Oasp4j_ approach for the Java back-end project, we will have a structure of a main _Maven_ project formed by two sub-projects:

image::images/oasp-app-structure/project_modules.png[,width="250", link="images/oasp4j/2.Example_app/project_modules.png"]

In the _core_ project we will store all the logic and functionality of the application.

The _server_ project configures the packaging of the application.

=== The components

In early chapters we have mentioned that the Oasp4j applications should be divided in different components that will provide the functionality for the different features of the application. Following the naming convention `[Target]management` being the _Target_ the main _entity_ that we want to manage.

The components, as part of the logic of the app, are located in the _core_ project of the app. In the case of _My Thai Star_ we need to show the different available *dishes*, we need to manage the *booking* and the *orders* and we need to create new *users*. So the application will be divided in the following components:

image::images/oasp4j/2.Example_app/project_components.png[,width="250", link="images/oasp4j/2.Example_app/project_components.png"]

=== The component structure (layers)

Each component of the app is internally divided following the three-layer architecture (_service_, _logic_ and _dataaccess_) that Oasp4j proposes. So we will have three different packages to order our component's elements:

image::images/oasp4j/2.Example_app/component_layers.png[,width="250", link="images/oasp4j/2.Example_app/component_layers.png"]