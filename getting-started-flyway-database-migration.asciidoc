:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Set up and maintain database schemas with Flyway
 
https://flywaydb.org/documentation/[Flyway]  is an open-source database migration tool. It strongly favors simplicity and convention over configuration.

=== Why use flyway

Consider, you have an application (a piece of software) and a database. Great! And this could be all you need. 

But in most of the projects, this simple view of the world very quickly translates into this:

image::images/setup-and-maintain-db-schemas-with-flyway/environments.png[,scaledwidth=80%]

Then, you not only have to deal with one copy of the environment, but with several other. This presents a number of challenges to maintain the databases across various environments. 

Many projects still rely on manually applied SQL scripts. And sometimes not even that (a quick SQL statement here or there to fix a problem). And soon many questions arise:


*   What state is the database in on this machine?
*   Has this script already been applied or not?
*   Has the quick fix in production been applied in test afterwards?
*   How do you set up a new database instance?

Most often the answer to above questions is: We don't know. 

Database migration (where the flyway comes into the picture) is the great way to regain control over the above turmoil.

They allow you to:

* Recreate a database from scratch
* Make it clear at all times what state a database is in
* Migrate in a deterministic way from your current version of the database to a newer one.


=== How it works for setting up the database and maintaining it

To know which state your database is in, Flyway relies on a special metadata table for all its internal bookkeeping. 


[start=1]
. When you point Flyway to an empty database, it will try to locate its metadata table. 

image::images/setup-and-maintain-db-schemas-with-flyway/how-flyway-works-2.png[,scaledwidth=80%]

[start=2]
. As the database is empty, Flyway won't find it and will create it instead. Now, you have a database with a single empty table called SCHEMA_VERSION by default.

image::images/setup-and-maintain-db-schemas-with-flyway/how-flyway-works-1.png[,scaledwidth=80%]

[start=3]
. Immediately, Flyway will begin to scan the file system or the classpath of the application for migrations. They can be written in either SQL or Java. 

[start=4]
. The migrations are then sorted based on their version number and applied in order. As each migration gets applied, the metadata table is updated accordingly.


image::images/setup-and-maintain-db-schemas-with-flyway/how-flyway-works-3.png[,scaledwidth=80%]


With the metadata and the initial state in place, you can now talk about migrating to newer versions. 

Flyway will once again scan the filesystem or the classpath of the application for migrations. The migrations are checked against the metadata table. If their version number is lower or equal to the one of the versions marked as current, they are ignored.

And that's it! No matter when the need to evolve the database arises, whether structure (DDL) or reference data (DML), simply create a new migration with a version number higher than the current one. The next time Flyway starts, it will find it and upgrade the database accordingly.

A typical metadata table looks like below:


image::images/setup-and-maintain-db-schemas-with-flyway/schema-version-metadata-table.png[,scaledwidth=80%]



=== How to set up a database 

Flyway can be used as a standalone or integrated tool via its API to make sure the database migration takes place on startup.
To enable auto migration on startup (not recommended for production environment), set the following property in the _application.properties_ file.

[source, properties]
----
  database.migration.auto = true
----

It is set to _false_ by default via _application-default.properties_ and shall be done explicitly in production environments. In a development environment, it is set to _true_ in order to simplify development. This is also recommended for regular test environments.

If you want to use Flyway, set the following property in any case to prevent _Hibernate_ from making changes in the database (pre-configured by default of OASP4J):

[source, properties]
----
  database.hibernate.hbm2ddl.auto=validate
----

If you want flyway to clear the database before applying the migrations (all data will be deleted), set the following property (default is false):

[source, properties]
----
  database.migration.clean = true
----

New database migrations are added to `src/main/resources/db/migrations`. They can be http://flywaydb.org/documentation/migration/sql.html[SQL] based or http://flywaydb.org/documentation/migration/java.html[Java] based and follow below naming convention:
V<version>\__<description> (e.g.: V0003__Add_new_table.sql). For new SQL based migrations, stick to the following conventions:

* properties in camelCase
* tables in UPPERCASE
* ID properties with underscore (e.g. table_id)
* constraints all UPPERCASE with 
 * PK_{table} for primary key
 * FK_{sourcetable}2{target} for foreign keys
 * UC_{table}_{property} for unique constraints
* Inserts always with the same order of properties in blocks for each table
* Insert properties always starting with id, modificationCounter, [dtype, ] ...


For example, look at the sample script (migration) shown below:

[source , properties]
----
-- *** Staffmemeber ***
CREATE TABLE STAFFMEMBER(
    id BIGINT NOT NULL,
    modificationCounter INTEGER NOT NULL,
    firstname VARCHAR(255),
    lastname VARCHAR(255),
    login VARCHAR(255),
    role INTEGER
);
----


It is also possible to use Flyway for test data. To do so, place your test data migrations in `src/main/resources/db/test-data/` and set property

[source, properties]
----
  database.migration.testdata = true
----

Then, Flyway scans the additional location for migrations and applies all in the order specified by their version. If migrations _V_01__..._ and _V_02__..._ exist and a test data migration should be applied, in between, you can name it _V_01_1__..._.