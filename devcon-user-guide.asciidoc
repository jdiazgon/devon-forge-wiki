:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Devcon User Guide

image::images/devconlogo_full.png[,align="center",width="200",Devcon, link="images/devconlogo_full.png"]

The Devon Console, *Devcon*, is a cross-platform command line tool running on the JVM that provides many automated tasks around the full life-cycle of Devon applications, from installing the basic working environment and generating a new project, to running a test server and deploying an application to production.

Devcon is the easiest way to use Devonfw. By accompanying on project automation, easy command execution and declarative configuration, it gets out of your way and let you focus on your code.

=== Requirements

You will need to have a Java JDK 1.7 or 1.8 installed on your system (devcon GUI requires JDK 1.8). It is *not* necessary to use the Devonfw Distribution as Devcon can be used independently from that environment. You might even want to use Devcon itself to download & extract the Devon Distribution zip file to and on your system! (see down...) 

=== Download Devcon

From the Devonfw version 2.1.1 onwards Devcon is included by default within the Devonfw distributions.

However, if you want to install Devcon locally (Devcon can be used to get the last version of Devonfw distribution, so it can be useful to do it that way) you will need to complete the following steps:

- http://devonfw.github.io/download/devcon/devcon.jar[*download the Devcon jar from the devonfw repository*]

- After downloading, open console or command prompt (on Windows: CMD or Powershell), navigate ("cd") to the path where youÂ´ve downloaded the jar file and execute the following command:

[source,bash]
----
java -jar devcon.jar system installDevcon 
----

This will install the devcon binaries to a folder _'.devcon'_ in your _'%HOME%'_ directory. Devcon is now added to the _'%PATH%'_ environment variable on your system, allowing it to execute directly from the console. However, after devcon installation on Windows, you need to close the console and reopen it in order to work the environment variables (only for the first time).

Remember that those steps are only necessary in case you want to install Devcon locally on your environment. As mentioned before an installation of Devcon is included by default in the Devonfw distributions (version 2.1.1 or higher) which means that executing the `console.bat` script will open a command line with Devcon available. 

Once you know how obtain Devcon, two commands are available to open devon user guide. Try either one, or both of

[source,bash]
----
devon doc userguide
devcon doc userguide
----

to open up the Devcon user guide in your default system web browser. The commands 'devon' and 'devcon' can be used interchangeably. 

=== Devcon structure

Devcon is based on three basic elements:

- modules

- commands

- parameters

So Devcon is a tool based on modules where each module groups several commands related to the module functionality and each command may need parameters to work in one way or another. 
Each command is used to accomplish one task and may need some parameters in order to achieve its goal. These parameters can be mandatory or optional. The mandatory parameters must be provided by the user when launching the command and the optional parameters can be provided by the user in the same way but if not, they can be read from a configuration file. Apart from this, we can use global parameters that are independent from the modules and commands and that will be helpful in order to obtain Devcon information (like help) or other basic configuration features, these parameters will be explained later.

=== Devcon basic usage

There are two ways to run Devcon:

- Using Devcon GUI

- Using command prompt


==== Using Devcon GUI

To run Devcon using the Devcon GUI, open command prompt and run below command (remember that *you will need JDK 1.8* to use Devcon's GUI):

[source,batch]
----
devon -g
----

The following application window will appear.

image::images/Devcon_homepage.JPG[,align="center",width="250",Devcon, link="images/Devcon_homepage.JPG"]

If you navigate to a particular module, it will show all the available commands from the respective module. You can find the "Exit" option to close the application, in the first menu on the left. Once you click on any command, the corresponding command form will be displayed on the screen. Refer following screenshot:

image::images/Devcon_Form.JPG[,align="center",width="250",Devcon, link="images/Devcon_Form.JPG"]
 
==== Using command prompt

Accordingly with the defined structure, the devcon usage is based on the definition of each of its element named : module, command and parameters. Therefore, in the command prompt, one must specify each of these elements in the correct order:

[source,batch]
----
devon [module] [command] [parameters ...]
----

- the module will be the first word after the "devon" keyword.

- the command will be the second word after the "devon" keyword.

- the parameters are the rest of the elements defined after the command.

===== Defining the module and the command

Both, module and command are defined by an identifier i.e. 'name' that the module or command have assigned in devcon.

===== Defining the parameters

The parameter definition is divided in two parts. The first one is the parameters identifier i.e. the _name_ that the parameter has assigned within the devcon app *preceded by a single dash*. The second part of the parameter definition is the parameter value.

===== Basic example

Following is a basic example of a devcon using command prompt:

[source,bash]
----
C:\>devon foo saySomething -message hello
----

where: 

- *foo* is the module.

- *saySomething* is the command of the _foo_ module to be executed.

- '*-message*' is the parameter that the command _saySomething_ needs to be executed.

- *hello* is the value for the _message_ parameter.

===== Parameters

As its mentioned before from the point of view of the commands, we have two types of parameters: the mandatory parameters and the optional parameters. 
The mandatory parameters must be provided by the user specifying the parameter identifier and the value in the command line. The optional parameters must be also provided to the app but, if the user do not specify it, devcon will use a default value for them.


===== Global parameters

Devcon handles a third type of parameter that has nothing to do with command parameters. We are referring it as _global parameters_.

The _global parameters_ are a set of parameters that works in global context, which means it will affect the behaviour of the command in the first phase i.e. before launching the command module itself.

As these parameters act in a global context, we do not need to provide the values for them. They work as _flags_ to define some internal behaviour of devcon.

In the current version of Devcon we have the following global parameters :

- global parameter _gui_: defined with *-g* or *--gui*
- global parameter _help_: defined with *-h* or *--help*.
- global parameter _prompt_: defined with *-p* or *--prompt*.
- global parameter _stacktrace_: defined with *-s* or *--stacktrace*.
- global parameter _version_: defined with *-v* or *--version*.

====== _gui_ parameter

As we saw earlier the global parameter _gui_ (*-g*) is the way we will launch the Devcon's graphical user interface. So to complete that operation we only need to execute

[source,batch]
----
devon -g
----

====== _help_ parameter

The global parameter _help_ is very useful to show overall help info of Devcon or also for showing more detailed info of each module and command supported.
For example, if you don't know anything about how to start with Devcon, the option *-h* (or *--help*) will show a summary of the devcon usage, listing the global parameters and the available modules alongside a brief description of each one.  

[source,batch]
----
C:\>devon -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: devon <<module>> <<command>> [parameters...]
Devcon is a command line tool that provides many automated tasks around
the full life-cycle of Devon applications.
 -h,--help        show help info for each module/command
 -v,--version     show devcon version
List of available modules:
> help: This module shows help info about devcon
> sencha: Sencha related commands
> dist: Module with general tasks related to the distribution itself
> doc: Module with tasks related with obtaining specific documentation
> github: Module to create a new workspace with all default configuration
> workspace: Module to create a new workspace with all default configuration
----

As a global parameter, if you use the *-h* parameter with a module, it will show the help info related to given module including a basic usage and a list of the available commands in given module.

[source,batch]
----
C:\>devon foo -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: foo <<command>> [parameters...]
This is only a test module.

Available commands for module: foo
> saySomething: This command is for say something
----

In the same way, as a global parameter, if we use the *-h* parameter with a command, instead of launching the command the help info related to the command will be shown

[source,batch]
----
D:\>devon foo saySomething -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: saySomething [-message] [-signature]
This command is to say something
 -message     the message to be written
 -signature   the signature
----

Even if you specify the needed parameters, the behaviour will be the same as we stated that the global parameters affect how devcon behaves before launching the commands

[source,batch]
----
D:\>devon foo saySomething -message hello -signature John -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: saySomething [-message] [-signature]
This command is to say something
 -message     the message to be written
 -signature   the signature
----

====== _prompt_ parameter

With this global parameter, you can ask devcon to prompt for all parameters (both optional and mandatory) when launching a command.

To give an example, you can use the _oasp4j create_ command (that creates a new server project based on _OASP4J_ model). In this case we would need to provide several parameters so the command call would look like
[source,batch]
----
D:\devon-dist>devon oasp4j create -servername myServer -groupid com.capgemini -packagename com.capgemini.myServer -version 1.0
----

As you can see the command is defined by `devon oasp4j create` words and the rest of the command line attributes are parameters.

With the global parameter *-p* Devcon gives the user the option to avoid defining any parameter when launching the command and provide step by step all parameters after that, so the usage of some commands can be way easier.

Going back to the previous example if we use the *-p* parameter we get

[source,batch]
----
D:\devon-dist>devon oasp4j create -p
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
Command: devon oasp4j create
Description: This command is used to create new server project

Parameter: serverpath - where to create
->
Parameter: servername - Name of project
-> myServer
Parameter: packagename - package name in server project
-> com.capgemini.myServer_

[...]
----

As you can see with the *-p* parameter Devcon asks for each parameter related to a command (the optional ones can be left blank as the _serverpath_ in the example) and the user can provide them one on one, getting rid of the concern of knowing what parameters needs a command.


====== _version_ parameter

This is a simple option that returns the devcon running version and is defined with *-v* (or *--version*). As the _help_ option this will show the devcon version even though we have defined a command with all required parameters.


[source,batch]
----
D:\>devon -v
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
devcon v.1.0.0
----

[source,batch]
----
D:\>devon foo saySomething -message hello -signature John -v
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
devcon v.1.0.0
----


=== First steps with Devcon
This section describes how to start using devcon from scratch. For this, you can use the global option _-h_ (help) in order to figure out which commands and parameters you need to define. But in a very first approach, only the command _devon_ will be enough.
Therefore, the first step is to look for a module that fits your requirements. As mentioned above, you can do this with the _help_ option (defined as _-h_ or _--help_) or with a simple command _devon_. If you do not specify any information, you will see a summary of the general help information with an example of usage, a list with global parameters and the available modules.

[source, batch]
----
D:\>devon
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: devon <<module>> <<command>> [parameters...]
Devcon is a command line tool that provides many automated tasks around
the full life-cycle of Devon applications.
 -h,--help        show help info for each module/command
 -v,--version     show devcon version
List of available modules:
> help: This module shows help info about devcon
> sencha: Sencha related commands
> dist: Module with general tasks related to the distribution itself
> doc: Module with tasks related with obtaining specific documentation
> github: Module to create a new workspace with all default configuration
> workspace: Module to create a new workspace with all default configuration
----

Once you have the list of modules and an example of how to use it, you may need to get the devon distribution to go deeper in module _*dist*_, for that you can again use the _help_ option after the module definition.

[source,batch]
----
D:\>devon dist -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: dist <<command>> [parameters...]
Module with general tasks related to the distribution itself

Available commands for module: dist
> install: This command downloads the distribution
> s2: Initializes a Devon distribution for use with Shared Services.
----

Now, you know that the _dist_ module has two commands, the _install_ command and the _s2_ command and you can see a brief description of each one therefore you can decide which one you need to use. In case you have to get a devon distribution,  it can be found by the install command with the _help_ option.

[source,batch]
----
D:\>devon dist install -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: install [-password] [-path] [-type] [-user]
This command downloads the distribution
 -password   the password related to the user with permissions to download
             the Devon distribution
 -path       a location for the Devon distribution download
 -type       the type of the distribution, the options are:
             'oaspide' to download OASP IDE
             'devondist' to download Devon IP IDE
 -user       a user with permissions to download the Devon distribution
----

So now you know that the _install_ command of the _dist_ module needs:

- user with permissions to download the distribution.

- the related password.

- the path where the distribution file must to be downloaded.

- the type of distribution that can be _'oaspide'_ or _'devondist'_.

With all the information, you can launch a fully functional command such as:

[source,batch]
----
D:\>devon dist install -user john -password 1234 -path D:\Temp\MyDistribution -type devondist
----

Regarding the order of the command parameters, devcon will order them internally so that you don't have to concern about that point and you can specify them in the order you want. The only requirement is that all mandatory parameters should be provided.

=== Devcon command reference

For a full reference of all the available commands in Devcon, see the <<Devcon Command Reference,Devcon Command Reference>>