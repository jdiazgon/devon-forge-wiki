:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Devon in Bluemix

=== Introduction

==== Platform as a service

https://www.ibm.com/blogs/cloud-computing/2014/02/what-is-platform-as-a-service-paas/[Platform as a service (PaaS)] is a category of cloud computing services that provides a platform allowing customers to develop, run, and manage applications without the complexity of building and maintaining the infrastructure typically associated with developing and launching an app.

==== Cloud Foundry

Cloud Foundry is an open source, multi cloud application platform as a service (PaaS) governed by the Cloud Foundry Foundation, a https://en.wikipedia.org/wiki/501(c)_organization#501.28c.29.286.29[501(c)(6) organization]. 

https://en.wikipedia.org/wiki/Cloud_Foundry[Cloud Foundry] supports the full lifecycle, from initial development, through all testing stages, to deployment. It is therefore well-suited to the continuous delivery strategy. Users have access to one or more spaces, which typically correspond to a lifecycle stage. For example, an application ready for QA testing might be pushed (deployed) to its project's QA space. Different users can be restricted to different spaces with different access permissions in each.

==== Bluemix

https://console.ng.bluemix.net/docs/overview/whatisbluemix.html#bluemixoverview[IBM Bluemix] is a cloud PaaS developed by IBM. It supports several programming languages and services as well as integrated DevOps to build, run, deploy and manage applications on the cloud. Bluemix is based on Cloud Foundry open technology and runs on SoftLayer infrastructure. Bluemix supports several programming languages, including Java, Node.js, Go, PHP, Swift, Python, Ruby Sinatra, Ruby on Rails and can be extended to support other languages such as Scala through the use of buildpacks.

=== Bluemix Services

The Services dashboard provides access to the Bluemix services available from IBMÂ® and third-party providers. These include Watson, Internet of Things, Analytics, Mobile, and DevOps services. See more about Bluemix Services https://console.ng.bluemix.net/docs/services/index.html#services[here].

==== VCAP services

The VCAP_SERVICES environment variable is a JSON object that contains information that you can use to interact with a service instance in Bluemix. The information includes service instance name, credential, and connection URL to the service instance. These values are populated into the VCAP_SERVICES environment variable when your application is bound to a service instance in Bluemix.

The value of the VCAP_SERVICES environment variable is available only when you bind a service instance to your application. You can view the application environment variables by using the following command:

[source,bash]
----
cf env APP_NAME
----

==== VCAP services on Devon

A simple example below demonstrates how to work with VCAP services in Devon. In this scenario, a dashDB database service is configured in the Devon application. So, you can obtain the database credentials from VCAP service.

The JSON that Bluemix provides us with the VAP_SERVICE variable is the next:

[source,json]
----
{
  "dashDB": {
    "name": "service-instance-name",
    "label": "dashDB",
    "plan": "Entry",
    "credentials": {
       "port": 50000,
        "db": "BLUDB",
        "username": "***",
        "host": "23.246.206.254",
        "https_url": "https://23.246.206.254:8443",
        "hostname": "23.246.206.254",
        "jdbcurl": "jdbc:db2://23.246.206.254:50000/BLUDB",
        "ssljdbcurl": "jdbc:db2://23.246.206.254:50001/BLUDB:sslConnection=true;",
        "uri": "db2://***:***@23.246.206.254:50000/BLUDB",
        "password": "***",
        "dsn": "DATABASE=BLUDB;HOSTNAME=23.246.206.254;PORT=50000;PROTOCOL=TCPIP;UID=***;PWD=***;",
        "ssldsn": "DATABASE=BLUDB;HOSTNAME=23.246.206.254;PORT=50001;PROTOCOL=TCPIP;UID=***;PWD=***;Security=SSL;"
    }
  }
}
----

[NOTE]
====
You can find more details about dashDB service connection and VAP_SERVICE https://console.ng.bluemix.net/docs/services/dashDB/index.html#connect[here].
====

Now, in the Devon application, you can simply create a configuration class and configure the DataSource:

[source,java]
----
@Configuration 
public class BeanJPAConfiguration { 
  public String username;
  public String password;
  public String url;
  public String driverClassName = "com.ibm.db2.jcc.DB2Driver";

  @Bean
  @Primary
  public DataSource dataSource() { 
    String VCAP_SERVICES = System.getenv("VCAP_SERVICES");

    if (VCAP_SERVICES != null) { 
      setDataSourceProperties(VCAP_SERVICES);
    }
    return DataSourceBuilder.create() 
        .username(this.username). 
        password(this.password). 
        url(this.url). 
        driverClassName(this.driverClassName). 
        build();
  }

 public void setDataSourceProperties(String VCAP_SERVICES) { 
    JSONObject jsonObj = new JSONObject(VCAP_SERVICES);
    JSONArray jsonArray;

    if (jsonObj.has("dashDB")) {
      jsonArray = jsonObj.getJSONArray("dashDB");
      // Transform the JSONArray to JSONObject because JSONArray can't find by string key
      jsonObj = jsonArray.toJSONObject(new JSONArray().put("dashDB"));
      jsonObj = jsonObj.getJSONObject("dashDB");
    }

    if (jsonObj.has("credentials")) {
      jsonObj = jsonObj.getJSONObject("credentials");
      if (jsonObj != null) {
        this.username = jsonObj.getString("username"); 
        this.password = jsonObj.getString("password"); 
        if (jsonObj.has("jdbcurl")) {
          this.url = jsonObj.getString("jdbcurl");
        } else if (jsonObj.has("ssljdbcurl")) {
          this.url = jsonObj.getString("ssljdbcurl");
        }
      }
    }
  }
}
----

As you can see, the check is applied to make sure that if VCAP_SERVICES exist. So, if it doesn't exist, you can configure the other database, throw an error, etc.

This is a simple way to use Bluemix services, you can see https://cloud.spring.io/spring-cloud-cloudfoundry/[Spring Cloud Foundry] too.

[NOTE]
====
In the example, you are learning how to obtain the credentials of the database. If you want to know how to configure a DB2/dashDB database, you can see more details <<Database Configuration,here>>.
====

=== Logs in Bluemix

==== Devon logging

Devon uses https://github.com/oasp/oasp4j/tree/develop/modules/logging[OASP logging module] as a logging system. The module uses http://www.slf4j.org/[SLF4J] API and the http://logback.qos.ch/[Logback] implementation and the OASP wiki contains an https://github.com/oasp/oasp4j/wiki/guide-logging[excellent entry] explaining its configuration.

By default, the logging system uses the following configuration:

[source, xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<!-- Configuration file for logback -->
<configuration scan="true" scanPeriod="60 seconds">
  <property resource="io/oasp/logging/logback/application-logging.properties" />
  <property name="appname" value="restaurant"/>
  <property name="logPath" value="../logs"/>
  <include resource="io/oasp/logging/logback/appenders-file-all.xml" />
  <include resource="io/oasp/logging/logback/appender-console.xml" />

  <root level="DEBUG">
    <appender-ref ref="ERROR_APPENDER"/>
    <appender-ref ref="INFO_APPENDER"/>
    <appender-ref ref="DEBUG_APPENDER"/>
    <appender-ref ref="CONSOLE_APPENDER"/>
  </root>

  <!-- Minimize infrastructure debug logs -->
  <logger name="org.dozer" level="INFO"/>
  <logger name="org.flywaydb" level="INFO"/>
  <logger name="org.springframework" level="INFO"/>
  <logger name="org.hibernate" level="INFO"/>

</configuration>
----

In the above configuration, each log level is written in its own file.
[NOTE]
====
Each appender has its own XML configuration file that can be found on: https://github.com/oasp/oasp4j/tree/develop/modules/logging/src/main/resources/io/oasp/logging/logback[https://github.com/oasp/oasp4j/tree/develop/modules/logging/src/main/resources/io/oasp/logging/logback].
====

==== Bluemix logging

Bluemix does not allow users to navigate through any log files and it uses its own tool to look into the logs. The Bluemix environment has a console to show the logs. Due to this fact, the default configuration for the Devon logging system is not appropriate for the environments like Bluemix.

To adapt the logging system, Devon users are required to make certain changes in the default configuration. The file appenders have no sense in this environment, so they must be removed. The following example, could be a valid configuration:

[source, xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<!-- Configuration file for logback -->
<configuration scan="true" scanPeriod="60 seconds">
  <property resource="io/oasp/logging/logback/application-logging.properties" />
  <property name="appname" value="sample-bluemix-app"/>
  <include resource="io/oasp/logging/logback/appender-console.xml" />

  <root level="DEBUG">
    <appender-ref ref="CONSOLE_APPENDER"/>
  </root>

  <!-- Minimize infrastructure debug logs -->
  <logger name="org.dozer" level="INFO"/>
  <logger name="org.flywaydb" level="INFO"/>
  <logger name="org.springframework" level="INFO"/>
  <logger name="org.hibernate" level="INFO"/>

</configuration>
----

The above configuration is intended to write all the logs equal or superior to DEBUG level in the Bluemix console.