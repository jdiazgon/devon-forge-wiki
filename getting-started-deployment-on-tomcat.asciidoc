:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Deployment on Tomcat (Client/Server)

After setting up functional server and client applications, we may want to package both in the same _.war_ file. To package the single war, follow the given steps.

=== General description of the packaging process
The application packaging is based on _Maven_ _package_ functionality. The general overview of the packaging process is as follows:

image::images/devonfw-deployment/tutorial_devon_jspackaging_process.png[,width="450",link="images/devonfw-deployment/tutorial_devon_jspackaging_process.png"]

=== Preparing the client

Firstly (1), both client applications (the Sencha and the Angular one) should contain a _java_ directory with a _pom.xml_ file which executes the build process (the "production" build, creating a single, compressed Javascript file from all the application files) through the command (2) `mvn install`. We must verify that the information about the _groupId_, the _artifactId_ and the _version_ are provided within the _pom.xml_ file where we should find something like

[source,xml]
----
...
<groupId>com.capgemini.devonfw</groupId>
<artifactId>extjs-sample</artifactId>
<version>1.0.0-SNAPSHOT</version>
...
----

So from the client application, in the _java_ directory we launch the command

[source,bash]
----
myClientApp\java>mvn install
----

After that, if the process goes right, the client app should have been "installed" in the local Maven repository of our environment so in the _\conf\.m2\repository\com\capgemini\devonfw\extjs-sample\1.0.0-SNAPSHOT_ directory we should find the _.jar_ file with the client app packaged

image::images/devonfw-deployment/tutorial_devon_jspackaging_process02.png[,width="450",link="images/devonfw-deployment/tutorial_devon_jspackaging_process02.png"]

=== Preparing the server
The Java server application contains a _pom.xml_ file (3). In this _pom.xml_ file we should add the dependency to the _.jar_ client that we have just created using the references to the _groupId_, _artifactId_ and _version_ that we have specified in the client _pom.xml_.

So in the _pom.xml_ file of our server project we should add:

[source,xml]
----
    <dependency>
      <groupId>com.capgemini.devonfw</groupId>
      <artifactId>extjs-sample</artifactId>
      <version>1.0.0-SNAPSHOT</version>
      <type>zip</type>
      <classifier>web</classifier>
      <scope>runtime</scope>
    </dependency>
----

And in the plugins of the _pom.xml_ we should add a reference to the package again within the _<overlay>_ tag: 
[source,xml]
----
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <overlays>
            <overlay>
              <groupId>com.capgemini.devonfw</groupId>
              <artifactId>extjs-sample</artifactId>
              <type>zip</type>
              <classifier>web</classifier>
              <targetPath>jsclient</targetPath>
            </overlay>
          </overlays>
        </configuration>
      </plugin>
----

[NOTE]
====
If you are using a Sencha project as client app you must comment all the `<execution>` tags from the `exec-maven-plugin` inside the _jsclient_ profile as this configuration is related to _oasp4js_ projects.
====

Now verify that the server redirects to the client checking the `...\MyServerApp\server\src\main\webapp\index.jsp` file that should be 

.index.jsp
[source,java]
----
<%
  response.sendRedirect(request.getContextPath() + "/jsclient/");
%>
----

Then we have to add some unsecured resources in the method _configure(HttpSecurity http)_ of the `general/service/impl/config/BaseWebSecurityConfig.java` class. 

Edit the _unsecureResources_ to have something like that:
[source,java]
----
@Override
  public void configure(HttpSecurity http) throws Exception {

    String[] unsecuredResources =
        new String[] { "/login", "/security/**", "/services/rest/login", "/services/rest/logout", "/jsclient/**"};
    
    (...)

}
----

=== Packaging the apps
Finally we are going to package both client and server applications into the same _.war_ file. To do that we must execute the `package` Maven command (4) from within the projects root directory (the parent of the server project).

[source]
----
mvn package -P jsclient
----

=== Deploy on Tomcat

To deploy packaged Web Application Archive (.war) file that is integrated with client (Angular or Sencha Client) on Tomcat7/Tomcat 8, make below changes in java core application pom.xml file.

Example: For "oasp4j" project, make following changes in core application's "pom.xml" which is located in "oasp4j/samples/core/pom.xml".

- Modify dependency "spring-boot-starter-web" and add exclusions.
- Add new dependency "spring-boot-starter-tomcat".

[source,xml]
----
...
<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <exclusions>
            <exclusion>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-tomcat</artifactId>
            </exclusion>
       </exclusions>
</dependency>
<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-tomcat</artifactId>
      <scope>provided</scope>
</dependency>
...
----
- Comment the code inside core\src\main\java\io\oasp\gastronomy\restaurant\general\service\impl\config\ServletInitializer.java. This is not needed as we will be overriding the 'configure' method inside core\src\main\java\io\oasp\gastronomy\restaurant\SpringBootApp.java. 

[source,java]
----
public class SpringBootApp extends SpringBootServletInitializer {

  @Override
  protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {

    return application.sources(SpringBootApp.class);
  }

  /**
   * Entry point for spring-boot based app
   *
   * @param args - arguments
   */
  public static void main(String[] args) {

    SpringApplication.run(SpringBootApp.class, args);
  }
}
----
- Activate the 'jsclient' profile in server/pom.xml. Please see the snippet below. 
 
[source,xml]
----
 <profiles>
    <profile>
      <id>jsclient</id>
      <activation>
        <!--<activeByDefault>true</activeByDefault>-->
        <activeByDefault>true</activeByDefault>
      </activation>
      .....
      .....
     </profile>
</profiles>
----

Build the project and create packaged .war file. 

To deploy this .war file on Tomcat 7, follow the steps given below:

. Go to Tomcat installation folder (TOMCAT_HOME) -> Copy .war file to "TOMCAT_HOME/webapps" folder .
. If Tomcat is running, stop it by running "shutdown.bat" file under "TOMCAT_HOME/bin" folder.
. Delete  "TOMCAT_HOME/temp" and "TOMCAT_HOME/work" folders if present. These folders contain temporary files. (Mandatory to get desired output)
. Start Tomcat by running "startup.bat" under "TOMCAT_HOME/bin" folder.
. By default Tomcat will start on port "8080".

=== Running Bootified War

To run bootified war file , follow the steps given below:

. cd oasp4j\samples
. Execute 'mvn clean install'
. cd oasp4j\samples\server\target.
. Execute 'java -jar oasp4j-sample-server-bootified.war'

==== Application context root

In the case of bootified war, the context root will be '/' and not 'oasp4j-sample-server'. 

So, to access the application after the bootified war is launched , 
one has to access it via _http://localhost:8080/login_ or if the user wants to have a context root , 
then they can define the context 'oasp4j-sample-server' in _oasp4j\samples\core\src\main\resources\application.properties_. 

Make sure oasp4j\samples is built by executing 'mvn clean install' for this oasp4j\samples project and access it via _http://localhost:8080/oasp4j-sample-server_.
The context root defined in oasp4j\samples\core\src\main\resources\config\application.properties will not be available since it is excluded from the war that is generated.  