:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Mocks with Simlets: simulating server responses

Sencha Ext JS provides a utility to simulate server responses to any request, right in the browser.

Generally, these utilities are called `simlets`. Mocking something is not unknown to developers who write unit tests, however mocking an entire server or even a part of it isn't widely known and used during the client application development.

When developing client-server applications, the client, especially a single page application or a native client is designed to be independent from the server or it should really be.

Sencha out-of-box provides XML and JSON type of AJAX simlets, base classes are available to extend and create new ones that support other type of requests or envelopes, such as multipart/form-data or remote procedure calls.

=== Simlet Service

A singleton manager class provides transparent service to catch all the requests being sent to a specific endpoint without having the developer to change the application code. Endpoint doesn't even have to be existing, again, no running server required. See `Ext.ux.ajax.SimManager` for further details.

=== JSON Simlet

First, the simlet is registered. The following one define an endpoint, that will catch all requests sent to /users then returns an array of objects in JSON format.

[source,javascript]
----
Ext.ux.ajax.SimManager.register({  
    url : 'users',
    type : 'json',
    data : [
        {
            id : 1,
            username : 'server.simon',
            name : 'Server Simon'
        },
        {
            id : 2,
            username : 'client.clare',
            name : 'Client Clare'
        }
    ]
});
----

Now, we create an AJAX GET request to the /user's endpoint. It is simple as follows:

[source,javascript]
----
Ext.Ajax.request({  
    url : 'users',
    method : 'GET'
    success : function(response) {
        var users = Ext.decode(response.responseText);

        console.log(users.length); // 2
    }
});
----

The above simlet is static and doesn't distinguish request methods, however, it's often required to handle different methods and more complex requests. This is possible by registering dynamic simlets:

[source,javascript]
----
Ext.ux.ajax.SimManager.register({  
    url : 'users',
    type : 'json',
    data : function (request) {
        var xhr             = request.xhr,
            requestMethod   = xhr.method,
            requestHeaders  = xhr.requestHeaders,
            requestBody     = Ext.decode(xhr.body);

        // custom logic goes here

        return [
            {
                id : 1,
                username : 'server.simon',
                name : 'Server Simon'
            },
            {
                id : 2,
                username : 'client.clare',
                name : 'Client Clare'
            }
        ];
    }
});
----

Inside the method, every detail of the request is available for further processing, response has to be returned here as well.

== Simlets in Devon4Sencha

The Sample Application `ExtSample` comes with the Simlets configuration ready to be used.
Inside the `app` folder of the sample application, there is a file called `Simlets.js` that contains the server responses simulated for the AJAX requests:

[source,javascript]
----
Ext.define('Sample.Simlets', {
  singleton: true,
    requires:[
      'Ext.ux.ajax.SimManager', 'Ext.ux.ajax.JsonSimlet'
      ],

    useSimlets : function(){
        Ext.ux.ajax.SimManager.init({
            defaultSimlet: 404,
            defaultType: 'json'
        });
        Ext.ux.ajax.SimManager.register({
          url:/currentuser/,
          data:  {"id":2,"name":"waiter","firstName":"Willy","lastName":"Waiter","role":"WAITER"}
        });
        Ext.ux.ajax.SimManager.register({
          url:/csrftoken/,
          data:  { headerName: 'FAKE-CSRF', token: '1234-fake' }
        });
        Ext.ux.ajax.SimManager.register({
          url:/login/,
          data:  { headerName: 'FAKE-CSRF', csrf: '1234-fake' }
        });        
        Ext.ux.ajax.SimManager.register({
          url:/tablemanagement.v1.table.search/,
          data: function(request){
            console.log(Ext.decode(request.xhr.body));

            return {"pagination":{"size":500,"page":1,"total":null},"result":[{"id":101,"modificationCounter":1,"revision":null,"waiterId":null,"number":1,"state":"OCCUPIED"},{"id":102,"modificationCounter":2,"revision":null,"waiterId":null,"number":2,"state":"OCCUPIED"},{"id":103,"modificationCounter":1,"revision":null,"waiterId":null,"number":3,"state":"FREE"},{"id":104,"modificationCounter":1,"revision":null,"waiterId":null,"number":4,"state":"FREE"},{"id":105,"modificationCounter":1,"revision":null,"waiterId":null,"number":5,"state":"FREE"}]};
          }
        });
        Ext.ux.ajax.SimManager.register({
          url:/tablemanagement\/v1\/table\//,
          data:  function(request){
            console.log(Ext.decode(request.xhr.body));
            console.log("simlet used");
            return {"id":101,"modificationCounter":1,"revision":null,"waiterId":null,"number":1,"state":"OCCUPIED"}
          }
        });        
        Ext.ux.ajax.SimManager.register({
          url:/salesmanagement.v1.orderposition/,
          data: function(request){
            console.log(Ext.decode(request.xhr.body));

            return [{"id":1,"modificationCounter":1,"revision":null,"orderId":1,"cookId":null,"offerId":1,"offerName":"Schnitzel-Men端","state":"DELIVERED","drinkState":"DELIVERED","price":"6.99","comment":"mit Ketschup"},{"id":2,"modificationCounter":1,"revision":null,"orderId":1,"cookId":null,"offerId":2,"offerName":"Goulasch-Men端","state":"DELIVERED","drinkState":"DELIVERED","price":"7.99","comment":""},{"id":3,"modificationCounter":1,"revision":null,"orderId":1,"cookId":null,"offerId":3,"offerName":"Pfifferlinge-Men端","state":"DELIVERED","drinkState":"DELIVERED","price":"8.99","comment":""},{"id":4,"modificationCounter":1,"revision":null,"orderId":1,"cookId":null,"offerId":4,"offerName":"Salat-Men端","state":"DELIVERED","drinkState":"DELIVERED","price":"5.99","comment":""}];
          }
        });
    }
});
----

In the file `Application.js`, the Simlets file has been added as a required source and in the launch section the simlets have been initialized:

[source,javascript]
----
Ext.define('Sample.Application', {
    extend: 'Devon.App',

    name: 'Sample',

    requires:[
      'Sample.Simlets'
      ],

    controllers: [
        'Sample.controller.main.MainController',
        'Sample.controller.table.TablesController',
        'Sample.controller.cook.CookController'
    ],

    launch: function() {
        Devon.Log.trace('Sample.app launch');
        console.log('Sample.app launch');

        if (document.location.toString().indexOf('useSimlets')>=0){
          Sample.Simlets.useSimlets();
        }

        this.callParent(arguments);
    }
});
----

Finally, in the `app.json`, the package `ux` has been added (just above devon-extjs) for loading `Ext.ux Simlet` classes:

[source,javascript]
----
    "requires": [
        "font-awesome",
        "devon-extjs",
        "ux"
    ],
----

Therefore, for launching the ExtSample application, you just have to type the following url in the browser:

[source,javascript]
----
http://localhost:1841/ExtSample/?useSimlets=true
----

=== Use Simlets in your client application

Basically, you need to follow the same steps as for the sample application:

1. Create the file `Simlets.js` for specifiying the AJAX requests you want to simulate.
2. In `Application.js`, add the requires for the simlets file and the configuration for launching them.
3. In `app.json`, include the ux package in the requires, for loading Ext.ux Simlets classes.
4. Launch your application, by adding ?useSimlets=true to the url: http://localhost:1841/MyApp/?useSimlets=true

=== Simlets Benefits
Using Simlets, you can develop your client app without depending on the development speed on the server side. Sometimes, you can observe, how projects get delayed because some developers are waiting for some data from the server to test their code.

Here is a not so imaginary conversation between two developers:

____
*Clare (client)*: Hey dude, I really need you to make that API work.

*Simon (server)*: Yeah, I'm working on it, give me few more days!

*Clare (client)*: No way buddy, I cannot go any further with my task, you're holding me up!

*Simon (server)*: I'm doing my best. I'll let you know.
____

Unfortunately, Simon did not get back to Clare in time and the project got delayed.
Have you ever found yourself in the same situation?

Using Simlets. Now Clare could simulate an API to go further with her task and no need to wait until Simon finishes his one.