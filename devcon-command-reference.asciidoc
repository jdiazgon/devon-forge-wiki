:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Devcon Command Reference

image::images/devconlogo_full.png[,align="center",width="200",Devcon, link="images/devconlogo_full.png"]

In the introduction to Devcon we mentioned that Devcon is a tool based on modules that group commands so the different functionalities are stored in these modules that act as utilities containers.
The current version of devcon has been released with the following modules

- dist

- doc

- github

- help

- oasp4j

- oasp4js

- project

- sencha

- system

- workspace

[NOTE]
====
in your Devcon version more modules may have been included. You can list them using the option `devon -h`
====

=== dist

The _dist_ module is responsible for the tasks related with the distribution which means all the functionalities surrounding the configuration of the Devon distribution, including the obtention of the distribution itself.

==== dist install

The _install_ command downloads a distribution from a Team Forge repository and after that extracts the file in a location defined by the user.

===== dist install requirements

A user with permissions to download files from Team Forge repository.

===== _dist install_ parameters

The _install_ parameter needs four parameters to work properly:

- *user*: a Team Forge user with permissions to download files from the repository at least.

- *password*: the Team Forge user password.

- *path*: the path where the distribution must be downloaded.

- *type*: the type of distribution. The options are _'oaspide'_ to download a oasp4j based distribution or _'devondist'_ to download a Devon based distribution.

===== _dist install_ example of usage
A simple example of usage for this command would be the following

[source,batch]
----
D:\>devon dist install -user john -password 1234 -path D:\Temp\MyDistribution -type devondist
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
[INFO] installing distribution...
[INFO] Downloading Devon-dist_2.0.0.7z (876,16MB). It may take a few minutes.
[==========] 100% downloaded
[INFO] File downloaded successfully.
[...]
[INFO] extracting file...
[INFO] File successfully extracted.
[INFO] The command INSTALL has finished successfully
----

You must have in mind that this process can take a while, specially depending on your connection to the internet.

After downloading and installing the distribution successfully installed. You can now follow the manual steps as described in the Devonfw Guide or, alternatively, run 'devon dist init' to initialize the distribution.

==== dist init

The _init_ command initializes a newly downloaded distribution.

===== _dist init_ requirements

A new, not initialized distribution (running it on a configured distribution has no adverse side-effects).

===== _dist init_ parameters

The _init_ parameter needs one parameter to work properly:

- *path*: location of the Devon distribution (current dir if not given).

==== dist s2

The _s2_ command has been developed to automate the configuration process to use Devon as a Shared Service. This configuration is based on launching two scripts included in the Devon distributions, the _s2-init.bat_ and the _s2-create.bat_.
The _*s2-init.bat*_ is responsible for configuring the _settings.xml_ file (located in the _conf/.m2_ directory). Basically enables the connection of _Maven_ with the _Artifactory_ repository, where the Devon modules are stored, and adds the user credentials for this connection.

The _*s2-create.bat*_ creates a new project in the workspace of the distribution, and optionally does a checkout of a Subversion repository inside this new project. Finally the script creates a Eclipse _.bat_ starter related to the new project.

===== _dist s2_ requirements

- The command can be launched from any directory within a Devon distribution version 2.0.1 or higher. The Devon distribution is defined by having a _settings.json_ file located in the _conf_ directory. This file is a JSON object that defines parameters like the version of the distribution or the type which should be _devon-dist_ as is showed below.

[source,json]
----
{"version": "2.0.1","type": "devon-dist"}
----

- An _Artifactory_ user with permissions to download files from the repository.

- In case the optional checkout A Subversion user with permissions to do the checkout of the project specified in the _url_ parameter.

The command will search for this file to get the root directory where the scripts are located so is necessary to have this file in its correct location.

Apart from this the _settings.xml_ file needs to be compatible with the Shared Services autoconfiguration script (_s2-init.bat_).

===== _dist s2_ parameters

So the _s2_ command needs six parameters to be able to complete the two phases:

- *user*: the userId for Artifactory provided by S2 for the project.

- *pass*: the password for Artifactory.

- *engagementname*: the name of the repository for the engagement.

- *ciaas*: if the settings.xml must be configured for CIaaS user must set this as TRUE. Is an optional parameter with FALSE as default value.

- *projectname*: the name for the new project.

- *svnuser*: the user for the SVN.

- *svnpass*: the password for the SVN.

- *svnurl*: the url for the SVN provided by S2.

===== _dist s2_ example of usage

A simple example of usage for this command would be the followings:

If we only want to configure the _settigs.xml_ file without using the svn option the simplest usage would be

[source,batch]
----
D:\devon-dist\workspaces>devon dist s2 -user john -pass ZMF4AgyhQ5X6Sr9Bd1ohjWcFjL -engagementname myEngagement -projectname TestProject
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
[...]
INFO: Completed
Eclipse preferences for workspace: "TestProject" have been created/updated
Created eclipse-TestProject.bat
Finished creating/updating workspace: "TestProject"
----

After this the `conf/.m2/settings.xml` file should have been configured and a new (and empty) _TestProject_ directory must have been created in the _workspaces_ directory and in the distribution root a new _eclipse-testproject.bat_ script must have been created too.

We also can get the same result and configure the _settings.xml_ for CIaaS using the _ciaas_ parameter
[source,batch]
----
D:\devon-dist\workspaces>devon dist s2 -user john -pass ZMF4AgyhQ5X6Sr9Bd1ohjWcFjL -engagementname myEngagement -projectname TestProject -ciaas true
----

Using the svn option to automate the check out from the repository the usage would be

[source,batch]
----
D:\devon-dist\workspaces>devon dist s2 -user john -pass ZMF4AgyhQ5X6Sr9Bd1ohjWcFjL -engagementname myEngagement -projectname TestProject -svnurl https://coconet...Project/ -svnuser john_svn -svnpass 12345
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
[...]
[INFO] The checkout has been done successfully.
[INFO] Creating and updating workspace...
[...]
INFO: Completed
Eclipse preferences for workspace: "TestProject" have been created/updated
Created eclipse-TestProject.bat
Finished creating/updating workspace: "TestProject"
----

After this the `conf/.m2/settings.xml` file should have been configured and a new _TestProject_ directory must have been created in the _workspaces_ directory with all the files checked out from the svn repository and in the distribution root a new _eclipse-testproject.bat_ script must have been created too.


==== dist info

The _info_ command provides very basic information about the Devon distribution, like type, version and path.

===== _dist info_ parameters

The _dist info_ command has one optional parameter:

- *path*: path to the distro. Uses current directory if not specified.

=== doc

With this module we can access in a straightforward way to the documentation to get started with Devon framework. The commands of this module show information related with different components of Devon even opening in the default browser the sites related with them.

- `doc devon`: Opens the Devon site in the default web browser.

- `doc devonguide`: Opens the Devon Guide in the default web browser.

- `doc getstarted`: Opens the 'Getting started' guide of Devon framework.

- `doc links`: Shows a brief description of Devon framework and lists a set of links related to it like the public site, introduction videos, the Yammer group and so forth.

- `doc oasp4jguide`: Opens the OASP4J guide.

- `doc sencha`: Opens the Sencha Ext JS 6 documentation site.

=== github

This module is implemented to facilitate getting the Github code from OASP4J and Devon repositories. It has only two commands, one to get the OAPS4J code and other to get the Devon code.

==== github oasp4j

This command clones the oasp4j repository to the path that the user specifies in the parameters.

===== _github oasp4j_ parameters

The oasp4j command needs only one parameter:

- *path*: the location where the repository should be cloned.

- *proxyHost*: Host parameter for optional Proxy configuration.

- *proxyPort*: Port parameter for optional Proxy configuration.


===== _github oasp4j_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\Projects\oasp4j>devon github oasp4j
----

Or using the *-path* parameter
[source,batch]
----
D:\>devon github oasp4j -path C:\Projects\oasp4j
----

Also we can define, if necessary, a proxy configuration. The following example shows how configure the connection for Capgemini's proxy in Europe

[source, bath]
----
D:\Projects\oasp4j>devon github oasp4j -proxyHost 1.0.5.10 -proxyPort 8080
----


==== github devoncode

This command clones the Devon repository to the path specified in the path parameter.


===== _github devoncode_ requirements

A github user with download permissions over the Devon repository.


===== _github devoncode_ parameters

The _devoncode_ command needs three parameters:

- *path*: the location where the repository must be cloned.

- *username*: the github user (with permission to download).

- *password*: the password of the github user.

- *proxyHost*: Host parameter for optional Proxy configuration.

- *proxyPort*: Port parameter for optional Proxy configuration.


===== _github devoncode_ example of usage

A simple example of usage for this command would be the followingdevon

[source,batch]
----
D:\>devon github devoncode -path C:\Projects\devon -user John_g -pass 12345
----

Also we can define, if necessary, a proxy configuration. The following example shows how configure the connection for Capgemini's proxy in Europe

[source, bath]
----
D:\>devon github devoncode -path C:\Projects\devon -user John_g -pass 12345 -proxyHost 1.0.5.10 -proxyPort 8080
----

=== help

The help module is responsible for showing the help info to facilitate the user the knowledge to use the tool. It has only one command, the _guide_ command, that doesn't need any parameter and that basically prints a summary of the devcon general usage with a list of the global options and a list with the available modules

==== _help_ example of usage

[source,batch]
----
D:\>devon help guide
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: devon <<module>> <<command>> [parameters...]
Devcon is a command line tool that provides many automated tasks around
the full life-cycle of Devon applications.
 -h,--help        show help info for each module/command
 -v,--version     show devcon version
List of available modules:
> help: This module shows help info about devcon
> sencha: Sencha related commands
> dist: Module with general tasks related to the distribution itself
> doc: Module with tasks related with obtaining specific documentation
> github: Module to create a new workspace with all default configuration
> workspace: Module to create a new workspace with all default configuration
----

If you have follow this guide you can realize that the result is the same that is shown with other options as ```devon``` or ```devon -h```. This is because these options internally are using this module _help_.

=== oasp4j

This module groups all the devcon functionalities related to the server applications like creating, running and deploying server applications based on the OASP4J project.

==== oasp4j create

This command creates a new server project based on the OASP4J archetype.

===== _oasp4j create_ requirements

This command needs to be launched from within (or pointing to) a Devonfw distribution.

In a second term internally this command uses the _Maven_ plugin included in the Devonfw distributions so in order to be able to use this plugin we should launch this command from a Devonfw command line (use the _console.bat_ included in the Devonfw distributions).

===== _oasp4j create_ parameters

This command uses five parameters (four of them mandatory).

- *servername*: the name for the new server project.

- *serverpath*: the location for the new server project. Is an optional parameter, if the user does not provide it devcon will use the current directory in its place.

- *packagename*: the name for the project package.

- *groupid*: the groupId for the project.

- *version*: the version for the project.

===== _oasp4j create_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\devon-dist>devon oasp4j create -servername MyNewProject -packagename io.devon.application.MyNewProject -groupid io.devon.application -version 1.0-SNAPSHOT
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
[INFO] Scanning for projects...
[...]
[INFO] --------------------------------------
[INFO] BUILD SUCCESS
[INFO] --------------------------------------
[INFO] Total time: 7.203 s
[INFO] Finished at: 2016-07-14T13:00:17+01:00
[INFO] Final Memory: 10M/42M
[INFO] --------------------------------------
D:\>
----

Or using the optional _serverpath_ parameter to define the location for the project

[source,batch]
----
D:\>devon oasp4j create -servername MyNewProject -serverpath D:\devon-dist\ -packagename io.devon.application.MyNewProject -groupid io.devon.application -version 1.0-SNAPSHOT
----

After that we should have a new _MyNewProject_ project created in the _devon-dist_ directory.

==== oasp4j run

With this command the user can run a server project application from the embedded tomcat server.

===== _oasp4j run_ requirements

The command can be launched within a Devon distribution version 2.0.1 or higher. Also verify that your _oasp4j_ application has the devon.json file well configured.

In case you get a _Detected both log4j-over-slf4j.jar AND bound slf4j-log4j12.jar on the class path, preempting StackOverflowError_:

Seems that there is an error related to the Oasp4j Archetype version 2.1.0 that it's going to be addressed for next releases (more info link:https://github.com/oasp/oasp4j/pull/478/[here]).

However if you find that error you can apply the following workaround:

* Go to the _core/pom.xml_ file of your project and comment the dependency:
[source, xml]
----
<!--     <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.6.1</version>

    </dependency> -->
----

* Return to your project root directory and execute `mvn install` command.

* Try again with the `devon oasp4j run` command.

===== _oasp4j run_ parameters

The _run_ command handles two parameters

- *path*: to indicate the location of the core project of the server app. Is an optional parameter and if not provided by the user devcon will take as the path the directory from which the command has been launched.

- *port*: the port from which the app should be accessible.

===== _oasp4j run_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\devon-dist\workspaces\MyApp\core>devon oasp4j run -port 8081
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
Application started

[...]

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.3.3.RELEASE)

2016-07-01 11:13:59.006  INFO 6116 --- [           main] i.d.application.MyAp
p.SpringBootApp   : Starting SpringBootApp on LES002610 with PID 6116 (D:\devon-
alpha\workspaces\MyApp\core\target\classes started by pparrado in D:\devon-al
pha\workspaces\MyApp\core)

[...]

2016-07-01 11:14:18.297  INFO 6116 --- [           main] i.d.application.MyAp
p.SpringBootApp   : Started SpringBootApp in 19.698 seconds (JVM running for 35.
789)
----

Or providing the optional _path_ parameter

[source,batch]
----
D:\>devon oasp4j run -port 8081 -path D:\devon-dist\workspaces\MyApp\core
----

==== oasp4j build

With this command the user can build a server project, is the equivalent to the `mvn clean install` command

===== _oasp4j build_ requirements

In order to work properly the command must be launched from within (or pointing to) a OASP4J project directory (the oasp4j project type is defined in a _devon.json_ file with parameter 'type' set to 'oasp4j').

===== _oasp4j build_ parameters

This command only uses one parameter

-*path*: the location of the server project. This is an optional parameter and if the user does not provide it devcon will use in its place the current directory from which the command has been launched.

===== _oasp4j build_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\devon-dist\workspaces\MyApp>devon oasp4j build
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
projectInfo read...
path D:\devon-dist\workspaces\MyApp project type OASP4J

[...]

[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] MyApp .............................................. SUCCESS [  0.301 s]
[INFO] MyApp-core ......................................... SUCCESS [ 12.431 s]
[INFO] MyApp-server ....................................... SUCCESS [  3.699 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 16.712 s
[INFO] Finished at: 2016-07-15T11:44:00+01:00
[INFO] Final Memory: 31M/76M
[INFO] ------------------------------------------------------------------------
D:\devon-dist\workspaces\MyApp>
----

Or using the optional parameter _path_

[source,batch]
----
D:\>devon oasp4j build -path D:\devon-dist\workspaces\MyApp
----

=== oasp4js

The oasp4js module is responsible for automating the tasks related to the client projects based on Angular.

==== oasp4js create

With this command the user can create a basic oasp4js app.

===== _oasp4js create_ requirements

This command must be used within a Devonfw distribution with version 2.0.0 or higher. You can check your distribution's version looking at the conf/settings.json file.

===== _oasp4js create_ parameters

This command accepts two parameters:

- *clientname*: the name for the application.

- *clientpath*: the location for the new application. Is an optional parameter and if not provided by the user devcon will take as the path the directory from which the command has been launched.

===== _oasp4js create_ example of usage

A simple example of usage for this command would be the following

[source, batch]
----
D:\devon-dist\workspaces>devon oasp4js create -clientname MyOasp4jsApp
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
Creating project MyOasp4jsApp...
installing ng
  create .editorconfig
  create README.md
  create src\app\app.component.css
  [...]
  create tslint.json
Installing packages for tooling via npm.
Installed packages for tooling via npm.
Project 'MyOasp4jsApp' successfully created.
Adding devon.json file...
Project build successfully

D:\devon-dist\workspaces>
----

If everything goes right a new directory _MyOasp4jsApp_ must have been created containing the basic structure of an _oasp4js_ app.

The user can also use the next command _oasp4js build_ to do that last operation.

==== oasp4js build

With this command the user can resolve the dependencies of an _oasp4js_ app. The _oasp4js build_ command is the equivalent to the `ng build` command.

===== _oasp4js build_ parameters

- *path*: The location of the _oasp4js_ app. Is an optional parameter and if not provided devcon will use the current directory from which the command has been launched instead.

===== _oasp4js build_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\devon-dist\workspaces\MyOasp4jsApp>devon oasp4js build
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
Building project...
Hash: 936deb00dfd88c0d9e56
Hash: 936deb00dfd88c0d9e56
Time: 12735ms
Time: 12735ms
chunk    {0} polyfills.bundle.js, polyfills.bundle.js.map (polyfills) 177 kB {4} [initial] [rendered]
[...]
chunk    {4} inline.bundle.js, inline.bundle.js.map (inline) 0 bytes [entry] [rendered]
Project build successfully
----

Or using the optional parameter _path_

[source, batch]
----
D:\devon-dist>devon oasp4js build -path D:\devon-dist\workspaces\MyOasp4jsApp
----

==== oasp4js run

In order to launch the _oasp4js_ apps devcon provides this _run_ command that can be launched even without parameters.

===== _oasp4js run_ parameters

The only parameter needed is the _clientpath_ that points to the client app. This is an optional parameter and if not provided devcon will use by default the directory from within the command is launched.

===== _oasp4js run_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\devon-dist\workspaces\MyOasp4jsApp>devon oasp4js run
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
Project starting
** NG Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200 **
** NG Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200 **
Hash: 7f1a11f3e039fd0028ac
Hash: 7f1a11f3e039fd0028ac
Time: 14333ms
Time: 14333ms
chunk    {0} polyfills.bundle.js, polyfills.bundle.js.map (polyfills) 177 kB {4} [initial] 
[...]
chunk    {4} inline.bundle.js, inline.bundle.js.map (inline) 0 bytes [entry] [rendered]
webpack: Compiled successfully.
webpack: Compiled successfully.
----

Or using the optional parameter _clientpath_

[source,batch]
----
D:\devon-dist>devon oasp4js run -clientpath D:\devon-dist\workspaces\MyOasp4jsApp
----

In both cases, after launching the command, the app should be available through a web browser in url `http://localhost:4200`.

////
==== oasp4js jumpstart

This command allows users to get the Oasp4js sample app with all its dependencies included. The command downloads a zip file from Teamforge and extracts all its content in the user's environment.

==== _oasp4js jumpstart_ requirements

A user with permissions to download files from Team Forge repository.

==== _oasp4js jumpstart_ parameters

- *path*: the location for the oasp4js sample app file. Is an optional parameter, if not provided the current path will be used.

- *user*: a Team Forge user with permissions to download files from the repository at least.

- *password*: the Team Forge user password.

- *angularVersion*: Optional parameter to choose the Angular version in wich the sample app is based. The options are '1' to download Oasp4js sample app based on Angular 1 and '2' to download Oasp4js sample app based on Angular 2. When not provided by the user the default value for this parameter will be '1'.

==== _oasp4js jumpstart_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\>devon oasp4js jumpstart -user john -password 1234
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
[INFO] downloading file...
[INFO] Downloading oasp4js-1.1.0.zip (52,76MB). It may take a few minutes.
[==        ] 29% downloaded

[...]

file unzip : D:\Temp\.\oasp4js-1.1.0\npm-shrinkwrap.json
file unzip : D:\Temp\.\oasp4js-1.1.0\package.json
file unzip : D:\Temp\.\oasp4js-1.1.0\README.md
Done
File successfully downloaded.
----

Or using optional parameters to define a different location and the Angular version

[source,batch]
----
D:\>devon oasp4js jumpstart -user john -password 1234 -path D:\my\custom\location -angularVersion 2
----
////
=== project

The _project_ module groups the funcionalities related to the combined server + client projects.

==== project create

With this command the user can automate the creation of a combined server and client project (Sencha or oasp4js).

===== _project create_ requirements

If you want to use a Sencha app as client you will need a github user with permissions to download the _devon4sencha_ repository.

===== _project create_ parameters

Basically this command needs the same paremeters as the 'subcommands' that is using behind (`oasp4j create`, `oasp4js create`, `sencha workspace` and `sencha create`)

- *combinedprojectpath*: the path to locate the server and client projects. Is an optional parameter and if not provided by the user devcon will take as the path the directory from which the command has been launched.

- *servername*, *packagename*, *groupid*, *version*: the parameters related to the Server application. You can get more details in the 'oasp4j create' command reference in this document.

- *clienttype*: the type for the client app, you can provide _oasp4js_ for Angular based client or _devon4sencha_ for Sencha based client.

- *clientname*: the name for the client app.

- *clientpath*: the path to locate the client app. Current directory if not provided.

- *createsenchaws*: is an optional parameter that indicates if the Sencha workspace needs to be created (by default its value is FALSE).

===== _project create_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\devon-dist\workspaces\combined>devon project create -servername myServerApp -groupid com.capgemini.devonfw -packagename com.capgemini.devonfw.myServerApp -version 1.0 -clientname myClientApp -clienttype oasp4js
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
serverpath is D:\devon-dist\workspaces\combined\.
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Stub Project (No POM) 1
[INFO] ------------------------------------------------------------------------

[...]

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6.862 s
[INFO] Finished at: 2016-08-05T09:23:35+01:00
[INFO] Final Memory: 10M/43M
[INFO] ------------------------------------------------------------------------
Adding devon.json file...
Project Creation completed successfully
Creating client project...
Creating project myClientApp...
Adding devon.json file...
Editing java/pom.xml...
Project created successfully. Please launch 'npm install' to resolve the project dependencies.
Adding devon.json file to combined project...
Combined project created successfully.
----

With this example we have created a Server + Oasp4js app in the `D:\devon-dist\workspaces\combined` directory. So within this folder we should find:

- _myServerApp_ folder with the `oasp4j` app.

- _myClientApp_ folder with the `oasp4js`app.

- the `devon.json` file with the following configuration:
[source, json]
----
{"version": "2.0.1",
"type":"COMBINED",
"projects":["myServerApp", "myClientApp"]
}
----

As you can see the 'projects' property points to the 'subprojects' created. In case we had used the _clientpath_ parameter to locate it in a different place that 'project' will reflect it pointing to the client path location:
[source, json]
----
{"version": "2.0.1",
"type":"COMBINED",
"projects":["myServerApp", "D:\\devon-dist\\otherDirectory\\myClientApp"]
}
----

Other possible usages

- `D:\devon-dist\TEST>devon project create -servername sss -groupid com.cap -packagename com.cap.sss -version 1.0 -clientname ccc -clienttype devon4sencha -clientpath D:\devon-dist\TESTB`

  Will create a server app (sss) in current directory and a Sencha app in the TESTB directory (that must be a Sencha workspace)

- `D:\devon-dist\TEST>devon project create -servername sss -groupid com.cap -packagename com.cap.sss -version 1.0 -clientname ccc -clienttype devon4sencha -clientpath D:\devon-dist\TESTB -createsenchaws true`

  Will create a server app (sss) in current directory and a Sencha workspace with a Sencha app inside in the TESTB directory.

- `D:\devon-dist\TEST>devon project create -servername sss -groupid com.cap -packagename com.cap.sss -version 1.0 -clientname ccc -clienttype devon4sencha`

  Will create a server app (sss) and a Sencha workspace with a Sencha app inside, all in current directory.

==== project build

This command will build both client and server project.

===== _project build_ requirements

In order to work properly, the command must be launched from within (or pointing to) a Devon distribution (the oasp4j project type is defined in a _devon.json_ file with parameter 'type' set to 'oasp4j' in the server project ).
The directory from where build command is fired should contain client and server project at same level, and directory should contain a _devon.json_ which should have project type as _COMBINED_,and  client  project should contain a _devon.json_ file with parameter 'type' set to  'oasp4js' or 'devon4sencha'.

==== _project build_ parameters

The build command takes three parameters and two of them are mandatory.

- *path* : This is an optional paremaeter. It points to server project workspace and if value of this parameter not given, it takes default value as current directory.

- *clienttype* : This parameter shows which type of client is integrated with server i.e oasp4js or sencha. Its a mandatory one.

- *clientpath* : It should point to client directory i.e where the client code is located. Again a mandatory one.

===== _project build_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\>devon project build -path D:\FIN_IDE\oasp4j-ide-all-2.0.0\samplec -clienttyp
e oasp4js -clientpath D:\FIN_IDE\oasp4j-ide-all-2.0.0\clientdoc
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
projectInfo read...
path D:\FIN_IDE\oasp4j-ide-all-2.0.0\samplecproject type OASP4J
Completed
path D:\FIN_IDE\oasp4j-ide-all-2.0.0\clientdocproject type OASP4JS
Completed
----

==== project deploy

This command automates all the process described in the <<Deployment on Tomcat (Client/Server),deployment on tomcat>> section. It creates a new tomcat server associated to the combined server + client project in the _software_ directory of the distribution and launches it to make the project available in a browser.

===== _project deploy_ requirements

The command automates the packaging of the combined Server + Client project but the user must configure those apps to work properly so you need to varify that:

- The client app _points_ to the server app: in Sencha projects the 'server' property of _app/Config.js_ or app/ConfigDevelopment.js_ (depending of the type of build) must point to your server app. In case of oasp4js projects we will need to configure the _baseUrl_ property of the'config.json' file to point to our server.

- The server redirects to the client: in the server project the file `...\serverApp\server\src\main\webapp\index.jsp` should redirect to `jsclient` profile
.index.jsp
[source,java]
----
<%
  response.sendRedirect(request.getContextPath() + "/jsclient/");
%>
----

- The combined project must have a `devon.json` file defining the type (that must be 'combined') and the subprojects (server and client):
[source,json]
----
{"version": "2.0.1",
"type":"COMBINED",
"projects": ["D:\devon-dist\workspaces\SenchaWorkspace\myClientApp","myServerApp"]
}
----

In the example above that `devon.json` file defines a server app (_myServerApp_) that is located within the combined project directory (so we do not need to provide a path, only the folder name) and a client app (_myClientApp_) located in a Sencha workspace outside the combined project directory (so we need to provide the path).

- Each 'subprojects' (server and client) must have its corresponding `devon.json` file well formed (the 'type' must be _oasp4j_ for server and for client apps _oasp4js_ or _devon4sencha_).

- The command must be launched from within a valid Devonfw distribution.

===== _project deploy_ parameters

- *tomcatpath*: the path to the tomcat folder. Devcon will look for the distribution's Tomcat when this parameter is not provided.

- *clienttype*: type of client either angular or Sencha (obtained from 'projects' property in devon.json when not given).

- *clientpath*: path to client project (obtained from 'projects' property in devon.json when not given).

- *serverpath*: path to server project (obtained from 'projects' property in devon.json when not given).

- *path*: path for the combined project (current directory when not given).

===== _project deploy_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\devon-dist\workspaces\MyCombinedProject>devon project deploy
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
[...]
##########################################################################
After Tomcat finishes the loading process the app should be available in:
localhost:8080/myServerApp-server-1.0
##########################################################################
----

The process will open a new command window for the Tomcat's launching process and finally will shows us the url where the combined app should be accesible.

[NOTE]
The url is formed with the name of the .war file generated when packaging the app.

If we use the optional parameter _path_

[source,batch]
----
D:\devon-dist>devon project deploy -path D:\devon-dist\workspaces\MyCombinedProject
----

==== project run

This command  runs the server & client project(unified build) in debug mode that is separate client and spring boot server.

==== _project run_ requirements

Please verify the _oasp4j run_ and _oasp4js run_ or _sencha run_ requirements.

==== _project run_ parameters

- *clienttype* : This parameter shows which type of client is integrated with server i.e oasp4js or sencha and its a mandatory parameter

- *clienttype* : the type of the client app ('oasp4js' or 'devon4sencha').

- *clientpath* : Location of the oasp4js app.

- *serverport* : Port to start server.

- *serverpath* : Path to Server project Workspace (currentDir if not given).

==== _project run_ example of usage

A simple example of usage for this command ( for client type oasp4js) would be the following

[source , batch]
----
D:\>devon project run -clienttype oasp4js -clientpath D:\FIN_IDE\oasp4j-ide-all-
2.0.0\workspaces\main\examples\oasp4js -serverport 8080 -serverpath D:\FIN_IDE\o
asp4j-ide-all-2.0.0\workspaces\main\code\oasp4j\samples\server
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
path before modification D:\FIN_IDE\oasp4j-ide-all-2.0.0\workspaces\main\code\oa
sp4j\samples\server
Server project path D:\FIN_IDE\oasp4j-ide-all-2.0.0\workspaces\main\code\oasp4j\
samples\server
Application started
Starting application
----

After launching the command, a browser should be opened and will show the welcome page of the oasp4js app.



=== sencha

_Sencha_ is a pure JavaScript application framework for building interactive cross platform web applications and is the view layer for web applications developed with Devon Framework. This module encapsulates the _Sencha Cmd_ functionality that is a command line tool to automate tasks around _Sencha_ apps.

==== sencha run

This command compiles in DEBUG mode and then runs the internal Sencha web server. Is the equivalent to the _Sencha Cmd_'s ```sencha app watch``` and does not need any parameter.

===== _sencha run_ requirements

We should launch the command from a Devon4Sencha project which is defined by a _devon.json_ file with parameter 'type' set to 'Devon4Sencha'

[source,json]
----
{ "version": "2.0.0",
  "type":"Devon4Sencha"}
----

===== _sencha run_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\devon-dist\workspaces\senchaProject>devon sencha run
----

==== sencha workspace

With this command we can generate automatically a fully functional Sencha workspace in a directory of our machine.

===== _sencha workspace_ requirements

We will need a Github user with permissions to clone the _devon4sencha_ repository.

===== _sencha workspace_ parameters

The _sencha workspace_ command needs five parameters and four of them are mandatory.

- *path*: the location where the workspace should be created. This parameter is optional and if the user does not provide it devcon will take the current directory as the location for the Sencha workspace.

- *username*: the github user with permission to download the _devon4sencha_ repository.

- *password*: the password of the github user.

- *proxyHost*: Host parameter for optional Proxy configuration.

- *proxyPort*: Port parameter for optional Proxy configuration.

===== _sencha workspace_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\>devon sencha workspace -path D:\MyProject -username john -password 1234
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
Cloning into 'D:\MyProject\MySenchaWorkspace'...
Having repository: D:\MyProject\MySenchaWorkspace\.git
----

So after that we will have a sencha workspace located in the _D:\MyProject_ directory.

Also we can define, if necessary, a proxy configuration. The following example shows how to configure the connection for Capgemini's proxy in Europe

[source,batch]
----
D:\>devon sencha workspace -path D:\MyProject -username john -password 1234 -proxyHost 1.0.5.10 -proxyPort 8080
----

==== sencha copyworkspace

With this command we can make create new Sencha workspace by making a copy from an existing Devon dist to a particular path

===== _sencha copyworkspace_ requirements

There should be a Devonfw distribution present which included the 'workspaces\examples\devon4sencha' folder

===== _sencha copyworkspace_ parameters

The _sencha copyworkspace_ command needs two parameters. Both are optional.

- *workspace*: the path to the workspace. This parameter is optional. Devcon will take the current directory if not provide and in that case it will use the name 'devon4sencha'.

- *distpath*: the path to a Devonfw Dist (Current directory if not provided)

==== sencha build
This command builds a Sencha Ext JS6 project. Is the equivalent to the _Sencha Cmd_'s ```sencha app build```.

===== _sencha build_ parameters

This command only has one parameter and it is optional

- *appDir*: the path to the app to be built. If the user does not provide it devcon will use the current directory as the location of the Sencha app.

===== _sencha build_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\MySenchaWorkspace\MyApp>devon sencha build
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
OUTPUT:Sencha Cmd v6.1.2.15
OUTPUT:[INF] Processing Build Descriptor : classic
[...]
[INFO] [LOG] Sencha App Watch Started
[INFO] [LOG]Sencha Build Successful
D:\MySenchaWorkspace\MyApp>
----

And using the optional parameter _appDir_ to locate the app the usage would be like the following

[source,batch]
----
D:\>devon sencha build -appDir D:\MySenchaWorkspace\MyApp
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
OUTPUT:Sencha Cmd v6.1.2.15
OUTPUT:[INF] Processing Build Descriptor : classic
[...]
[INFO] [LOG] Sencha App Watch Started
[INFO] [LOG]Sencha Build Successful
D:\>
----

==== sencha create

This command creates a new Sencha Ext JS6 app.

===== _sencha create_ requirements

The command must be launched within a Sencha workspace or pointing to a Sencha workspace using the optional parameter _workspacepath_. So in order to work properly first we will need to have a Sencha workspace ready in our local machine.

===== _sencha create_ parameters

The create parameters handles two parameters

- *appname*: the name for the new app.

- *workspacepath*: optionally the user can specify the location of the Sencha workspace. If the user does not provide it the current directory will be use as default.


===== _sencha create_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\MySenchaWorkspace>devon sencha create -appname MyNewApp
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
OUTPUT:Sencha Cmd v6.1.2.15
OUTPUT:[INF] Loading framework from D:\MySenchaWorkspace\
[...]
[INFO] [LOG]Sencha Ext JS6 app Created
D:\MySenchaWorkspace>
----

And using the optional parameter _workspacepath_ to locate the Sencha workspace the command would be like the following

[source,batch]
----
D:\>devon sencha create -appname MyNewApp -workspacepath D:\MySenchaWorkspace
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
OUTPUT:Sencha Cmd v6.1.2.15
OUTPUT:[INF] Loading framework from D:\MySenchaWorkspace\
[...]
[INFO] [LOG]Sencha Ext JS6 app Created
D:\>
----

After that we will have a new Sencha app called _MyNewApp_ in our Sencha workspace.

=== workspace

This module handles all tasks related to distribution workspaces.

==== workspace create

This command automates the creation of new workspaces within the distribution with the default configuration including a new Eclipse _.bat_ starter related to the new project.

===== workspace create parameters

The create command needs two parameters:

- *devonpath*: the path where the devon distribution is located.

- *foldername*: the name for the new workspace.

===== _workspace create_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\>devon workspace create -devonpath C:\MyFolder\devon-dist -foldername newproject
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
[INFO] creating workspace at path D:\devon2-alpha\workspaces\newproject
[...]
----

As a result of that a new folder _newproject_ with the default project configuration should be created in the _C:\MyFolder\devon-dist\workspaces_ directory alongside an _eclipse-newproject.bat_ starter script in the root of the distribution.

=== system

This module contains system wide commands related to devcon.

==== system install

This command installs devcon on user's HOME directory or at an alternative path provided by user.

It should be used as a very first step to install Devcon, <<Download Devcon,see more here>>

[source,batch]
----
> java -jar devcon.jar system install
----

If you are behind a proxy you must configure the connection using the optional parameters *-proxyHost* and *-proxyPort*. In following example we show how to use the _system install_ command for Capgemini's proxy in Europe

[source,batch]
----
> java -jar devcon.jar system install -proxyHost 1.0.5.10 -proxyPort 8080
----

==== system update

Launching this command the user can update the Devcon version installed to the last version available.

===== _system update_ example of usage

A simple example of usage for this command would be the following

[source,batch]
----
D:\>devon system update
----

As occurs with the _system install_ command, if you are behind a proxy you will need to use the optional parameters *-proxyHost* and *-proxyPort* to configure the connection. The following example shows how to configure the _system update_ with the Capgemini's proxy in Europe

[source,batch]
----
D:\>devon system update -proxyHost 1.0.5.10 -proxyPort 8080
----
