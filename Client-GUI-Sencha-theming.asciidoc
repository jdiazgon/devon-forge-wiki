:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Theming

We are going to create a custom theme for our application. In the application path (devon4sencha/demo) we have to execute the following command in **Sencha Cmd** console:

[source,javascript]
----
sencha generate theme demo-theme
----

This command should have created a new `demo-theme` folder, with the theme files and resources, in the path `devon4sencha/packages/local`. Let’s take a look at the default contents of the custom theme folder:

* **package.json** - This is the package properties file. It tells Sencha Cmd certain things about the package like its name, version, and dependencies (other packages that it requires).

* **sass/** - This directory contains all of your theme’s Fashion source files. The source files are divided into 4 main sections: 

** **sass/var/** - contains variables.
** **sass/src/** - contains rules and UI mixin calls that can use the variables defined in `sass/var/`.
** **sass/etc/** - contains additional utility functions or mixins.
** **sass/example** - contains files used when generating sample components used in image slicing (despite its name, this folder is used by Sencha Cmd and should not be deleted)

* **resources/** - contains images and other static resources that your theme requires

* **overrides/** - contains any JavaScript overrides to Ext JS component classes that are required for theming those components

=== Configuring Theme Inheritance

All Sencha theme packages are part of a larger hierarchy of themes and each theme package must extend a parent theme. The next step in creating our custom theme is to select which theme to extend. The following image is an overview of Sencha theme hierarchy.

image::images/client-gui-sencha/senchaThemes.PNG[Sencha Themes,width="450", link="images/client-gui-sencha/senchaThemes.PNG"]

In this tutorial we will create a custom theme that extends the Triton theme. The first step is to configure our custom theme with the name of the theme it is extending. This is done by changing the extend property in `packages/local/demo-theme/package.json` from its default value as shown here:

[source,javascript]
----
"extend": "theme-triton"
----

=== Using a Theme in an Application

To configure your test application to use your custom theme, change the theme selection line in the application `app.json` file in the path `demo/app.json`.

[source,javascript]
----
"theme": "demo-theme"
----

Run the application and check it the new style. Now the application theme should be like triton theme because we have extended this theme in our **demo-theme**.

image::images/client-gui-sencha/theming1.PNG[Theming 1,width="450", link="images/client-gui-sencha/theming1.PNG"]

=== Making changes in the Theme

There are a set of variables used across all components. These variables are defined in a global scss class called Component.scss. 
Here is the full documentation for global variables: _https://docs.sencha.com/extjs/6.0/6.0.1-classic/#!/api/Global_CSS-css_var-S-base-color_

Let’s start by modifying the base color from which many Ext JS components’ colors are derived. Due to the use of _$base-color_ 
through the default themes making a global change to `$base-color` will have an effect on most all components in the Ext 
JS library. Create a new folder / file: `packages/local/demo-theme/sass/var/Component.scss`. 
Add the following code to the _Component.scss_ file:

[source,javascript]
----
$base-color: #317040;
----

Check the new look of our application.

Sencha components style has been defined with CSS variables, so in every component Sencha documentation, there is a section for CSS vars. 

image::images/client-gui-sencha/senchaDocs.PNG[Sencha Docs,width="450", link="images/client-gui-sencha/senchaDocs.PNG"]

Changing the value of these variables, we can adapt the style of these components to our desired style.
For example, we are going to change a bit the style of the buttons.

Create a new folder `button` and a new file Button.scss: `packages/local/demo-theme/sass/var/button/Button.scss`.

Add the following code to the Button.scss file:

[source,javascript]
----
$button-default-color: #ffffff;
$button-default-base-color: #A4A4A4;
----

Go to the application and check the grey background-color and the white color of the `page1` and `My new page` toolbar buttons.

image::images/client-gui-sencha/theming2.PNG[Theming 2,width="450", link="images/client-gui-sencha/theming2.PNG"]

=== Adding customs UI’s

Every component in the Ext JS framework has a user interface (ui) configuration, which defaults to default. This property can be configured on individual component instances to give them a different appearance from other instances of the same type. For example, in the Neptune theme, panels with the ‘default’ UI have dark blue headers and panels with the ‘light’ UI have light blue headers.

The `theme-neutral` theme includes mixins for many different Ext JS components. You can call these mixins to generate new UIs for components. Available mixins for each component are listed in the API documentation. For example, see Ext.button.Button in Sencha documentation and scroll down to the `CSS Mixins` section to see what parameters the Button UI mixin accepts.

We are going to create a custom UI for a small button in toolbar. 

Create a new folder `button` inside `scr` and a new file: `packages/local/demo-theme/sass/src/button/Button.scss`.
Add the following code to the Button.scss file:

[source,javascript]
----
@include extjs-button-toolbar-small-ui(
	$ui: 'blue-btn',

	$border-color: transparent,
	$border-color-over: transparent,
	$border-color-focus: transparent,
	$border-color-pressed: transparent,
	$border-color-focus-over: transparent,
	$border-color-focus-pressed: transparent,
	$border-color-disabled: transparent,

	$background-color: #0080FF,
	$background-color-over: #0080FF,
	$background-color-focus: #0080FF,
	$background-color-pressed: #0080FF,
	$background-color-focus-over: #0080FF,
	$background-color-focus-pressed: #0080FF,
	$background-color-disabled: #0080FF,

	$color: #ffffff,
	$color-over: #ffffff,
	$color-focus: #ffffff,
	$color-pressed: #ffffff,
	$color-focus-over:#ffffff,
	$color-focus-pressed: #ffffff,
	$color-disabled: #ffffff
);
----

By default, Sencha apply the CSS class `x-btn-default-toolbar-small` to a normal button in a toolbar so as we said the default ui for this kind of buttons is `default`, for this reason, we have to change the button `ui` to use our `blue-btn` style.
Add button ui property in the Search button in the file `TableListV.js`.

[source,javascript]
----
{
    xtype:'button',
	ui:'blue-btn-toolbar',
    text:'Search',
    width:80,
    listeners:{
        click:'doSearch'
    }
}
----

Check the result.

image::images/client-gui-sencha/theming3.PNG[Theming 3,width="450", link="images/client-gui-sencha/theming3.PNG"]