:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Sencha Client and Sencha Architect project generation

The generation can create a full EXT JS 6 client using the StarterTemplates of the Devon4Sencha package and a Sencha Architect project as well. For more details about the project layout and the template used, please refer to Devon4Sencha documentation link:https://github.com/devonfw/devon/wiki/Client-GUI-Sencha-devon4sencha-application-structure[here].

=== Getting ready

==== Sencha Workspace and App

For a new EXT JS 6 project:

===== Step 1: Devon4Sencha workspace

Copy from workspaces\examples of your DevonFW distribution the devon4sencha folder into the core folder of your OASP4J project.

____
In windows you can use a "junction" to create a symbolic link to the devon4sencha folder instead of copying it. To leverage this NTFS feature you need to use a external tool (https://technet.microsoft.com/en-us/sysinternals/bb896768.aspx) since Windows doesn't provide an utility to create them
____

Using the restaurant example, the project structure will be like this:

----
oasp4j/
      samples/
              core/
                   src/main/java/
                   devon4sencha/
                   ...
----


[IMG workspace1]

===== Step 2: Create the app

Open a console and navigate to the decon4sencha directory from the core folder and write the following command, being APP_NAME the same name as the last part of the basePackage, the name of the package where the SpringBootApp class is:

[source,bash]
----
sencha generate app -ext {APP_NAME} {APP_NAME}
----

For example:

[source,bash]
----
sencha generate app -ext restaurant restaurant
----

image::images/devonfw-cobigen/devon_guide_cobigen9_sencha_app_gen.png[link="images/devonfw-cobigen/devon_guide_cobigen9_sencha_app_gen.png"]


Refresh your OASP4J project (F5).

===== Step 3: Config.js and ConfigDevelopment.js

Edit this two files to configure the endpoint where the ajax calls have to be made. ConfigDevelopment overrides the values in Config.js but it is skipped when doing production builds.

During development you will be deploying client and server code independently, this is more productive since you avoid building the whole package only for changes on the JavaScript files. What this is that JavaScript code has to make ajax request to a different domain to where the code is being called.

To enable this and avoid getting cross domain browser errors you have to enable CORS on the server side.

==== CobiGen Templates

Before begin the generation, import the CobiGen_templates project included at yor DevonFW distribution into your Eclipse work space

The project has the templates for the Sencha Client and Sencha Architect project generation.

=== Generating

==== Input

The input file for the generation must be the *Eto* file because is the object transferred between the server and the client.

image:images/devonfw-cobigen/devon_guide_cobigen9c_sencha_app_gen.png[CobiGen Menu,width="450",link="images/devonfw-cobigen/devon_guide_cobigen9c_sencha_app_gen.png"]

==== Wizard

If the templates are imported at the Eclipse workspace, and the input file is an *Eto*, the wizard will open, this increments can be chosen:

* Sencha Client App
* Sencha Architect Project

For the first time generation, the APPNAME_architect_project folder will be created at the root of the origin project with all the folders and files generated. After that, all the next generations will be merged at thus folders.


=== Deploying

* To deploy the Sencha Client App:

. Just run over the APPNAME folder from the console the following command:
[source,bash]
----
sencha app watch
----

* To deploy the Sencha Architect Project
. just double click over the `.xds` file or opening it with the Sencha Architect menu.
