:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Devonfw Dist IDE Developers Guide

=== Windows

In this section, we focus on 

* How to create a new Devon distribution environment ,in order to publish a new release of the distribution in which new features and functionalities are included.(Windows OS)
* How to create Devon distribution zip in case of an intermediate release.
* How to create a new Devon Distribution environment, in order to publish a new release of the distribution in which new features and functionalities are included.(Linux OS)

==== Downloading the OASP IDE

To create the new Devon distribution, you need to start from the last OASP-IDE distribution, that can be found https://coconet.capgemini.com/sf/go/projects.apps2_devon/frs.oasp4j_ide[here].
Now, you have an OASP .zip file, so the next step is to extract the file in a folder of your local machine. After extracting the oasp4j-ide-all.zip, rename it to fit to your new devon version.

==== Addition of Plugins

The Devon distribution has some plugins that are not included in the OASP distribution, so you need to add them in the new version. In other scenario, it is possible that some existing plugin might be out of date, so you need to update it.
Plugins to include:

* Sencha
* Cobigen
* Subversion

===== Adding Sencha plugin

Sencha (Ext JS) is a pure JavaScript application framework for building interactive cross platform web applications using techniques such as Ajax, DHTML and DOM scripting. Sencha is the framework used in Devon to create the client side.

*1. Download Sencha Cmd*

Firstly, you need the latest version of the software. You can download it from the https://www.sencha.com[Sencha’s website]. You must look for the Sencha Cmd package.

*2. Install Sencha*

To install the software, choose a proper location or directly create a Sencha directory in the software folder of the distribution and select this folder to do the installation. If you install it in another location, copy the installation content to your +software\Sencha folder+.
To complete the installation, you need to add the ext folder to the plugin. To do so, you must:

* Copy from the previous distribution the +software\Sencha\Cmd\default\repo*extract*+ directory and paste it in the  same place of your new distribution.

* Copy from the previous distribution the software\Sencha\Cmd\default\repo\pkgs*ext* directory and paste it in the same place of your new distribution.

*3. Check the installation*

A quick way to check if Sencha is installed is, to open the distribution console (launching the console.bat script) and type the command sencha, the console must return the Sencha version installed.
 
If there is no response, you must check your Sencha installation.
But, to check if the installation is completely successful, you should compile the ExtSample app that can be obtained at the end section of this document. So, this check will be delayed until that moment.

===== Adding Subversion plugin

Apache Subversion is a software versioning and revision control system distributed as free software under the Apache License and is included as the pre-installed Devon code version control.

*1. Download Subversion client*

Firstly, get the last version of the Subversion client that can be found http://www.collab.net/downloads/subversion[here].

*2.Install subversion client*

As did with the Sencha plugin, now install the software on your local machine, by creating a subversion folder in the software directory of the distribution and do the installation directly there. If you install subversion in other location, then you must copy and paste the installation content to a subversion folder in the software directory of your distribution.

*3. Check the installation*

To check the installation, launch the console.bat script to get environment’s console and type the command svn --version. The console must recognize the command and return your subversion version installed.
 
If the command is not recognized, check the Subversion install process.

===== Adding Jasypt client

Jasypt is a java library which allows the developer to add basic encryption capabilities to the projects with minimum effort. Jasypt allows to manage and transparently decrypt encrypted values in .properties files used by Spring applications. In this case, the Jasypt client is a tool needed for configuring the <<The Winauth-SSO module,winauth>> module in order to generate the encrypted passwords that will be stored in the application.properties file. To facilitate to the developer the usage of the Devon framework, the Jasypt client is included as a default plugin in the distribution.

*1. Download the client*

The Jasypt client can be downloaded from the http://www.jasypt.org/download.html[Jasypt site]

*2. Extract the files*

Unzip the jasypt-<VERSION>-dist.zip file into the software directory.

*3. Usage*

To check the Jasypt client functionality, launch the console.bat script of distribution and go to the bin folder of the jasypt directory. Within this location, one can find the .bat files for Windows execution and you can check a basic encryption as follows:

[source,xml]
----
...\software\jasypt\bin>encrypt.bat input=MyPasswordToEncrypt password=MyKey
----

If the Jasypt client is correctly installed, you should receive a response like the following:

[source,xml]
----
[...]

aPZ03ig2ZCif8p592V8RNErt1aHdSXpLrwF5ECDJ/1M=
----
To know more about the Jasypt client usage, please visit this http://www.jasypt.org/[link].

===== Cobigen

Cobigen is a server-side code generator to create CRUD operations. Cobigen is not an external plugin but an Eclipse plugin and is included by default in the Devon distribution, so there is no installation needed. The only point that, you must be aware of is, to obtain the last version of the templates that Cobigen uses in order to work properly.

*1. Download the templates*

Again, get the last version of the templates from https://github.com/maybeec/tools-cobigen[here]. Clone the repository, and to do so, you need a Git client for windows, that can be downloaded from https://git-scm.com/downloads[here].
After the installation of the Git client on your local machine, launch the app and clone the Cobigen repository using the command:

[source,xml]
----
some\local\directory>git clone https://github.com/may-bee/tools-cobigen.git
----

In local directory, you have a new folder called tools-cobigen. Inside it, you should find a cobigen-templates\templates-oasp directory.

*2. Add the templates to our distribution*

Copy above created templates-oasp directory in the workspaces\main directory of  distribution and rename it as *CobiGen_Templates* (note that is mandatory to use this exact name), so you will have all the templates information at the following location:

[source,xml]
----
...\workspaces\main\CobiGen_Templates
----

*3. Preparing Cobigen for first use*

Now, in order to use Cobigen, follow the steps described in https://github.com/devonfw/devon-guide/wiki/getting-started-Cobigen#preparing-cobigen-for-first-use[this guide].

=== Updating OASP4Js module

_Simple guide to update node version and adding angular/cli to Devon’s OASP4Js module._

===== Prerequisites

In order to access to the installation of node and angular/cli, we need to have them installed in our machine:

*1.	Node*: Download the version you decide of node from https://nodejs.org/en/

*2.	Angular/cli*: Once Node is installed we have access to npm, so we execute the following command: *npm install –g @angular/cli*. It will install angular cli on global mode.

Now we have all we need on our machine to substitute the old files and add angular/cli. If everything went fine, we should have the following folders:

image::images/devonfw-dist-developers-guide/nodejs-fig1.png[,align="center",Devonfw, link="images/devonfw-dist-developers-guide/nodejs-fig1.png"]
Figure 1. Content of nodejs folder where you installed NodeJS.

And, at least, the highlighted files from the following figures:

image::images/devonfw-dist-developers-guide/npm-fig2.png[,align="center",Devonfw, link="images/devonfw-dist-developers-guide/npm-fig2.png"]
Figure 2.1. Content of npm folder inside of C:\Users\<YourUser>\AppData\Roaming\npm
 
image::images/devonfw-dist-developers-guide/node-modules-fig2-2.png[,align="center",Devonfw, link="images/devonfw-dist-developers-guide/node-modules-fig2-2.png"]
Figure 2.2. Content of node_modules inside of the folder from figure 2.1

===== Instructions

*1.	First*, we are going to add NodeJs and npm. To do so, copy the content showed in the *figure 1*. And paste it into <Distribution>/software/nodejs. This will make accessible node and npm from the distribution.

Make sure you did correctly this step by opening *console.bat* and running *node –v* and *npm –v*. They should show you the versions of the packages installed and confirming they have been installed successfully.

*2.	Secondly*, to add angular/cli copy the *ng* and *ng.cmd* files from *figure 2*. And paste them at nodejs at the same level as step 1.

Your distribution nodejs folder should look like this:

image::images/devonfw-dist-developers-guide/nodejs-result.png[,align="center",Devonfw, link="images/devonfw-dist-developers-guide/nodejs-result.png"]

*3.	Finally*, let’s add the module of angular/cli into our distribution. We copy the *highlighted files* from *figure 2*. And paste them into <Distribution>/software/nodejs/node_modules folder.

In the end, your nodejs/node_modules should contain *npm* and *@angular* like this:

image::images/devonfw-dist-developers-guide/node-modules-result.png[,align="center",Devonfw, link="images/devonfw-dist-developers-guide/node-modules-result.png"]

===== Important considerations

*Angular/cli global dependency*

Once this done, you should be able to execute angular/cli commands, but as angular/cli has been installed globally, it will always look first for this global dependency instead of our local in the distribution.

In order to be sure we done correctly all the steps, lets uninstall angular/cli globally from our machine executing this command: *npm uninstall –g @angular/cli*. Now if we open *console.bat* we should be able to run *ng –v* to show the version of our angular/cli installation inside our distribution, not the global one we installed at the beginning.

*Yarn vs npm*

This guide does not include how to install Yarn locally, this means it is expected to use npm instead, but *take into account that if you set globally Yarn as your default package manager, it will affect to your configuration inside of the distribution*. So, if you have in your machine Yarn installed and you set it as default package manager, node from the distribution will use it by default and will run successfully, but if you set it and you do not have Yarn installed, it will *not run*.

==== Adding sample apps

To complete the distribution, include some examples of server and client apps. To do that, use the sample applications that are already created for Devon and OASP, and can be found in the https://github.com/devonfw[Devon GitHub] and the https://github.com/oasp[OASP Github].

You need to include following:

* Devon Sample
* devon4sencha Sample
* oasp4j sample
* oasp4js sample.

*1. Create a examples directory*

Include the examples in a folder located in the workspaces directory. So, create it.

*2. Download the sample apps*

To download the examples of the apps, clone the Devon repositories. To achieve this, you must have installed the Git client for windows, it can be downloaded from https://git-scm.com/downloads[here].

Once the git client is installed on your local machine, launch it and access the created examples folder or from the windows explorer in the examples folder and right click on the mouse, open the _Git Bash Here_ option.

In the Git Bash window, use the clone option to get the last version of each of the sample repositories:
For *devon* sample:
[source,xml]
----
...workspaces\examples>git clone https://github.com/devonfw/devon.git
----

For *Sencha* sample:
[source,xml]
----
...workspaces\examples>git clone https://github.com/devonfw/devon4sencha.git
----
For *oasp server* sample:
[source,xml]
----
...workspaces\examples>git clone https://github.com/oasp/oasp4j.git
----

Now, you need to reset to the last stable release. To do so, in the oasp4j project in github, go to releases tab or go directly from this https://github.com/oasp/oasp4j/releases[link], copy the number related to the commit of the last release and in the git console go into the oasp4j just created directory and type the following command (replacing the {last-release-commit-number} by the number copied from github)

[source,xml]
----
...workspaces\examples\oasp4j>git reset --hard {last-release-commit-number}
----

For *oasp client* sample:
[source,xml]
----
...workspaces\examples>git clone https://github.com/oasp/oasp4js.git
----

The console will return the result of each clone operation.
 
After all the above steps, you must have your local examples folder with all the samples.

At this point, check the Sencha installation as explained in the previous section of Sencha’s installation. 
So, launch the distribution console (with the console.bat script) and go to _workspaces\examples\devon4sencha\ExtSample directory_ and run the following command:

[source,xml]
----
...\workspaces\examples\devon4sencha\ExtSample>sencha app watch
----
The app should be compiled and finally the console must show the message Waiting for changes and the app should be accessible from the browser using the url : 
http://localhost:1841/ExtSample/

==== Updating, adding scripts

===== S2 scripts

As these *s2 scripts* are not included in OASP distribution, which are downloaded as a base, in very first step in this document, are related to the Shared Services functionality included in Devonfw. The s2-init.bat configures the _settings.xml_ file to connect with an Artifactory Repository. The s2.create.bat generates a new project in the workspaces directory and does a checkout of a Subversion repository inside. Each script needs to be launched from the distribution’s cmd (launching the console.bat script) and some parameters to work properly.

===== Add ps-console.bat 
Add this script in script folder of distribution.

==== Modify version number of release
As soon as the new version of devonfw will be released, ensure to change the version number in *settings.json* to the one which is to be released.

_settings.json_ can be found at two places as mentioned below and both needs to be modified for version number.

*  <disrtibution directory>\settings\version\settings.json
*  <disrtibution directory>\workspaces\main\development\settings\version\settings.json

_settings.json_ contains:

[source,xml]
----
{
  "version": "2.0.1"
}
----
For example, consider you are creating distribution for the next version release, with some improvements in features etc and version becomes "2.1.1". Therefore, change the version from "2.0.1" to "2.1.1" in settings.json.

==== Update Components List

As part of the process of updating documentation, we must update the <<List of Components,Component List>> (**Java Libraries Table**). To do so, from sample root project we can use the `mvn dependency:analyse-report` command that will generate for us a list with all the libraries used in the Oasp4j project alongside other info like the version. The output files with the data will be stored in the `target` directory of each project.

The rest of the components metadata info (Modules, included Tools) must be updated manually.

==== Add changelog file

Add a simple .txt file named changelog, which contains information about new enhancements, features etc to be released in this version.

==== Verification and creation of the zip

Once all above mentioned steps are performed, verify the zip ,by running all apps present in examples directory.
For running Sencha, its already mentioned in this document above.
For verifying oasp4j and devon , go to sample projects respectively, and launch console.bat and traverse to sample server project and fire the below maven command:

[source,xml]
----
mvn clean install
----

if everything goes well, you will see a build success message, then deploy the generated war from sample project's target folder and deploy on tomcat server. It should give a login screen.

As you run all the apps, you would find a folder +conf+ in the root of distribution directory, remove it off before creation of zip. 

For the creation of zip, use 7z software and name the zip as Devon-dist_{version}.

==== Upload to Teamforge

Once everything runs successfully, upload it in teamforge.

==== Creation of Devon distribution in case of intermediate release

In case of an intermediate release, such as a bug fix release, you can use the last devon distribution zip.
Download it from https://coconet.capgemini.com/sf/frs/do/listReleases/projects.apps2_devon/frs.devon_distribution[here].

Once you download it, extract it and then skip *Adding plugins* step, and directly follow step *Adding sample apps* .
If there are any modifications in scripts etc, put new scripts at appropriate directory and then follow step from *Addition of changeLOG file* till *Upload to Teamforge*.

=== Linux

For Linux, you need to follow the steps mentioned below.


==== Download the OASP IDE

To create the new Devon distribution, you need to start from the latest OASP-IDE distribution that can be found https://coconet.capgemini.com/sf/go/projects.apps2_devon/frs.oasp4j_ide[here].
In this link, you will get OASP-IDE distribution for _Windows OS_ .
So, you need to align this linux devon distribution with Windows version.
Now, you have an OASP .zip file. Thus, the next step is to extract the file in a folder of your local machine. After extracting the oasp4j-ide-all.zip, you can rename it to fit to your new devon version. Now, execute below command from extracted directory:

[source,xml]
----
find . -type f -exec dos2unix {} \;
----

After extraction, delete all the binaries present in software folder. And you need to have below listed binaries in linux versions.

* ant
* eclipse
* tomcat
* sonarqube
* jasypt
* java
* nodejs
* maven
* sencha


==== Adding Plugins

The Devon distribution has some plugins that are not included in the OASP distribution, so you need to add them to your new version. In other scenario, it is possible that some existing plugin might be out of date, so you may need to update it.
Plugins to include:

* Sencha
* Cobigen


===== Sencha plugin

Sencha (Ext JS) is a pure JavaScript application framework for building interactive cross platform web applications using techniques such as Ajax, DHTML and DOM scripting. Sencha is the framework used in Devon to create the client side.

*1. Download Sencha Cmd*

Firstly, you need the last version of the software, so that you can download it from the https://www.sencha.com[Sencha’s website]. You must look for the Sencha Cmd package.

*2. Install Sencha*

To install the software, choose a proper location or directly create a Sencha directory in the software folder of the distribution and select this folder to do the installation. If you install it in other location, copy the installation content to your +software\Sencha folder+.
To complete the installation, you need to add the ext folder to the plugin. To do so, you must:

* Copy from the previous distribution the +software\Sencha\Cmd\default\repo*extract*+ directory and paste it in the  same place of the new distribution.

* Copy from the previous distribution the software\Sencha\Cmd\default\repo\pkgs*ext* directory and paste it in the same place of the new distribution.

*3. Check the installation*

A quick way to check if Sencha is installed is, to open the distribution console (launching the console.bat script) and type the command sencha, the console must return the Sencha version installed.
 
If there is no response, you must check your Sencha installation.
But, to check if the installation is completely successful, you should compile the ExtSample app, that you can obtain from the last section of this document. So, this check will be delayed until that moment.

===== Jasypt client

Jasypt is a java library which allows the developer to add basic encryption capabilities to the projects with minimum effort. Jasypt allows to manage and transparently decrypt encrypted values in .properties files used by Spring applications. In this case, the Jasypt client is a tool needed for configuring the <<The Winauth-SSO module,winauth>> module in order to generate the encrypted passwords that will be stored in the _application.properties_ file. To facilitate the developer in the usage of the Devon framework, the Jasypt client is included as a default plugin in the distribution.

*1. Download the client*

The Jasypt client can be downloaded from the https://www.jasypt.org/[Jasypt site]

*2. Extract the files*

Unzip the jasypt-<VERSION>-dist.zip file into the software directory.

*3. Usage*

To check the Jasypt client functionality, launch the console.bat script of distribution and go to the bin folder of the jasypt directory. Within this location, one can find the .bat files for Windows execution and you can check the basic encryption as follows:

[source,xml]
----
...\software\jasypt\bin>encrypt.bat input=MyPasswordToEncrypt password=MyKey
----

If the Jasypt client is correctly installed, you should receive a response like the following:
[source,xml]
----
[...]

aPZ03ig2ZCif8p592V8RNErt1aHdSXpLrwF5ECDJ/1M=
----
To know more about the Jasypt client usage, please visit this http://www.jasypt.org/[link].

===== Cobigen plugin

Cobigen is a server-side code generator to create CRUD operations. Cobigen is not an external plugin but an Eclipse plugin and by default, it is included in the Devon distribution. Therefore, no installation is needed. The only point that, you must be aware of is, to obtain the last version of the templates that Cobigen uses in order to work properly.

*1. Download the templates*

Again, get the last version of the templates from https://github.com/maybeec/tools-cobigen[here]. Clone the repository, and to do so, you need a Git client for windows, that can be downloaded from https://git-scm.com/downloads[here].
After the installation of the Git client on your local machine, launch the app and clone the Cobigen repository using the command:

[source,xml]
----
some\local\directory>git clone https://github.com/may-bee/tools-cobigen.git
----

In the local directory, you have a new folder tools-cobigen and you should find a _cobigen-templates\templates-oasp_ directory inside of it.

*2. Add the templates to our distribution*

Copy above created templates-oasp directory to the _workspaces\main- directory of  distribution and rename it as *CobiGen_Templates* (note that it is mandatory to use this exact name) so, you will have all the templates information at the following location:

[source,xml]
----
...\workspaces\main\CobiGen_Templates
----

*3. Preparing Cobigen for first use*

Now, in order to use Cobigen, follow the steps described in https://github.com/devonfw/devon-guide/wiki/getting-started-Cobigen#preparing-cobigen-for-first-use[this guide]

=== Updating node.js

The _node.js_ plugin is included in the OASP IDE distribution, but you may need to update it to the last version. To do so, proceed as follows:

*1. Check the current version*

In order to check the new version, open environment’s console by launching the _console.bat_ script. Then, type the command +node -v+ and the console must recognize the command and return the node version installed.

*2. Download new version*

Download the latest binary (.exe) version of node.js from https://nodejs.org/en/download/[here].

*3. Include it in the distribution*

Now, you must replace the _node.exe_ located on _software\nodejs_ by the newly downloaded _node.exe_.

*4. Check the new version*
To check the new version, proceed as mentioned in the step 1. The version returned by the console must match the version that you just downloaded.
 
If the command is not recognized or the version doesn’t match the downloaded version, check the installation process.

==== Adding the sample apps

To complete the distribution, include some examples of server and client apps. To do that, use the sample applications that are already created for Devon and OASP and can be found in the https://github.com/devonfw[Devon GitHub] and the https://github.com/oasp[OASP GitHub].

You need to include following:

* Devon Sample
* devon4sencha Sample
* oasp4j Sample
* oasp4js Sample

*1. Create a examples directory*

Include the examples in a folder located in the workspaces directory. So create it.

*2. Download the sample apps*

To download the examples of the apps, clone the Devon repositories. To achieve this, you should have installed the Git client for windows. It can be downloaded from https://git-scm.com/downloads[here].

Once the git client is installed on your local machine, launch it and access the created examples folder or from windows explorer in the examples folder and right click on the mouse, then open the _Git Bash Here_ option.

In the Git Bash window, use the clone option to get the last version of each of the sample repositories.

For *devon* sample:
[source,xml]
----
...workspaces\examples>git clone https://github.com/devonfw/devon.git
----

For *Sencha* sample:
[source,xml]
----
...workspaces\examples>git clone https://github.com/devonfw/devon4sencha.git
----
For *oasp server* sample:
[source,xml]
----
...workspaces\examples>git clone https://github.com/oasp/oasp4j.git
----

Now, you need to reset to the last stable release. To do so, in the oasp4j project in github, go to releases tab or go directly from this https://github.com/oasp/oasp4j/releases[link], copy the number related to the commit of the last release and in the git console go into the oasp4j just created directory and type the following command (replacing the {last-release-commit-number} by the number copied from github)

[source,xml]
----
...workspaces\examples\oasp4j>git reset --hard {last-release-commit-number}
----

For *oasp client* sample:
[source,xml]
----
...workspaces\examples>git clone https://github.com/oasp/oasp4js.git
----

The console will return the result of each clone operation.
 
After all the above steps, you must have your local examples folder with all the samples.

At this point, check the Sencha installation as explained in the previous section of Sencha’s installation. 
So, launch the distribution console (with the console.bat script) and go into _workspaces\examples\devon4sencha\ExtSample directory and type the following command:

[source,xml]
----
...\workspaces\examples\devon4sencha\ExtSample>sencha app watch
----

The app should be compiled and finally, the console must show the message _Waiting for changes_ and the app should be accessible from the browser using the url
http://localhost:1841/ExtSample/


==== Modify the release version

Before releasing the new version of devonfw, ensure to change the version number in the *settings.json* to the one which needs to be released.

_settings.json_ can be found at two places as mentioned below and both needs to be modified for the version number:

*  <disrtibution directory>\settings\version\settings.json
*  <disrtibution directory>\workspaces\main\development\settings\version\settings.json

Settings.json contains:

[source,xml]
----
{
  "version": "2.0.1"
}
----
For example, consider you are creating distribution for the next version release, with some improvements in features etc and version becomes "2.1.1". Therefore, change the version from "2.0.1" to "2.1.1" in settings.json.

==== Add changelog file

Add a simple .txt file named changelog, which contains information about new enhancements, features etc to be released in this version.

==== Verification and creation of zip

Once all above mentioned steps are performed, verify the zip ,by running all apps present in examples directory.
For running Sencha, its already mentioned in this document above.
For verifying oasp4j and devon , go to sample projects respectively, and launch console.bat and traverse to sample server project and fire the below maven command:

[source,xml]
----
mvn clean install
----

[NOTE]
====
For creating the zip file from the distribution directory, avoid using the Windows default compression tool (it doesn't work properly for large tree structures). The recommended tool for doing this is _7zip_.
====

if everything goes well, you will see a build success message, then deploy the generated war from sample project's target folder and deploy on the tomcat server.
It should give a login screen.

As you run all the apps, you will find a folder +conf+ in the root of distribution directory, remove it off before creation of zip. 

For creation of the zip, use 7z software and provide name of zip as Devon-dist_{version}.

==== Upload to Teamforge

Once everything runs successfully, upload it in teamforge.

==== Creation of Devon distribution in case of intermediate release

In case of an intermediate release, such as a bug fix release, you can use the last devon distribution zip.
Download it from https://coconet.capgemini.com/sf/frs/do/listReleases/projects.apps2_devon/frs.devon_distribution[here].

Once you download it, extract it and then skip *Adding plugins* step, and directly follow step *Adding sample apps* .
If there are any modifications in scripts etc, put new scripts at appropriate directory and then follow step from *Addition of changeLOG file* till *Upload to Teamforge*.