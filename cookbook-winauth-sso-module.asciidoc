:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== The Winauth-SSO module

This Devonfw module allows the applications to authenticate the users using the Windows credentials. The basic result is that the login is made automatically through the browser avoiding the login form (in some browsers like _Firefox_, you may need to authenticate once).

=== Single Sign On

Single sign-on (SSO) is a property of access control of multiple related, but independent software systems. With this property, a user logs in with a single ID and password to gain access to a connected system or systems without using different usernames or passwords, or in some configurations seamlessly sign on at each system.

For more information, visit https://en.wikipedia.org/wiki/Single_sign-on[wikipedia].

==== Include Winauth SSO in a Devon project

_Winauth SSO_ module provides a simple _Single sign-on_ authentication for your Devon applications. If you want to implement this kind of authentication in a Devon project, follow the next steps:

===== Step 1: Add the starter

Include the starter in pom.xml. Verify that the _version_ matches the last available version of the module:

[source,xml]
----
<dependency>
      <groupId>com.devonfw.starter</groupId>
      <artifactId>devonfw-winauth-sso-starter</artifactId>
      <version>${devonfw.version}</version>
</dependency>
----

===== Step 2: Inject the module

The class `general/service/impl/config/BaseWebSecurityConfig.java` uses the `@Inject` annotation to get access to the module through a private field.

[source,java]
----
import com.devonfw.module.winauthsso.common.api.WinauthSSO;

{...}

public abstract class BaseWebSecurityConfig extends WebSecurityConfigurerAdapter {

  {...}

  @Inject
  private WinauthSSO sso;

  {...}
}
----

[NOTE]
====
For previous versions of the _oasp4j_ based apps, you may find `BaseWebSecurityConfig` in a different location: `general/configuration/BaseWebSecurityConfig.java`. 
====

===== Step 3: Define the security entry point and filter

Also, add the winauth SSO configuration down in the void _configure(HttpSecurity)_ method in the BaseWebSecurityConfig.java` class

[source,java]
----
@Override
public void configure(HttpSecurity http) throws Exception {

    //Winauth SSO configuration
    http.
    [...]
    .addFilterAfter(this.sso.getSSOFilter(), BasicAuthenticationFilter.class).exceptionHandling()
        .authenticationEntryPoint(this.sso.getSSOFilterEntryPoint());
}
----

And that's all! Now, you have a simple SSO Authentication implemented.

Hereafter, when you access the app, the browser should redirect you to the main page of your app without the login process.

Henceforth, in the server console, you should see a message as shown below:

[source,bash]
----
waffle.spring.NegotiateSecurityFilter    : successfully logged in user: {Your-Domain}\{Your-User}
----

[NOTE]
====
You need to be careful with the service's current user because SSO by default is not compatible with the information of the `UserDetailsClientTo` class. You need to adapt this class or use a customized SSO User Details (next chapter in the wiki). 
====

==== Customized Winauth SSO User Details

According to the recent steps, you have a very simple authentication and authorization functionality with the Windows credentials. In the standard scenario, you may want to implement your own _User Details_. Therefore, let's discuss how to implement it for SSO authentication.

===== Step 1: Create customized filter

The idea is to rebuild the default filter `NegotiateSecurityFilter`, you can create a complete new filter or, like this example, just modify some methods. In this case, you need to modify `boolean setAuthentication(...)`, this method is called by the method `void doFilter(...)` (you can modify this method too) when the authentication is successful, so let's discuss how to build a custom _UserDetails_.

[source,java]
----
/**
 * This is a dummy implementation of a customized NegotiateSecurityFilter.
 *
 * @author jhcore
 */
public class NegotiateSecurityFilterCustomized extends NegotiateSecurityFilter {
  /** The Constant LOGGER. */
  private static final Logger LOGGER = LoggerFactory.getLogger(NegotiateSecurityFilterCustomized.class);

  private Usermanagement usermanagement = new UsermanagementDummyImpl();

  private AccessControlProvider accessControlProvider;

  /**
   * The constructor.
   *
   * @param accessControlProvider is the provider that help us to get the permissions
   */
  public NegotiateSecurityFilterCustomized(AccessControlProvider accessControlProvider) {
    super();
    this.accessControlProvider = accessControlProvider;
  }

  /**
   * The constructor.
   */
  public NegotiateSecurityFilterCustomized() {
    super();
  }

  @Override
  public void doFilter(final ServletRequest req, final ServletResponse res, final FilterChain chain)
      throws IOException, ServletException {

    // Here you can customize your own filer functionality
    super.doFilter(req, res, chain);
  }

  @Override
  protected boolean setAuthentication(final HttpServletRequest request, final HttpServletResponse response,
      final Authentication authentication) {

    try {
      String principal[] = authentication.getPrincipal().toString().split("\\\\", 2);

      String username = principal[1];

      UserProfile profile = this.usermanagement.findUserProfileByLogin(username);

      UsernamePasswordAuthenticationToken auth =
          new UsernamePasswordAuthenticationToken(profile, getAutoritiesByProfile(profile));

      SecurityContextHolder.getContext().setAuthentication(auth);
    } catch (Exception e) {
      NegotiateSecurityFilterCustomized.LOGGER.warn("error authenticating user");
      NegotiateSecurityFilterCustomized.LOGGER.trace("", e);
    }

    return true;
  }

  private Object getAutoritiesByProfile(UserProfile profile) {

    Set<GrantedAuthority> authorities = new HashSet<>();
    Collection<String> accessControlIds = new ArrayList<>();
    accessControlIds.add(profile.getRole().getName());
    Set<AccessControl> accessControlSet = new HashSet<>();
    for (String id : accessControlIds) {
      boolean success = this.accessControlProvider.collectAccessControls(id, accessControlSet);
      if (!success) {
        // authorities.add(new SimpleGrantedAuthority(id));
      }
    }
    for (AccessControl accessControl : accessControlSet) {
      authorities.add(new AccessControlGrantedAuthority(accessControl));
    }
    return authorities;
  }
}
----

The above example uses the `UsermanagementDummyImpl`, which is generated during the creation of the new Devon application. Feel free to customize your own filter, just use the above class with a customized Usermanagement.

===== Step 2: Inject and configure Winauth SSO

Now, let's discuss how to create a Winauth SSO variable and to configure the filter.

[source,java]
----
import com.devonfw.module.winauthsso.common.api.WinauthSSO;

{...}

public abstract class BaseWebSecurityConfig extends WebSecurityConfigurerAdapter {

  {...}

  @Inject
  private WinauthSSO sso;

  @Bean
  public AccessControlProvider accessControlProvider() {

    return new AccessControlProviderImpl();
  }

  {...}
}
----

As shown above, the Filter needs a AccessControlProvider, there is a one which is configured in the WebSecurityConfig, so you just need to pass it to the filter by param.

===== Step 3: Configure the Custom Filter and the security entry point

Add the _winauth SSO_ configuration down in the void _configure(HttpSecurity)_ method

[source,java]
----
@Override
public void configure(HttpSecurity http) throws Exception {
...
    
    // Set the custom filter
    this.sso.setCustomFilter(new NegotiateSecurityFilterCustomized(accessControlProvider()));

    // Add the Filter to the app authentication process
    http.addFilterAfter(this.sso.getSSOFilter(), BasicAuthenticationFilter.class).exceptionHandling()
        .authenticationEntryPoint(this.sso.getSSOFilterEntryPoint());
}
----

And that's all! Now, you have a simple SSO Authentication with a custom _UserDetails_ and you can use the server _current user_ by default.