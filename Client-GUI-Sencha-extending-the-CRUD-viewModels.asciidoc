:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Extending the CRUD: ViewModels

The place to store information for a view is the ViewModel. This object contains not only instance data but also calculated fields based on other viewModel. All this information can be referenced on the view object by means of the binding capabilities of the Sencha Framework. One ViewModel object instance is associated to each View instance and they share lifespan.

We create in app/view/table the file `TableListVM.js`:

[source,javascript]
----
Ext.define('demo.view.table.TableListVM', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.table-tables',
    requires : ['demo.model.table.TableM'],
    data: {
        selectedItem: false
    }
});
----

In our `TableListV.js` we are going to use the `selectedItem` property in the grid and add the reference of the **ViewModel**:

[source,javascript]
----
requires: [
    'Ext.grid.Panel',
    'demo.view.table.TableListVM',
    'demo.view.table.TableListVC'
],

viewModel: {
    type: "table-tables"
},

…

    grid : function() {
        return {
            xtype: 'grid',
            reference: 'tablesgrid',
            flex: 1,
            padding: '0 10 10 10',
            allowDeselect: true,
            store:this.getStore(),
            bind: {
                selection: '{selectedItem}'
            },
            columns: [{
                text: i18n.tables.grid.number,
                dataIndex: 'number'
            }, {
                text: i18n.tables.grid.state,
                dataIndex: 'state',
                flex: 1
            }],
            tbar: {
                items: [{
                    text: i18n.tables.buttons.add,
                    handler: 'onAddClick'
                }, {
                    text: i18n.tables.buttons.edit,
                    bind: {
                        disabled: '{!selectedItem}'
                    },
                    handler: 'onEditClick'
                }, {
                    text: i18n.tables.buttons.del,
                    bind: {
                        disabled: '{!selectedItem}'
                    },
                    handler: 'onDeleteClick'
                }]
            },
            listeners: {
                beforeitemdblclick: 'onEditDblclick'
            }
        }
    },
----

We can observe in the grid that if we haven’t selected any record in the grid, the `Edit` and `Delete` buttons are disabled.   On the contrary, if we select one record, the two buttons are enabled.   With the ViewModel every time that the property `selectedItem` change, the value is updated in the ViewModel.

We also can use the property `selectedItem` to get the selected record and simplify our code.   Edit the file `TableListVC.js` to use the ViewModel:

[source,javascript]
----
    onEditClick: function() {
        var rec = this.getViewModel().get('selectedItem');
        var id = rec.data.id;
        Ext.GlobalEvents.fireEvent('eventTableEdit', id);
    },
    onDeleteClick: function() {
        var me = this;
        Ext.MessageBox.confirm('Confirmar', i18n.main.deleteConfirmMsg,
            function(buttonPressed) {
                if (buttonPressed == 'no' || buttonPressed == 'cancel') {
                    return;
                }
                var rec = me.getViewModel().get('selectedItem');
                Devon.rest.tablemanagement.table.del({
                    scope: me,
                    uriParams: {
                        id: rowSelected.get('id')
                    },
                    success: me.refreshGrid
                });
            }
        );
    },
----

Test the demo application. We will see that it is working as before.

The only difference, as we said before, is that when there is no record selected, the `Edit` and `Delete` buttons are disabled:

image::images/client-gui-sencha/disableButtons.PNG[Disable Buttons,width="450", link="images/client-gui-sencha/disableButtons.PNG"]

Besides that, we can add to our ViewModel `TableListVM.js` the store we have defined for the Table entity:

[source,javascript]
----
Ext.define('demo.view.table.TableListVM', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.table-tables',
    requires : ['demo.model.table.TableM'],
    data: {
        selectedItem: false
    },
    stores: {
        tables: {
            model: 'demo.model.table.TableM',
            proxy: {
                type : 'tablemanagement.table'
            },
            autoLoad:true
        }
    }
});
----

As we have changed the way we define the store for the Table example, we have to use the store in the grid editing `TableListV.js` adding the binding to the store in the grid function.  So, we have to remove the property `store` in the grid that we had before for this one included in the binding:

[source,javascript]
----
bind: {
    store: '{tables}',
    selection: '{selectedItem}'
},
----

As you have seen, the store that provides data to the grid has been binded to a store property in the view model.

Then, we can delete our `TableS.js` and delete the function getStore() in `TableListV.js`:

[source,javascript]
----
/*getStore:function(){
    return Ext.create('store.table', {name:'storetable_'+Math.random()});
}*/
----

We can see that we have changed the way we connect with our service to get the tables.  

Now, we are going to use **REST endpoints**:

For easing the communication from Javascript code to the back-end, Devon provides helpers to define Rest endpoints as Javascript objects with methods to do a GET/POST/PUT/DELETE operations.

These Rest endoints are usually created on the **Controllers**, so they get instantiated at application launch and then can be used within other Controller and **ViewController** instances.

On the sample application the **Rest endpoints** used for all the table related operations are created on the global Table Controller.

So, we have to include in our controller, `TableController.js` the definition of the operation to obtain all the tables from the server side:

[source,javascript]
----
    /*Rest end points definition*/
    init: function() {
        Devon.Ajax.define({
            'tablemanagement.table': {
                url: 'tablemanagement/v1/table/{id}'
            }
        });
    },
----

We also have to delete in the file `Application.js` the reference to the store:

[source,javascript]
----
Ext.define('demo.Application', {
    extend: 'Devon.App',
    
    controllers: [
      'demo.controller.main.MainController',
      'demo.controller.page1.Page1Controller',
      'demo.controller.table.TableController'
    ],

    name: 'demo',

    stores: [
       
    ],
    
    launch: function () {
        // TODO - Launch the application
    }
});
----

Alter all of these changes we can navigate to the grid and we can observe that the store has been loaded correctly:

image::images/client-gui-sencha/disableButtons.PNG[Disable Buttons,width="450", link="images/client-gui-sencha/disableButtons.PNG"]

Now, it is time for the edition window.  So, we are going to create the ViewModel for this window defining the file `TableEditVM.js`:

[source,javascript]
----
Ext.define('demo.view.table.TableEditVM', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.table-edit-model',
    data: {
        table:{
            id: null,
            number: null,
            state:null ,
            modificationCounter: null
        }
    },
    stores: {
        states: {
            fields: ['code'],
            data:[
                {'code':'FREE'},
                {'code':'OCCUPIED'},
                {'code':'RESERVED'}
            ]
        }
    }
});
----

Once we have defined the ViewModel, we are going to edit our view `TableEditV.js` so that we use the properties defined in the ViewModel.  

First of all, we have to define the reference to the ViewModel and include it in the view in the ‘requires’ property.  Edit the file `TableEditV.js`:

[source,javascript]
----
requires: [
    'Ext.grid.Panel',
    'demo.view.table.TableEditVM',
    'demo.view.table.TableEditVC'
],
controller: "table-edit-controller",
viewModel: {
    type: "table-edit-model"
},
----

After defining the ViewModel that we are going to use for this view, we have to use the properties defined in it.   So, the formpanel now should be like this:

[source,javascript]
----
    formpanel : function(){
        return {
            xtype:'form',
            reference:'panel',
            defaults:{ margin : 5 },
            items : [{
                xtype:'hiddenfield',
                reference:'id',
                name: 'id',
                bind:{
                    value:'{table.id}'
                }
            },{
                xtype:'numberfield',
                reference:'number',
                fieldLabel:i18n.tableEdit.number,
                tabIndex:1,
                minValue:1,
                name: 'number',
                bind:{
                    value:'{table.number}'
                }
            },{
                xtype:'combo',
                reference:'state',
                fieldLabel:i18n.tableEdit.state,
                tabIndex:2,
                queryMode: 'local',
                displayField: 'code',
                valueField: 'code',
                name: 'state',
                bind: {
                    store: '{states}',
                    value: '{table.state}'
                }
            },{
                xtype:'hiddenfield',
                reference:'modificationCounter',
                name: 'modificationCounter',
                          bind:{
                    value:'{table.modificationCounter}'
                }
            }],
            bbar: [
                '->', {
                    text: i18n.tableEdit.submit,
                    handler: 'onTableEditSubmit'
                }, {
                    text: i18n.tableEdit.cancel,
                    handler: 'onTableEditCancel'
                }
            ]
        }
    },
----

As we can see, we don’t need to define the store for the field `state` in this view.   We have defined the store in the ViewModel so what we do here is use that store.   Then, we can delete the definition for the state store:

[source,javascript]
----
/*getStore: function(){
    return Ext.create('Ext.data.Store', {
        fields: ['code'],
        data:[
            {'code':'FREE'},
            {'code':'OCCUPIED'},
            {'code':'RESERVED'}
        ]
    });
}*/
----

Now, in the ViewController `TableEditVC.js` we can use the ViewModel to get the data of the View.   Then, our `onTableEditSubmit` function when we submit the data we just added or updated should be like this:

[source,javascript]
----
    onTableEditSubmit: function() {
        var vm = this.getViewModel();
        Devon.rest.tablemanagement.table.post({
            scope: this,
            jsonData : vm.get('table'),
            success: function(){
            //Fire event table changed
                Ext.GlobalEvents.fireEvent('eventTablesChanged');
        
                //Fire close event
                var parent =  this.getView().up();
                
                //If window we fire event
                if(parent.xtype=='window'){
                    parent.fireEvent('eventDone', parent);
                }
                //If tabpanel, we close the tab
                else{
                    this.getView().close();
                }
            }
        });
    },
----

Instead of getting the data from the form, we get the data from the ViewModel.  The same we do with the function `onAfterRender`:

[source,javascript]
----
    onAfterRender: function(view) {
        var parentParams = view.params || {};
        if(parentParams.id){    
            Devon.rest.tablemanagement.table.get({
                scope: this,
                uriParams: {
                    id: parentParams.id
                },
                success: function(table){
                    var vm = this.getViewModel();
                    vm.set('table', table);
                }
            });
        }
    },
----

As we can see, we get the value of the identifier of the table using the parameters of the view.  Instead of doing that, we can use a ViewModel created for that purpose.   So, in our `TableController.js` we have to send the parameters using a ViewModel:

[source,javascript]
----
    openAddEditWindow: function(idValue){
        var title = idValue ? 'Edit Table' : 'New Table';
        
        var window = Ext.create('Ext.window.Window', {
            title: title,
            width: 400,
            layout: 'fit',
            closable:false,
            draggable:true,
            resizable:false,
            modal:true,
            items: [{
                xtype:'tableedit',
                viewModel: {
                data: {
                    tableId: idValue
                }
                }
            }],
            listeners: {
                scope: this,
                eventDone: 'closeWindow'
            }
        }).show();
    },
----

Now, we are using a ViewModel even to send parameters to the window.   Then, in the controller of our window `TableEditVC.js` we can instanciate the viewModel in order to get the data:

[source,javascript]
----
    onAfterRender: function() {
        var vm = this.getViewModel();
        var id = vm.get("tableId");
        if(id){    
            Devon.rest.tablemanagement.table.get({
                scope: this,
                uriParams: {
                    id: id
                },
                success: function(table){
                    vm.set('table', table);
                }
            });
        }
    },
----

Navigate to the browser and check that everything is working as before so we can add or edit tables without any problem:

image::images/client-gui-sencha/editTableVM.PNG[Edit Table,width="450", link="images/client-gui-sencha/editTableVM.PNG"]