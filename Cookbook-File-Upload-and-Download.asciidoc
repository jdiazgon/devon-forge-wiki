:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== File Upload and Download

Apache CXF is an open source services framework. CXF helps you to build and develop services using front-end programming APIs, like JAX-WS and JAX-RS.

=== File download from CXF

*org.apache.cxf* provides the option to download files of different MIME (Multipurpose Internet Mail Extensions) types.

*Example:*

In JAX-RS, annotate the service method with @Produces("application/octet-stream"). You can define an interface for the service and annotate it with JAX-RS annotations:


[source,java]
--------
public interface DownloadService {
@SuppressWarnings("javadoc")
@Produces("application/octet-stream")
@GET
@Path("/downloadFile")
public Response getDownloadableFile() throws SQLException, IOException;
}
--------

And here is a simple implementation of the service:

[source,java]
--------
@Override
public Response  getDownloadableFile() throws SQLException, IOException {
    // FILE_PATH - specifies the location of the file in the file system.
    File file = new File("FILE_PATH");
    ResponseBuilder response = Response.ok((Object) file);
    // FILENAME.FILE_EXTENSION - specifies the filename and its extension after download.
    response.header("Content-Disposition", "attachment; filename=FILENAME.FILE_EXTENSION");
    return response.build();
}
--------

In the above code snippet, a file object is constructed by supplying path of the file to be downloaded. ResponseBuilder is created from this file object and finally the response is built from ResponseBuilder object.

Following table explains the annotations used for the download functionality:

.Annotations used for download functionality
|===
|*Annotation*|*Description*
|@Produces|It is used to specify the MIME media type that can be produced and sent back to the client.
|@GET|It is a request method designator defined by JAX-RS and corresponds to the similarly named HTTP method.
|@PATH|This identifies the URI path template to which the resource responds, and is specified at the class level of a resource.
|===


==== Produces Annotation

@Produces annotation is used to specify the MIME media type that can be produced and sent back to the client. If @Produces is applied at the class level, all the methods in a resource produce the specified MIME type by default. If applied at the method level, the annotation overrides any @Produces annotation applied at the class level.

If no methods in a resource are able to produce the MIME type in a client request, the JAX-RS runtime sends back an HTTP "406 Not Acceptable" error.

The value of @Produces is an array of String of MIME types.
For example: @Produces({"image/jpeg,image/png"})

The following example shows how to apply @Produces at both, the class and method levels:

[source,java]
--------
@Path("/myResource")
@Produces("text/plain")
public class SomeResource {
    @GET
    public String doGetAsPlainText() {
	...
    }
    @GET
    @Produces("text/html")
    public String doGetAsHtml() {
	...
    }
}

--------

=== File upload from CXF

*org.apache.cxf* provides option to upload files of different MIME (Multipurpose Internet Mail Extensions) type.

*Example:*

In JAX-RS, annotate the service method with @Consumes("multipart/mixed"). You can define an interface for the service and annotate it with JAX-RS annotations:

[source,java]
--------
import javax.ws.rs.core.MediaType;
--------

[source,java]
--------
public interface UploadService {
@SuppressWarnings("javadoc")
@Consumes(MediaType.MULTIPART_FORM_DATA)
@GET
@Path("/uploadFile")
public Response uploadFile(List<Attachment> attachments) throws SQLException, IOException;
}
--------

And here is a simple implementation of the service:

Add annotation @Transactional at class level and inject UcManageBinaryObject class object.

[source,java]
--------
@Transactional
public class implClassName{

@Inject
    private UcManageBinaryObject ucManageBinaryObject;

    /**
    * @return ucManageBinaryObject
    */
    public UcManageBinaryObject getUcManageBinaryObject() {

    return this.ucManageBinaryObject;
  }
}
--------


Web Service method implementation:

[source,java]
--------
@POST
@Consumes ("multipart/mixed")
// use @Consumes(MediaType.MULTIPART_FORM_DATA) if request contains multi-part form data and import //javax.ws.rs.core.MediaType;
@Path ("/upload")
public Response uploadFile(List<Attachment> attachments) {
    BinaryObjectEto binaryObject = new BinaryObjectEto();
    Blob blob = null;
    for (Attachment attachment: attachments) {
      DataHandler handler = attachment.getDataHandler();
      try {
          InputStream stream = handler.getInputStream();
          OutputStream outputStream = new ByteArrayOutputStream();
          IOUtils.copy(stream, outputStream);
          byte[] byteArray = outputStream.toString().getBytes();
          if (byteArray != null && byteArray.length != 0) {
          blob = new SerialBlob(byteArray);
          getUcManageBinaryObject().saveBinaryObject(blob, binaryObject);
          }
      } catch (SQLException e) {
            throw new SQLException(e.getMessage(), e);
      } catch (IOException e) {
            throw new IOException(e.getMessage(), e);
    }
  }
  return Response.ok("file uploaded").build();
 }
--------

In the above code snippet, uploaded attachments are iterated and InputStream for each attachment is extracted. Each InputStream is converted into the byte array and a Blob object is created out of it. The Blob object is saved into the database by calling saveBinaryObject(blob, binaryObject).

Following table explains the annotations used for upload functionality:

.Annotations used for upload functionality
|===
|*Annotation*|*Description*
|@Consumes|It is used to specify MIME media types that can be accepted, or consumed, from the client.
|@GET|It is a request method designator defined by JAX-RS and corresponds to the similarly named HTTP method.
|@PATH|This identifies the URI path template to which the resource responds, and is specified at the class level of a resource.
|===

==== Consumes Annotation

The @Consumes annotation is used to specify MIME media types that can be accepted, or consumed, from the client. If @Consumes is applied at the class level, all the response methods accept the specified MIME type by default. If applied at the method level, @Consumes overrides any @Consumes annotation applied at the class level.

If a resource is unable to consume the MIME type of a client request, the JAX-RS runtime sends back an HTTP 415 ("Unsupported Media Type") error.

The value of @Consumes is an array of String of acceptable MIME types. For example: @Consumes({"text/plain,text/html"})

The following example shows how to apply @Consumes at both, the class and method levels:

[source,java]
--------
@Path("/myResource")
@Consumes("multipart/related")
public class SomeResource {
    @POST
    public String doPost(MimeMultipart mimeMultipartData) {
	...
    }

    @POST
    @Consumes("application/x-www-form-urlencoded")
    public String doPost2(FormURLEncodedProperties formData) {
	...
    }
}
--------

=== MIME Types

MIME stands for "Multipurpose Internet Mail Extensions". It is a way of identifying files on the Internet, according to their nature and format. For example, using the "Content-type" header value defined in an HTTP response, the browser can open the file with the proper extension/plugin.

For more information, visit: http://www.freeformatter.com/mime-types-list.html
