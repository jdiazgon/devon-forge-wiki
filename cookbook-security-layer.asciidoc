:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Devon Security Layer

Security is todays most important cross-cutting concern of an application and an enterprise IT-landscape. We seriously care about security and give you detailed guides to prevent pitfalls, vulnerabilities, and other disasters. While many mistakes can be avoided by following our guidelines you still have to consider security and think about it in your design and implementation. The security guides provided by this document will not automatically prevent you from any harm, but they may give you hints and best practices already used in different software products.

=== Authentication

Definition:

> Authentication is the verification that somebody interacting with the system is the actual subject for whom he claims to be.

The one authenticated is properly called _subject_ or http://docs.oracle.com/javase/7/docs/api/java/security/Principal.html[_principal_]. However, for simplicity we use the common term _user_ even though it may not be a human (e.g. in case of a service call from an external system).

To prove his authenticity the user provides some secret called _credentials_. The most simple form of credentials is a password.

NOTE: Please never implement your own authentication mechanism or credential store. You have to be aware of implicit demands such as salting and hashing credentials, password life-cycle with recovery, expiry, and renewal including email notification confirmation tokens, central password policies, etc. This is the domain of access managers and identity management systems. In a business context you will typically already find a system for this purpose that you have to integrate (e.g. via LDAP).

oasp4j uses Spring Security as a framework for authentication purposes. In-memory authentication for an user is configured using Spring security. Refer the overriden _configureGlobal_ method of _AbstractWebSecurityConfig.java_ of OASP4J for an implementation of In-memory authentication.  

[source,java]
----
  @SuppressWarnings("javadoc")
  @Inject
  public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {

    auth.inMemoryAuthentication().withUser("user").password("password").roles("USER");
  }
----

==== Mechanisms

===== Basic

Http-Basic authentication can be easily implemented using BasicAuthenticationFilter:

===== Form Login

For a form login the spring security implementation might look like this:

[source,java]
----
.formLogin().successHandler(new SimpleUrlAuthenticationSuccessHandler()).defaultSuccessUrl("/")
        .failureUrl("/login.html?error").loginProcessingUrl("/j_spring_security_login").usernameParameter("username")
        .passwordParameter("password").and()
        .logout().logoutSuccessUrl("/login.html")
----

The interesting part is, that there is a login-processing-url, which should be adressed to handle the internal spring security authentication and similarly there is a logout-url, which has to be called to logout a user.


==== Preserve original request anchors after form login redirect

Spring Security will automatically redirect any unauthorized access to the defined login-page. After sucuessful login, the user will be redirected to the original requested URL. The only pitfall is, that anchors in the request URL will not be transmitted to server and thus cannot be restored after successful login. Therefore the oasp4j-security module provides the RetainAnchorFilter, which is able to inject javascript code to the source page and to the target page of any redirection. Using javascript this filter is able to retrieve the requested anchors and store them into a cookie. Heading the target URL this cookie will be used to restore the original anchors again.

To enable this mechanism you have to integrate the RetainAnchorFilter as follows:

First, declare the filter with: 

* `storeUrlPattern` a regular expression matching the URL, where anchors should be stored
* `restoreUrlPattern` a regular expression matching the URL, where anchors should be restored
* `cookieName` the name of the cookie to save the anchors in the intermediate time

[source,java]
----
  @Bean
  public RetainAnchorFilter retainAnchorFilter() {

    RetainAnchorFilter retainAnchorFilter = new RetainAnchorFilter();
    
    // first [^/]+ part describes host name and possibly port, second [^/]+ is the application name
    retainAnchorFilter.setStoreUrlPattern("http://[^/]+/[^/]+/login.*");
    retainAnchorFilter.setRestoreUrlPattern("http://[^/]+/[^/]+/.*");
    retainAnchorFilter.setCookieName("TARGETANCHOR");
    return retainAnchorFilter;
  }
----

Second, register the filter as first filter in the request filter chain. You might want to use the before="FIRST" or after="FIRST" attribute if you have multiple request filters, which should be run before the default filters.

.simple Spring Security filter insertion
[source,java]
----
.addFilterAfter(FIRST, RetainAnchorFilter.class)
----

Nevertheless, the oasp4j follows a different approach. The simple interface of Spring Security for inserting custom filters as stated above is driven by a relative alignment of the different filters been executed. You relatively can insert custom filters before or after existing ones and also at the beginning or at the end. You might easily see, that the real filter chain will get more and more invisible. Thus the oasp4j follows the default ordering of the Spring Security filter chain, such that it gets more transparent for any developer, which filters will be executed in which order and at which position a new custom filter may be inserted.

This documentation depends on Spring Security v4.2.3.RELEASE:

* http://docs.spring.io/spring-security/site/docs/4.2.3.BUILD-SNAPSHOT/reference/htmlsingle/#ns-custom-filters

These lists will be maintained each release, which will include a Spring Security upgrade. 
Thus first, we will not loose any changes from the possibly updated default filter chain of Spring Security. 
Second, due to the absolute declaration of the filter order, you might not get any strange behavior in your system after 
upgrading to a new version of Spring Security.

==== Users vs. Systems
If we are talking about authentication we have to distinguish two forms of principals:

* human users
* autonomous systems

While e.g. a Kerberos/SPNEGO Single-Sign-On makes sense for human users it is pointless for authenticating autonomous systems. So always keep this in mind when you design your authentication mechanisms and separate access for human users from access for systems.

=== Authorization

**Definition:**

> Authorization is the verification that an authenticated user is allowed to perform the operation he intends to invoke.

==== Clarification of terms

For clarification we also want to give a common understanding of related terms that have no unique definition and consistent usage in the wild.

.Security terms related to authorization
[options="header", cols="15%,85%"]
|=======================
|*Term*|*Meaning and comment*
|Permission|A permission is an object that allows a principal to perform an operation in the system. This permission can be _granted_ (give) or _revoked_ (taken away). Sometimes people also use the term _right_ what is actually wrong as a right (such as the right to be free) can not be revoked.
|Group|We use the term group in this context for an object that contains permissions. A group may also contain other groups. Then the group represents the set of all recursively contained permissions.
|Role|We consider a role as a specific form of group that also contains permissions. A role identifies a specific function of a principal. A user can act in a role.

For simple scenarios a principal has a single role associated. In more complex situations a principal can have multiple roles but has only one active role at a time that he can choose out of his assigned roles. For KISS it is sometimes sufficient to avoid this by creating multiple accounts for the few users with multiple roles. Otherwise at least avoid switching roles at runtime in clients as this may cause problems with related states. Simply restart the client with the new role as parameter in case the user wants to switch his role.
| Access Control | Any permission, group, role, etc., which declares a control for access management.
|=======================

=== Suggestions on the access model
The access model provided by oasp4j-security follows this suggestions:

* Each Access Control (permission, group, role, ...) is uniquely identified by a human readable string.
* We create a unique permission for each use-case.
* We define groups that combine permissions to typical and useful sets for the users.
* We define roles as specific groups as required by our business demands.
* We allow to associate users with a list of Access Controls.
* For authorization of an implemented use case we determine the required permission. Furthermore, we determine the current user and verify that the required permission is contained in the tree spanned by all his associated Access Controls. If the user does not have the permission we throw a security exception and thus abort the operation and transaction.
* We try to avoid negative permissions, that is a user has no permission by default but only those granted to him additively permit him for executing use cases.
* Technically we consider permissions as a secret of the application. Administrators shall not fiddle with individual permissions but grant them via groups. So the access management provides a list of strings identifying the Access Controls of a user. The individual application itself contains these Access Controls in a structured way, whereas each group forms a permission tree.

==== oasp4j-security

The OASP4J applications provide a ready to use module _oasp4j-security_ that is based on http://projects.spring.io/spring-security/[spring-security] and makes your life a lot easier.

.OASP4J Security Model
image::images/security-layer/Security-AccessControl.png["access-control",align="center",width="450", link="images/security-layer/Security-AccessControl.png"]

The diagram shows the model of _oasp4j-security_ that separates two different aspects:

* The _Indentity- and Access-Management_ is provided by according products and typically already available in the enterprise landscape (e.g. an active directory). It provides a hierarchy of _primary access control objects_ (roles and groups) of a user. An administrator can grant and revoke permissions (indirectly) via this way.
* The application security is using _oasp4j-security_ and defines a hierarchy of _secondary access control objects_ (groups and permissions) in the file _access-control-schema.xml_ (see https://github.com/oasp/oasp4j/blob/develop/samples/core/src/main/resources/config/app/security/access-control-schema.xml[example from sample app]). This hierarchy defines the application internal access control schema that should be an implementation secret of the application. Only the top-level access control objects are public and define the interface to map from the primary to secondary access control objects. This mapping is simply done by using the same names for access control objects to match.

===== Access Control Schema

The `oasp4j-security` module provides a simple and efficient way to define permissions and roles. The file `access-control-schema.xml` is used to define the mapping from groups to permissions. The general terms discussed above can be mapped to the implementation as follows:

.General security terms related to oasp4j access control schema
[options="header", cols="15%,30%,55%"]
|=======================
|*Term*|*oasp4j-security implementation*|*Comment*
|Permission|AccessControlPermission|
|Group|AccessControlGroup|When considering different levels of groups of different meanings, declare `type` attribute, e.g. as "group".
|Role|AccessControlGroup|With `type="role"`.
|Access Control|AccessControl| Super type that represents a tree of `AccessControlGroups` and `AccessControlPermissions`. If a principal "has" a `AccessControl` he also "has" all `AccessControls` with according permissions in the spanned sub-tree.
|=======================

.Example _access-control-schema.xml_
[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<access-control-schema>
  <group id="ReadMasterData" type="group">
    <permissions>
      <permission id="OfferManagement_GetOffer"/>
      <permission id="OfferManagement_GetProduct"/>
      <permission id="TableManagement_GetTable"/>
      <permission id="StaffManagement_GetStaffMember"/>
    </permissions>
  </group>

  <group id="Waiter" type="role">
    <inherits>
      <group-ref>Barkeeper</group-ref>
    </inherits>
    <permissions>
      <permission id="TableManagement_ChangeTable"/>
    </permissions>
  </group>
  ...
</access-control-schema>
----

This example `access-control-schema.xml` declares

* a group named `ReadMasterData`, which grants four different permissions, e.g., `OfferManagement_GetOffer`
* a group named `Waiter`, which
** also grants all permissions from the group `Barkeeper`
** in addition grants the permission `TableManagement_ChangeTable`
** is marked to be a `role` for further application needs.

The oasp4j-security module automatically validates the schema configuration and will throw an exception if invalid.

The permissions and roles defined in `access-control-schema.xml` are loaded using implementation of _AccessControlSchemaProvider_ interface as show below.

[source,java]
----
InputStream inputStream = this.accessControlSchema.getInputStream()) {
AccessControlSchema schema = this.accessControlSchemaMapper.read(inputStream);
----

Group permissions are collected that principal is part of and is used to decide access to application resources as shown below

[source,java]
----
    Set<GrantedAuthority> authorities = new HashSet<>();
    Collection<String> accessControlIds = this.principalAccessControlProvider.getAccessControlIds(principal);
    Set<AccessControl> accessControlSet = new HashSet<>();
    for (String id : accessControlIds) {
      boolean success = this.accessControlProvider.collectAccessControls(id, accessControlSet);
      if (!success) {
        LOG.warn("Undefined access control {}.", id);
      }
    }
    for (AccessControl accessControl : accessControlSet) {
      authorities.add(new AccessControlGrantedAuthority(accessControl));
    }
----

===== Configuration on URL level

The authorization (in terms of Spring security "access management") can be enabled seperately for different url patterns, the request will be matched against. The order of these url patterns is essential as the first matching pattern will declare the access restriction for the incoming request (see access attribute). Here an example:

.Extensive example of authorization on URL level
[source,java]
----
.authorizeRequests()
          .antMatchers("/login", "/home").permitAll()
          .antMatchers("/admin/**").hasRole("ADMIN")
          .anyRequest().authenticated()
----

===== Configuration on Java Method level
As state of the art oasp4j will focus on role-based authorization to cope with authorization for executing use case of an application. 
We will use the _JSR250_ annotations, mainly `@RolesAllowed`, for authorizing method calls against the permissions defined in the annotation body. This has to be done for each use-case method in logic layer. Here is an example:

[source,java]
----
  @RolesAllowed(PermissionConstants.FIND_TABLE)
  public TableEto findTable(Long id) {
    return getBeanMapper().map(getTableDao().findOne(id), TableEto.class);
  }
----

Now this method _findTable_ can only be called if the user that is logged-in has the permission `FIND_TABLE`.

More in detail, imagine that you have two types of users in your app: _customers_ and _admins_. So you want to allow both of them to see your products but only _admins_ can create new ones. In the Devonfw based apps ( _JSR250_ annotations) the way you should proceed to achieve that would be 

1 - Define the roles in the _access-control-schema.xml_ file (usually located on `/src/main/resources/config/app/security`)

[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<access-control-schema>
  ...
  <group id="Customer" type="role">
    <permissions>
      <permission id="SeeProducts"/>
    </permissions>
  </group>

  <group id="Admin" type="role">
    <inherits>
      <group-ref>Customer</group-ref>
    </inherits>
    <permissions>
      <permission id="CreateProduct"/>
    </permissions>
  </group>
  ...
</access-control-schema>
----

As you can see we have created two roles _Customer_ and _Admin_. The _Customer_ can _SeeProducts_ and the _Admin_ inherits permissions from _Customer_, so he can also _SeeProducts_, and in addition to that we have defined an new permission _CreateProduct_ to allow only him to create new products.

2 - Is recommended, although optional, to use an intermediate class to manage the permission terminology to avoid errors. So we could create a class _PermissionConstants_ and store there the permission names. You can use <<Step 2: Generate the PermissionConstants class,Cobigen>> to easily generate this class.

[source,java]
----
public abstract class PermissionConstants {

  public static final String SEE_PRODUCTS = "SeeProducts";

  public static final String CREATE_PRODUCT = "CreateProduct";

  ...

}
----

3 - Finally, in our theoretical _Productmanagement_ use case, at implementation level ( `src/main/java/my/devonfw/app/productmanagement/logic/impl/ProductmanagementImpl.java` ) , we can define the permissions for each method using the `@RolesAllowed` annotation

[source,java]
----
public class ProductmanagementImpl extends AbstractComponentFacade implements Productmanagement {

  @Override
  @RolesAllowed(PermissionConstants.SEE_PRODUCTS)
  public ProductEto findProduct(Long id) {

    ProductEntity product = getProductDao().load(id);
    return getBeanMapper().map(product, ProductEto.class);
  }

  @Override
  @RolesAllowed(PermissionConstants.CREATE_PRODUCT)
  public ProductEto saveProduct(ProductEto product) {

    Objects.requireNonNull(product, "product");

    ProductEntity persistedProduct = getProductDao().save(getBeanMapper().map(product, ProductEntity.class));
    return getBeanMapper().map(persistedProduct, ProductEto.class);
  }

}
----

At this point, with these three simple steps, the regular customers can see the products but not create new ones, while _admins_ can do both operations. 

===== Check Data-based Permissions
Currently, we have no best practices and reference implementations to apply permission based access on an application's data.
Nevertheless, this is a very important topic due to the high standards of data privacy & protection especially in germany. We will further investigate this topic and we will adress it in one of the next releases. For further tracking have a look at https://github.com/oasp/oasp4j/issues/125[issue #125].

==== Spring Security APIs and their usage in OASP4j
===== UsersDetailsService
_UserDetailsService_ is a core interface used to load user-specific data. It has loadUserByUsername() method to find a user entity and can be overridden to provide custom implementation. For further reading follow the Spring Security documentation https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc-authentication-userdetailsservice[here]

===== BaseUserDetailsService
This is a custom implementation of Spring's _UserDetailsService_. It overrides loadUserByUsername() method and returns _UserDetails_ with user data and authorities. This implementation of _UserDetailsService_ is further used in _AbstractWebSecurityConfig_.

===== AbstractWebSecurityConfig
This class extends Spring Security's class _WebSecurityConfigurerAdapter_ and overrides configure() method. Here _BaseUserDetailsService_ is set in Spring HttpSecurity that configures web based security for http requests.

=== Vulnerabilities and Protection
Independent from classical authentication and authorization mechanisms there are many common pitfalls that can lead to vulnerabilities and security issues in your application such as XSS, CSRF, SQL-injection, log-forging, etc. A good source of information about this is the https://www.owasp.org[OWASP].
We address these common threats individually in _security_ sections of our technological guides as a concrete solution to prevent an attack typically depends on the according technology. The following table illustrates common threats and contains links to the solutions and protection-mechanisms provided by the OASP:

.Security threats and protection-mechanisms
[options="header"]
|=======================
|*Thread*|*Protection*|*Link to details*
|https://www.owasp.org/index.php/Top_10_2013-A1-Injection[A1 Injection]
|validate input, escape output, use proper frameworks
|<<Data-Access Layer Security,data-access-layer guide>>

|https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management[A2 Broken Authentication and Session Management]
|encrypt all channels, use a central identity management with strong password-policy
|<<Authentication,Authentication>>

|https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)[A3 XSS]
|prevent injection (see A1) for HTML, JavaScript and CSS and understand same-origin-policy
|link:https://github.com/oasp/oasp4j/wiki/guide-client-layer[client-layer]

|https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References[A4 Insecure Direct Object References]
|Using direct object references (IDs) only with appropriate authorization
|<<Logic Layer Security,logic-layer>>

|https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration[A5 Security Misconfiguration]
|Use OASP application template and guides to avoid
|http://repo1.maven.org/maven2/io/oasp/java/templates/[application template]

|https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure[A6 Sensitive Data Exposure]
|Use secured exception facade, design your data model accordingly
|<<REST Exception Handling,REST exception handling>>

|https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control[A7 Missing Function Level Access Control]
|Ensure proper authorization for all use-cases, use `@DenyAll` als default to enforce
|<<Authorization,Method authorization>>

|https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)[A8 CSRF]
|secure mutable service operations with an explicit CSRF security token sent in HTTP header and verified on the server
|<<CSRF,service-layer security>>

|https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities[A9 Using Components with Known Vulnerabilities]
|subscribe to security newsletters, recheck products and their versions continuously, use OASP dependency management
|https://cve.mitre.org/news/newsletter.html[CVE newsletter]

|https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards[A10 Unvalidated Redirects and Forwards]
|Avoid using redirects and forwards, in case you need them do a security audit on the solution.
|OASP proposes to use rich-clients (SPA/RIA). We only use redirects for login in a safe way.

|https://www.owasp.org/index.php/Log_Forging[Log-Forging]
|Escape newlines in log messages
|<<Logging and Auditing Security,logging security>>
|=======================

Tool for testing your web application against vulnerabilities: https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project[OWASP Zed Attack Proxy Project]

. Easy to Install 
. Supports Different types of Fuzzer Based Tests
. Details Results Reports
. Convenient to carry out Test on Staging environment