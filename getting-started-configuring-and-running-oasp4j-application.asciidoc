:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Configuring and Running OASP4J Application

Devonfw distribution comes with a latest Master version of My Thai Star application. 

=== Configuring the Application

==== Step 1: Setup the Devonfw Environment
Configure the Devonfw environment using following steps given <<Download and Setup,here>>.

==== Step 2: Import the project

First of all, import above Sample Application into Eclipse using the following steps:

1. Open Eclipse by executing "eclipse-main.bat" from _Devon-dist_ folder.

1. Select "File -> Import".

1. Select "Maven -> Existing Maven Projects" as shown below:
+
image::images/running-sample-application/running_sample_application_1_import_maven_prject.png[, width="450", link="images/running-sample-application/running_sample_application_1_import_maven_prject.png",]

1. Select the directory _"workspaces/examples/my-thai-star"_ as shown below:

+
image::images/running-sample-application/select_maven_project_1.png[, width="450 ink="images/running-sample-application/select_maven_project_1.png",]

1. Press "Finish"
+
image::images/running-sample-application/select_maven_project_2.png[, width="450", link="images/running-sample-application/select_maven_project_2.png",]

1. Wait for Eclipse to finish importing the sample projects. This process might take several minutes, depending on the speed of your internet connection.


=== Running the Application

==== Step 1: Run the application

Using _Spring Boot_ features,  run your _Java_ back-end applications using the _Run as -> Java application_ over the _SpringBootApp.java_ main class as shown below:

image::images/running-sample-application/run.png[,width="450", link="images/running-sample-application/run.png"]

Once you see the console messages like : 

----
Tomcat started on port(s): 8081 (http)
Started SpringBootApp in 15.985 seconds (JVM running for 16.833)
----

you can start consuming the _Java_ back-end.

==== Step 2: Test the application

You can use https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop[Postman] plugin for _Chrome_ to see the back-end services results, although you can use any other similar application.

Now, with _Postman_, you can do a simple _GET_ request to obtain the info of a _dish_ with _id=1_ (`http://localhost:8081/mythaistar/services/rest/dishmanagement/v1/dish/1`). And you get a result like:

image::images/running-sample-application/get_request.png[,width="450", link="images/running-sample-application/get_request.png"]
