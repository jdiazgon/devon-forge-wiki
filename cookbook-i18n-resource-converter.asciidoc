:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Devon-locale module(i18n resource converter)

=== Introduction

Devon-locale is a standalone module; basically it is resource converter for internationalization. Currently, each part of an application - OASP4J, Angular2 etc - use their native resource formats for internationalization. This becomes unwieldy in large systems, especially if part of the texts is shared by the server, client and/or different client apps.
Devon-locale solves this problem by using one resource file as input and translating it to one or more target formats. Currently we have java property file as input file, user will mention key value pair in java property file. Current version of devon-locale is converting or translating it to JSON (format used by angular application) and EXTJS (format used by Sencha application) format. So, conceptually this module is a "translator", a custom made program which is able to translate - or transform - to any possible destination format.

=== Devon locale structure and working 

Devon-locale will convert java properties file to destination format(EXTJS or JSON). We will create IR(Intermediate representation) from java properties file. This IR will be same for all output formats. We will pass this Intermediate representation to various output adapters which will generate respective output files. Currently JsonTargetAdapter and ExtJsTargetAdapter are available. IR is tree like structure created from properties file key value pair.

==== Devon locale basic usage

- Import source code in eclipse from path https://github.com/devonfw/devonfw-locale
- Export as runnable jar.
- Go to command prompt navigate to the path of jar.
- Command to run devon-locale

-- Read from file and write to file

[source,xml]
----
java -jar devon-locale.jar -input D:\Test_Dist\Devon-dist_2.1.0_SNAPSHOT\workspaces\i18nWs\TestRepo\devon-locale\src\main\resources\sample.properties -informat java -outformat ANGULAR -output D:\temp.json

				OR

java -jar devon-locale.jar -i D:\Test_Dist\Devon-dist_2.1.0_SNAPSHOT\workspaces\i18nWs\TestRepo\devon-locale\src\main\resources\sample.properties -f java -t ANGULAR -o D:\temp.json
----

-- Read from console and write to console

[source,xml]
----
java -jar devon-locale.jar -informat java -outformat ANGULAR -input "farewell=Tschüß"

				OR
java -jar devon-locale.jar -f java -t ANGULAR -i "farewell=Tschüß"
----

As you can see in above example there are various input params which are described in below table:

[options="header"]
|=======================
|*Name*	|*Description*	|*Optional*
|input, i	|File containing source translation	| True, default value <<console in>> 
|informat, f 	|Format of the source translation. Possible values: "java"	| True, default value "java"
|output, o	|File with target translation	| True, default value"<<console out>>
|outformat, t	|Format of the target translation Possible values: "angular" or "extjs"	| True, default value "angular"
|=======================

Alternatively we can launch devon-locale from eclipse , we need to run DevonLocale.java as java application.

Sample.properties file used to test above module.

[source,xml]
----
object.man.name=John
a.b.c.d.e=f
zz=bb
noFiles=n' y as pas de fichiers
oneFile = y a un fichier
multipleFiles = y a {2} fichiers
pattern = Il {0} sur {1}.
sampleStmt=At 10:16 AM on July 31, 2009, we detected 7  spaceships on the planet Mars. we paid $1000. He is at position {{0}} \n
greetings = Hallo.
farewell = Tschüß.
inquiry = Wie geht's?
sampleDate=12-10-2017
sampleMultiline= hi \
I am \
Sneha
nextline=new
----

This sample.properties contains 

[source,xml]
----
a.	Dates
b.	Multiline input
c.	positional parameters ({0}, {1}, etc)
d.	Special character like üß
----
